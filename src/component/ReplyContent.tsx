// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useState } from 'react';
import {
  PlasmicReplyContent,
  DefaultReplyContentProps,
} from './plasmic/shared/PlasmicReplyContent';
import ReplyContentSecond from 'component/ReplyContent';
import { IMessageQuery } from 'module/interface/message';
import { useMessages } from 'module/hook/message';

interface ReplyContentProps extends DefaultReplyContentProps {
  id: string;
  updateId: string;
  timelineId: string;
  organizationId: string;
  userName: string;
  text: string;
  date: string;
}

function ReplyContent(props: ReplyContentProps) {
  const {
    updateId,
    timelineId,
    userName,
    organizationId,
    id,
    date,
    text,
  } = props;
  const [isReply, setIsReply] = useState<'isReply' | 'isUser'>(
    'isUser',
  );
  const messageSearch: IMessageQuery = {
    updateId,
    reid: id,
    timelineId,
    userId: userName,
    organizationId,
  };
  const { data: messagesData } = useMessages(messageSearch);
  const messages =
    messagesData?.filter((message: any) => message.reid === id) ?? [];

  console.log('messages replied to this message:', messages);

  return (
    <PlasmicReplyContent
      state={isReply}
      replyInput={{
        organizationId: organizationId,
        timelineId,
        updateId,
        userId: userName,
        reid: id,
      }}
      userName={userName}
      text={text}
      date={date}
      repliesContainer={{
        children: messages.map((message: any) => (
          <ReplyContentSecond
            userName={message.userId}
            date={message.date}
            key={message.id}
            id={message.id}
            text={message.text}
            updateId={updateId}
            timelineId={timelineId}
            organizationId={organizationId}
          />
        )),
      }}
      replyButton={{
        onClick: () => setIsReply('isReply'),
      }}
    />
  );
}

export default ReplyContent;
