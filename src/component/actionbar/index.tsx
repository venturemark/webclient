// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useState } from "react";
import {
  PlasmicActionBar,
  DefaultActionBarProps,
} from "component/plasmic/shared/PlasmicActionBar";
import ComposeEditor from "component/editor/compose";
import { Node } from "slate";
import { initialValueEmpty } from "component/editor/config/initialValues";

interface ActionBarProps extends DefaultActionBarProps {
  updates: any;
  setUpdates: any;
}

const serialize = (value: Node[]) => {
  return (
    value
      // Return the string content of each paragraph in the value's children.
      .map((n: Node) => Node.string(n))
      // Join them all with line breaks denoting paragraphs.
      .join("\n")
  );
};

type HasContent = undefined | "hasContent";
type ErrorMessage = undefined | string;
type NumberValue = undefined | number;

function ActionBar(props: ActionBarProps) {
  const { updates, setUpdates } = props;

  // setting composeEditor value
  const store = localStorage["composeEditor.content"] || "";
  const initialValue = store !== "" ? JSON.parse(store) : initialValueEmpty;
  const [value, setValue] = useState<Node[]>(initialValue);
  const [errorMessage, setErrorMessage] = useState<ErrorMessage>(undefined);
  const [numberValue, setNumberValue] = useState<NumberValue>(undefined);

  const hasContentDefault =
    serialize(value) === "" || serialize(value) === undefined
      ? undefined
      : "hasContent";
  const [hasContent, setHasContent] = useState<HasContent>(hasContentDefault);

  const createUpdate = () => {
    if (!hasContent) {
      setErrorMessage("Please enter some text");
      return;
    }

    if (!numberValue) {
      setErrorMessage("Please enter a number");
      return;
    }

    if (serialize(value).length > 240) {
      setErrorMessage(
        `Your update is ${
          serialize(value).length
        } characters. The limit is 240 characters`
      );
      return;
    }

    const update = {
      text: value,
      numberValue: numberValue,
      id: new Date(),
    };
    setUpdates([update, ...updates]);

    //reset compose state
    localStorage.setItem(
      "composeEditor.content",
      JSON.stringify(initialValueEmpty)
    );
    setValue(initialValueEmpty);
    setErrorMessage(undefined);
  };

  return (
    <PlasmicActionBar
      content={hasContent}
      error={errorMessage ? "hasError" : undefined}
      errorMessage={errorMessage}
      textContainer={{
        render: () => (
          <ComposeEditor
            setHasContent={setHasContent}
            value={value}
            setNumberValue={setNumberValue}
            setValue={setValue}
          />
        ),
      }}
      sendButton={{
        onPress: () => createUpdate(),
      }}
    />
  );
}

export default ActionBar;
