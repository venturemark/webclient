// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useState, useEffect } from "react";
import {
  PlasmicAddEditTimeline,
  DefaultAddEditTimelineProps,
} from "component/plasmic/shared/PlasmicAddEditTimeline";
import { INewTimeline, ITimeline } from "module/interface/timeline";
import { useCreateTimeline, useUpdateTimeline } from "module/hook/timeline";
import { useAuth0 } from "@auth0/auth0-react";
import { useHistory, useParams } from "react-router-dom";
import { timelineNameError } from "module/errors";

interface ParamsType {
  timelineSlug: string;
  ventureSlug: string;
}

interface AddEditTimelineProps extends DefaultAddEditTimelineProps {
  setIsActive: any;
  currentTimeline: ITimeline;
  handleSubmit: any;
  register: any;
  reset: any;
  errors: any;
}

function AddEditTimeline(props: AddEditTimelineProps) {
  const {
    setIsActive,
    currentTimeline,
    handleSubmit,
    register,
    reset,
    errors,
    ...rest
  } = props;
  const history = useHistory();
  const { timelineSlug } = useParams<ParamsType>();

  const { getAccessTokenSilently } = useAuth0();

  const isEdit = timelineSlug ? "isEdit" : undefined;

  const [token, setToken] = useState<string>("");
  const userId = getUser()?.id ?? "";
  const ventureId = "";

  const { mutate: createTimeline } = useCreateTimeline();
  const { mutate: updateTimeline } = useUpdateTimeline();

  const handleCreate = (data: any) => {
    if (!token || !data.name || !data.description) {
      return;
    }
    const timeline: INewTimeline = {
      name: data.name,
      desc: data.description,
      userId,
      ventureId: ventureId,
      token: token,
    };

    isEdit ? updateTimeline(timeline) : createTimeline(timeline);
    reset();
    history.push(`/${ventureId}/feed`);
  };

  const handleDelete = () => {
    console.log("delete timeline");
    //delete current timeline
  };

  useEffect(() => {
    const getToken = async () => {
      try {
        const token = await getAccessTokenSilently();
        setToken(token);
      } catch (error) {
        console.log(error.error);
      }
    };
    if (token === "") {
      getToken();
    }
  }, [getAccessTokenSilently, token]);

  return (
    <PlasmicAddEditTimeline
      variantState={isEdit}
      settings={{
        onSubmit: handleSubmit(handleCreate),
      }}
      name={{
        register: register({ required: true }),
        name: "name",
        defaultValue: currentTimeline?.name ?? "",
        errorMessage: errors.name && timelineNameError,
      }}
      description={{
        register: register({ required: true }),
        name: "description",
        defaultValue: currentTimeline?.desc ?? "",
      }}
      buttonSetEdit={{
        handleCancel: () => history.push(`/${ventureId}/feed`),
        handleDelete: () => handleDelete(),
      }}
      visibility={{}}
      {...rest}
    />
  );
}

export default AddEditTimeline;
