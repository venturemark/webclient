// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React from "react";
import {
  PlasmicAddEditTimeline,
  DefaultAddEditTimelineProps,
} from "component/plasmic/shared/PlasmicAddEditTimeline";
import {
  ICreateTimeline,
  ITimeline,
  IUpdateTimeline,
} from "module/interface/timeline";
import { useCreateTimeline, useUpdateTimeline } from "module/hook/timeline";
import { useHistory, useParams } from "react-router-dom";
import { timelineNameError } from "module/errors";
import { useGetToken } from "module/auth";
import { IVenture } from "module/interface/venture";

interface ParamsType {
  timelineSlug: string;
  ventureSlug: string;
}

interface AddEditTimelineProps extends DefaultAddEditTimelineProps {
  setIsActive: any;
  setIsVisible: any;
  currentVenture: IVenture;
  currentTimeline: ITimeline;
  handleSubmit: any;
  register: any;
  reset: any;
  errors: any;
}

function AddEditTimeline(props: AddEditTimelineProps) {
  const {
    setIsActive,
    setIsVisible,
    currentTimeline,
    handleSubmit,
    register,
    reset,
    errors,
    currentVenture,
    ...rest
  } = props;
  const history = useHistory();
  const { timelineSlug } = useParams<ParamsType>();
  const token = useGetToken();

  const isEdit = timelineSlug ? "isEdit" : undefined;

  const { mutate: createTimeline } = useCreateTimeline();
  const { mutate: updateTimeline } = useUpdateTimeline();

  const handle = currentVenture?.name?.toLowerCase().replace(/\s/g, "");

  const handleCreate = (data: any) => {
    if (!token || !data.timelineName || !data.timelineDescription) {
      return;
    }
    const newTimeline: ICreateTimeline = {
      name: data.timelineName,
      desc: data.timelineDescription,
      ventureId: currentVenture?.id,
      token: token,
    };

    const timelineUpdate: IUpdateTimeline = {
      id: currentTimeline?.id,
      name: data.timelineName,
      desc: data.timelineDescription,
      ventureId: currentVenture?.id,
      token: token,
    };

    isEdit ? updateTimeline(timelineUpdate) : createTimeline(newTimeline);
    reset();
    history.push(`/${handle}/feed`);
  };

  const handleDelete = () => {
    history.push(`/${handle}/${timelineSlug}/delete`);
  };

  return (
    <PlasmicAddEditTimeline
      variantState={isEdit}
      settings={{
        onSubmit: handleSubmit(handleCreate),
      }}
      name={{
        register: register({ required: true }),
        name: "timelineName",
        defaultValue: currentTimeline?.name ?? "",
        errorMessage: errors.name && timelineNameError,
      }}
      description={{
        register: register({ required: true }),
        name: "timelineDescription",
        defaultValue: currentTimeline?.desc ?? "",
      }}
      buttonSetEdit={{
        handleCancel: () => history.goBack(),
        handleDelete: () => handleDelete(),
      }}
      visibility={{}}
      {...rest}
    />
  );
}

export default AddEditTimeline;
