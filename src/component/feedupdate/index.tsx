// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React from "react";
import {
  PlasmicFeedUpdate,
  DefaultFeedUpdateProps,
} from "component/plasmic/shared/PlasmicFeedUpdate";
import ContentPost from "component/contentpost";
import { ISearchUpdate, ISearchAllUpdate } from "module/interface/update";
import { ITimeline } from "module/interface/timeline";
import { useTimelineUpdates, useAllUpdates } from "module/hook/update";
import { useAllUser } from "module/hook/user";
import { IUpdate } from "module/interface/update";
import { IVenture } from "module/interface/venture";
import { ISearchAllUser, IUser } from "module/interface/user";
import { useGetToken } from "module/auth";
import { useParams } from "react-router-dom";

interface FeedUpdateProps extends DefaultFeedUpdateProps {
  currentTimeline: ITimeline;
  timelines: ITimeline[];
  currentVenture: IVenture;
  user: IUser;
  setIsVisible: any;
  setPost: any;
}

function FeedUpdate(props: FeedUpdateProps) {
  const {
    currentTimeline,
    timelines,
    setIsVisible,
    setPost,
    currentVenture,
    user,
    ...rest
  } = props;
  const { timelineSlug } = useParams();
  const token = useGetToken();
  const ventureId = currentVenture?.id ?? "";

  const timelineUpdatesSearch: ISearchUpdate = {
    ventureId,
    timelineId: currentTimeline?.id ?? "",
    token,
  };

  const allUpdatesSearch: ISearchAllUpdate = {
    ventureId,
    timelines,
    token,
  };

  const { data: timelineUpdates } = useTimelineUpdates(timelineUpdatesSearch);

  let updates = timelineUpdates ?? [];

  const { data: allUpdates, isSuccess: updateSuccess } = useAllUpdates(
    allUpdatesSearch
  );

  if (updateSuccess) {
    //deduplicate updates for home
    const homeUpdates: IUpdate[] = Array.from(
      new Set(
        allUpdates.map((update: IUpdate) =>
          Math.round(Number(update.id) / 1000000000)
        )
      )
    ).map((id) => {
      return allUpdates.find(
        (update: IUpdate) => Math.round(Number(update.id) / 1000000000) === id
      );
    });

    // return updates or updates of current timeline.
    updates = timelineSlug ? timelineUpdates ?? [] : homeUpdates ?? [];
  }

  const subjectIds = updates.map((update: IUpdate) => update.userId);

  const userAllSearch: ISearchAllUser = {
    subjectIds,
    token,
  };

  const { data: userData, isSuccess: userSuccess } = useAllUser(userAllSearch);

  return (
    <PlasmicFeedUpdate
      {...rest}
      actionBar={{
        ventureId,
        currentTimeline,
        user,
      }}
      feedContainer={{
        children: updates.map((update: IUpdate) => (
          <ContentPost
            title={update.title ?? ""}
            description={update.text ?? ""}
            key={update.id}
            id={update.id}
            timelineId={update.timelineId}
            userName={
              userSuccess
                ? userData?.filter(
                    (user: IUser) => user.id === update.userId
                  )[0].name
                : ""
            }
            user={
              userSuccess
                ? userData?.filter(
                    (user: IUser) => user.id === update.userId
                  )[0]
                : { name: "" }
            }
            date={update.date}
            setIsVisible={setIsVisible}
            setPost={() =>
              setPost({
                ...update,
                user: userSuccess
                  ? userData?.filter(
                      (user: IUser) => user.id === update.userId
                    )[0]
                  : { name: "" },
                userName: userSuccess
                  ? userData?.filter(
                      (user: IUser) => user.id === update.userId
                    )[0].name
                  : "",
              })
            }
            currentVenture={currentVenture}
          />
        )),
      }}
    />
  );
}

export default FeedUpdate;
