// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React from "react";
import {
  PlasmicFeedUpdate,
  DefaultFeedUpdateProps,
} from "component/plasmic/shared/PlasmicFeedUpdate";
import { Node } from "slate";
import { useTimelines } from "module/hook/timeline";
import { ITimeline, ITimelineQuery } from "module/interface/timeline";
import { IUpdate } from "module/interface/update";

interface FeedUpdateProps extends DefaultFeedUpdateProps {
  text: Node[];
  id: string;
  organizationName: string;
  timelineId: string;
  userName: string;
  date: string;
  allUpdates: IUpdate[];
  setCurrentTimeline: React.Dispatch<
    React.SetStateAction<ITimeline | undefined>
  >;
  isVisible: any;
  setIsVisible: any;
}

function FeedUpdate(props: FeedUpdateProps) {
  const {
    text,
    id,
    timelineId,
    organizationName,
    userName,
    date,
    allUpdates,
    setCurrentTimeline,
    isVisible,
    setIsVisible,
  } = props;

  const token = "";

  const timelineSearch: ITimelineQuery = {
    userId: userName,
    organizationId: organizationName,
    ventureId: organizationName,
    token,
  };

  const { data: timelinesData } = useTimelines(timelineSearch);
  const timelines = timelinesData ?? [];

  const updates = allUpdates ?? [];

  const updateTimelines = updates
    .filter(
      (update: IUpdate) =>
        Math.round(Number(update.id) / 1000000000) ===
        Math.round(Number(id) / 1000000000)
    )
    .map((update) => {
      const updateTimelines = timelines.filter(
        (timeline: ITimeline) => timeline.id === update.timelineId
      );

      return updateTimelines;
    })
    .flat();

  return (
    <PlasmicFeedUpdate
      updateContent={{
        text: text,
        id: id,
        timelineId: timelineId,
        organizationName: organizationName,
        userName: userName,
        updateTimelines: updateTimelines,
        date: date,
        setCurrentTimeline: setCurrentTimeline,
        isVisible,
        setIsVisible,
      }}
    />
  );
}

export default FeedUpdate;
