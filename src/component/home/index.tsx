// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useState } from "react";
import {
  PlasmicHome,
  DefaultHomeProps,
} from "component/plasmic/home/PlasmicHome";
import Update from "component/update";
import {
  options,
  initialValueEmpty,
} from "component/editor/config/initialValues";
import Searcher from "@venturemark/numnum";
import { Node } from "slate";
import { format } from "date-fns";
import { serialize } from "module/serialize";
import { get } from "module/store";
import * as linechart from "component/linechart";

interface HomeProps extends DefaultHomeProps {}

interface UpdateType {
  id: string;
  text: Node[];
  numberValue: number;
}

const defaultUpdates = [
  {
    id: "now",
    numberValue: 23,
    text: [
      {
        children: [
          {
            type: options.p.type,
            children: [
              {
                text: "Be Better Tomorrow",
              },
            ],
          },
        ],
      },
    ],
  },
];

const defaultData = [
  {
    date: "January 1, 2019",
    cac: 50,
  },
  {
    date: "February 2, 2019",
    cac: 55,
  },
  {
    date: "March 3, 2019",
    cac: 40,
  },
  {
    date: "April 1, 2019",
    cac: 35,
  },
  {
    date: "May 10, 2019",
    cac: 39,
  },
  {
    date: "June 1, 2019",
    cac: 40,
  },
  {
    date: "July 1, 2019",
    cac: 50,
  },
];

const dataKey = "cac";
const name = "Customer Acquisition Cost";

type HasContent = undefined | "hasContent";
type ErrorMessage = undefined | string;
type NumberValue = undefined | number;

export function Component(props: HomeProps) {
  const [updates, setUpdates] = useState<UpdateType[]>(defaultUpdates);
  const [metrics, setMetrics] = useState<linechart.DataItem[]>(defaultData);

  const store = get("composeEditor.content") ?? "";
  const initialValue = store !== "" ? JSON.parse(store) : initialValueEmpty;
  const [value, setValue] = useState<Node[]>(initialValue);
  const [errorMessage, setErrorMessage] = useState<ErrorMessage>(undefined);

  const hasContentDefault =
    serialize(value) === "" || serialize(value) === undefined
      ? undefined
      : "hasContent";
  const [hasContent, setHasContent] = useState<HasContent>(hasContentDefault);
  const defaultNumber = Searcher.Search(serialize(value))
    ? Searcher.Search(serialize(value))[0]
    : undefined;
  const [numberValue, setNumberValue] = useState<NumberValue>(defaultNumber);
  const [progress, setProgress] = React.useState<number>(
    serialize(value).length
  );

  const createUpdate = () => {
    if (!hasContent) {
      setErrorMessage("Please enter some text");
      return;
    }

    if (!numberValue) {
      setErrorMessage("Please enter a number");
      return;
    }

    if (serialize(value).length > 241) {
      setErrorMessage(
        `Your update is ${
          serialize(value).length
        } characters. The limit is 240 characters`
      );
      return;
    }

    const id = new Date();

    const update = {
      text: value,
      numberValue: numberValue,
      id: id.toString(),
    };
    setUpdates([update, ...updates]);

    const metric = {
      date: format(new Date(), "PP"),
      cac: numberValue,
    };
    setMetrics([...metrics, metric]);

    //reset compose state
    localStorage.setItem(
      "composeEditor.content",
      JSON.stringify(initialValueEmpty)
    );
    setValue(initialValueEmpty);
    setErrorMessage(undefined);
    setNumberValue(undefined);
    setHasContent(undefined);
    setProgress(0);
  };

  return (
    <PlasmicHome
      actionBar={{
        hasContent: hasContent,
        setHasContent: setHasContent,
        numberValue: numberValue,
        setNumberValue: setNumberValue,
        value: value,
        setValue: setValue,
        errorMessage: errorMessage,
        setErrorMessage: setErrorMessage,
        progress: progress,
        setProgress: setProgress,
      }}
      updatesContainer={{
        children: updates.map((update: any) => (
          <Update
            text={update.text}
            key={update.id}
            dataKey={dataKey}
            data={metrics}
            name={name}
          />
        )),
      }}
      actionsColumn={{
        hasContent: hasContent,
        numberValue: numberValue,
        createUpdate: createUpdate,
      }}
    />
  );
}
