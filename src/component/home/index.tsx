// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useState } from "react";
import {
  PlasmicHome,
  DefaultHomeProps,
} from "component/plasmic/home/PlasmicHome";
import Update from "component/update";
import {
  options,
  initialValueEmpty,
} from "component/editor/config/initialValues";
import Searcher from "@venturemark/numnum";
import { Node } from "slate";
import { format } from "date-fns";
import { serialize } from "module/serialize";
import { get } from "module/store";
import * as linechart from "component/linechart";
import { useEditor } from "component/editor/compose";
import { UpdateType } from "component/update";

interface HomeProps extends DefaultHomeProps {}

export interface TimelineType {
  name: string;
  dataKey: string;
  id: string;
  date: string;
  isCurrent: boolean;
  updates: UpdateType[];
  data: linechart.DataItem[];
}

const defaultText: Node[] = [
  {
    children: [
      {
        type: options.p.type,
        children: [
          {
            text: "Be Better Tomorrow",
          },
        ],
      },
    ],
  },
];

const defaultUpdates: UpdateType[] = [
  {
    id: "now",
    numberValue: 23,
    flipped: false,
    text: defaultText,
  },
];

const defaultData = [
  {
    date: "January 1, 2019",
    cac: 50,
  },
  {
    date: "February 2, 2019",
    cac: 55,
  },
  {
    date: "March 3, 2019",
    cac: 40,
  },
  {
    date: "April 1, 2019",
    cac: 35,
  },
  {
    date: "May 10, 2019",
    cac: 39,
  },
  {
    date: "June 1, 2019",
    cac: 40,
  },
  {
    date: "July 1, 2019",
    cac: 50,
  },
];

const defaultTimelines: TimelineType[] = [
  {
    name: "Active Users",
    dataKey: "cac",
    id: "now",
    date: "now",
    updates: defaultUpdates,
    data: defaultData,
    isCurrent: false,
  },
  {
    name: "Features Shipped",
    dataKey: "cac",
    id: "now",
    date: "now",
    updates: defaultUpdates,
    data: defaultData,
    isCurrent: true,
  },
  {
    name: "Milestones",
    dataKey: "cac",
    id: "now",
    date: "now",
    updates: defaultUpdates,
    data: defaultData,
    isCurrent: false,
  },
  {
    name: "Revenue",
    dataKey: "cac",
    id: "now",
    date: "now",
    updates: defaultUpdates,
    data: defaultData,
    isCurrent: false,
  },
];

// const dataKey = "cac";
// const name = "Customer Acquisition Cost";

const defaultTimeline: TimelineType =
  defaultTimelines.filter((timeline) => timeline.isCurrent === true)[0] ??
  defaultUpdates;

export function Component(props: HomeProps) {
  const [timelines, setTimelines] = useState<TimelineType[]>(defaultTimelines);
  const [currentTimeline, setCurrentTimeline] = useState<TimelineType>(
    defaultTimeline
  );

  const [updates, setUpdates] = useState<UpdateType[]>(currentTimeline.updates);
  // const [metrics, setMetrics] = useState<linechart.DataItem[]>(currentTimeline.data);
  const [hideSidebar, setHideSidebar] = useState(true);

  const store = get("composeEditor.content") ?? "";
  const initialValue = store !== "" ? JSON.parse(store) : initialValueEmpty;
  const hasContentDefault =
    serialize(initialValue) === "" || serialize(initialValue) === undefined
      ? undefined
      : "hasContent";
  const defaultNumber = Searcher.Search(serialize(initialValue))
    ? Searcher.Search(serialize(initialValue))[0]
    : undefined;
  const defaultProgress = serialize(initialValue).length;

  const { editorShape, setEditorShape } = useEditor({
    value: initialValue,
    hasContent: hasContentDefault,
    numberValue: defaultNumber,
    progress: defaultProgress,
  });

  const createUpdate = () => {
    if (!editorShape.hasContent) {
      console.log("content text");
      const error = "Please enter some text";
      setEditorShape({ ...editorShape, error });
      return;
    }

    if (!editorShape.numberValue) {
      const error = "Please enter a number";
      setEditorShape({ ...editorShape, error });
      return;
    }

    if (serialize(editorShape.value).length > 241) {
      const error = `Your update is ${
        serialize(editorShape.value).length
      } characters. The limit is 240 characters`;
      setEditorShape({ ...editorShape, error });
      return;
    }

    const id = new Date();
    const update = {
      text: editorShape.value,
      numberValue: editorShape.numberValue,
      id: id.toString(),
      flipped: false,
    };
    // setUpdates([update, ...updates]);

    const metric = {
      date: format(new Date(), "PP"),
      cac: editorShape.numberValue,
    };
    // setMetrics([...metrics, metric]);

    const timelinesUpdate = timelines.map((timeline) => {
      let updatedUpdates = currentTimeline.updates;
      let data = currentTimeline.data;
      if (timeline.isCurrent) {
        // const updatedUpdates = [update, ...currentTimeline.updates];
        updatedUpdates = currentTimeline?.updates?.concat(update);
        // const data = [...currentTimeline.metrics, metric];
        data = currentTimeline?.data?.concat(metric);
      }
      return { ...timeline, updates: updatedUpdates, data: data };
    });
    setTimelines(timelinesUpdate as TimelineType[]);

    //reset store
    localStorage.setItem(
      "composeEditor.content",
      JSON.stringify(initialValueEmpty)
    );
    //reset editor
    const resetEditor = {
      value: initialValueEmpty,
      string: "",
      hasContent: undefined,
      numberValue: undefined,
      error: undefined,
      progress: 0,
    };
    setEditorShape(resetEditor);
  };

  console.log("currentTimeline.updates", currentTimeline.updates);

  return (
    <PlasmicHome
      sidebarHidden={hideSidebar}
      homeButton={{
        "aria-label": "Toggle sidebar",
        onPress: () => {
          setHideSidebar(!hideSidebar);
        },
      }}
      addButton={{
        "aria-label": "Toggle sidebar",
        onPress: () => setHideSidebar(!hideSidebar),
      }}
      sidebar={{
        timelines: timelines,
        setHideSidebar: setHideSidebar,
        setTimelines: setTimelines,
        hideSidebar: hideSidebar,
        currentTimeline: currentTimeline,
        setCurrentTimeline: setCurrentTimeline,
      }}
      actionBar={{
        errorMessage: editorShape.error,
        progress: editorShape.progress,
        editorShape: editorShape,
        setEditorShape: setEditorShape,
      }}
      updatesContainer={{
        children: currentTimeline?.updates?.map((update) => (
          <Update
            text={update.text}
            key={update.id}
            id={update.id}
            dataKey={currentTimeline.dataKey}
            data={currentTimeline.data}
            name={currentTimeline.name}
            flipped={update.flipped}
            updates={currentTimeline.updates}
            setUpdates={setUpdates}
          />
        )),
      }}
      actionsColumn={{
        hasContent: editorShape.hasContent,
        numberValue: editorShape.numberValue,
        createUpdate: createUpdate,
      }}
    />
  );
}
