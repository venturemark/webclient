// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useState, useEffect } from "react";
import {
  PlasmicHome,
  DefaultHomeProps,
} from "component/plasmic/home/PlasmicHome";
import Update from "component/update";
import { initialValueEmpty } from "component/editor/config/initialValues";
import Searcher from "@venturemark/numnum";
import { format } from "date-fns";
import { serialize } from "module/serialize";
import { get } from "module/store";
import { useEditor } from "component/editor/compose";
import { IUpdate } from "module/interface/update";
import { ITimeline } from "module/interface/timeline";
import { IMetric } from "module/interface/metric";
import * as api from "module/api";

const defaultTimeline: ITimeline = {
  name: "",
  timelineId: "",
  userId: "",
  dataKey: "",
  isCurrent: false,
  updates: [],
  data: [],
};

interface HomeProps extends DefaultHomeProps {}

export function Component(props: HomeProps) {
  const [timelines, setTimelines] = useState<ITimeline[]>([]);
  const [currentTimeline, setCurrentTimeline] = useState<ITimeline>(
    defaultTimeline
  );

  const [refresh, setRefresh] = useState(false);

  const [hideSidebar, setHideSidebar] = useState(true);
  const [addTimelineFocused, setAddTimelineFocused] = useState(false);

  const [updates, setUpdates] = useState<IUpdate[]>([]);

  const store = get("composeEditor.content") ?? "";
  const initialValue = store !== "" ? JSON.parse(store) : initialValueEmpty;
  const hasContentDefault =
    serialize(initialValue) === "" || serialize(initialValue) === undefined
      ? undefined
      : "hasContent";
  const defaultNumber = Searcher.Search(serialize(initialValue)) ?? 0;
  const defaultProgress = serialize(initialValue).length;

  const { editorShape, setEditorShape } = useEditor({
    value: initialValue,
    hasContent: hasContentDefault,
    numberValue: defaultNumber[0],
    progress: defaultProgress,
  });

  const mergeMetricsAndUpdates = (arr1: any, arr2: any) => {
    // console.log(arr1, arr2);
    return arr1.map((item: any, i: any) => {
      if (item.updateId === arr2[i].updateId) {
        //merging two objects
        console.log(item, arr2[i]);
        return { ...item, ...arr2[i] };
      }
    });
  };

  useEffect(() => {
    const fetchData = async () => {
      const timelinesResponse: ITimeline[] = await api.API.Timeline.Search(
        "user.venturemark.co/id",
        "usr-al9qy"
      );

      const metricsResponse: any = await api.API.Metric.Search(
        "timeline.venturemark.co/id",
        "1609448698",
        "user.venturemark.co/id",
        "usr-al9qy"
      );
      const updatesResponse: any = await api.API.Update.Search(
        "timeline.venturemark.co/id",
        "1609448698",
        "user.venturemark.co/id",
        "usr-al9qy"
      );

      let concatAndDeDuplicateObjects = (p: any, ...arrs: any) =>
        []
          .concat(...arrs)
          .reduce(
            (a, b) => (!a.filter((c) => b[p] === c[p]).length ? [...a, b] : a),
            []
          );

      const updates = concatAndDeDuplicateObjects(
        "updateId",
        updatesResponse,
        metricsResponse
      );
      // const currentTimelineWithUpdates = timelinesResponse.map((timeline) => {
      //   if (timeline.timelineId === updatesResponse[0].timelineId) {
      //     return { ...timeline, updates };
      //   }
      // });

      console.log(updates);
      console.log(metricsResponse);
      console.log(updatesResponse);

      setTimelines(timelinesResponse);
      setCurrentTimeline(timelinesResponse[0]);
      // setUpdates(updates);
    };

    fetchData();
  }, [refresh]);

  // useEffect(() => {
  //   setUpdates(defaultUpdates);
  // }, [currentTimeline, timelinesData]);

  const createUpdate = () => {
    if (!editorShape.hasContent) {
      console.log("content text");
      const error = "Please enter some text";
      setEditorShape({ ...editorShape, error });
      return;
    }

    if (!editorShape.numberValue) {
      const error = "Please enter a number";
      setEditorShape({ ...editorShape, error });
      return;
    }

    if (serialize(editorShape.value).length > 241) {
      const error = `Your update is ${
        serialize(editorShape.value).length
      } characters. The limit is 240 characters`;
      setEditorShape({ ...editorShape, error });
      return;
    }

    const id = new Date().toString();
    const update: IUpdate = {
      text: editorShape.value,
      numberValue: editorShape.numberValue,
      updateId: id,
      userId: currentTimeline.userId,
      timelineId: currentTimeline.timelineId,
      isFlipped: false,
      isContext: false,
    };
    setUpdates([update, ...updates]);

    const metric: IMetric = {
      date: format(new Date(), "PP"),
      [currentTimeline.name]: editorShape.numberValue,
      metricId: id,
      updateId: id,
      timelineId: currentTimeline.timelineId,
      userId: currentTimeline.userId,
    };

    async function createMetricUpdate() {
      let response = await api.API.MetricUpdate.Create(
        JSON.stringify(editorShape.value),
        editorShape.numberValue,
        "timeline.venturemark.co/id",
        currentTimeline.timelineId,
        "user.venturemark.co/id",
        currentTimeline.userId
      );

      if (response.metricId & response.updateId) {
        setRefresh(!refresh);
      }
    }

    createMetricUpdate();

    const timelinesUpdate = timelines.map((timeline) => {
      let updatedUpdates = currentTimeline.updates;
      let data = currentTimeline.data;
      if (timeline.isCurrent) {
        updatedUpdates = [update].concat(currentTimeline?.updates);
        data = currentTimeline?.data?.concat(metric);

        return { ...timeline, updates: updatedUpdates, data: data };
      } else {
        return timeline;
      }
    });
    setTimelines(timelinesUpdate as ITimeline[]);

    //reset store
    localStorage.setItem(
      "composeEditor.content",
      JSON.stringify(initialValueEmpty)
    );
    //reset editor
    const resetEditor = {
      value: initialValueEmpty,
      string: "",
      hasContent: undefined,
      numberValue: 0,
      error: undefined,
      progress: 0,
    };
    setEditorShape(resetEditor);
  };

  return (
    <PlasmicHome
      sidebarHidden={hideSidebar}
      closeSidebar={{
        "aria-label": "Toggle Sidebar",
        onPress: () => {
          setHideSidebar(!hideSidebar);
          setAddTimelineFocused(false);
        },
      }}
      openSidebar={{
        "aria-label": "Toggle Sidebar",
        onPress: () => {
          setHideSidebar(!hideSidebar);
          setAddTimelineFocused(false);
        },
      }}
      addButton={{
        "aria-label": "Add Timeline",
        onPress: () => {
          setHideSidebar(!hideSidebar);
          setAddTimelineFocused(true);
        },
      }}
      sidebar={{
        timelines: timelines,
        setTimelines: setTimelines,
        addTimelineFocused: addTimelineFocused,
        refresh: refresh,
        setRefresh: setRefresh,
      }}
      actionBar={{
        errorMessage: editorShape.error,
        progress: editorShape.progress,
        editorShape: editorShape,
        setEditorShape: setEditorShape,
      }}
      updatesContainer={{
        children: updates.map((update) => (
          <Update
            text={update.text}
            key={update.updateId}
            updateId={update.updateId}
            dataKey={currentTimeline.dataKey}
            data={currentTimeline.data}
            name={currentTimeline.name}
            isFlipped={update.isFlipped}
            isContext={update.isContext}
            updates={updates}
            setUpdates={setUpdates}
          />
        )),
      }}
      actionsColumn={{
        hasContent: editorShape.hasContent,
        numberValue: editorShape.numberValue,
        createUpdate: createUpdate,
      }}
    />
  );
}
