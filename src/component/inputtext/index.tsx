// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import { PlasmicInputText } from "component/plasmic/shared/PlasmicInputText";
import {
  PlumeTextFieldProps,
  PlumeTextFieldRef,
  useTextField,
} from "@plasmicapp/plume";

interface TextFieldProps extends PlumeTextFieldProps {
  defaultValue?: any;
  register?: any;
  name: string;
  label: string;
  message?: string;
  children?: string;
  hasTextHelper: boolean;
}

function TextField_(props: TextFieldProps, ref: PlumeTextFieldRef) {
  const { message, register } = props;
  const { plumeProps } = useTextField(
    PlasmicInputText,
    props,
    {
      isDisabledVariant: ["isDisabled", "isDisabled"],
      hasLabelVariant: ["hasLabel", "hasLabel"],

      labelSlot: "label",

      root: "root",
      textbox: "input",
      textboxContainer: "textboxContainer",
      labelContainer: "labelContainer",
    },
    register
  );
  // console.log("plume", plumeProps, name, message);
  return (
    <PlasmicInputText
      {...plumeProps}
      errorMessage={{
        message: message,
      }}
      // children={children}
      // error={message ? "error" : undefined}
      // args={{
      //   label: plumeProps.args.label,
      //   children: plumeProps.args.children,
      // }}
      // overrides={{
      //   input: {
      //     ref: register,
      //     name: name,
      //     defaultValue: defaultValue,
      //     "aria-label": props["aria-label"],
      //   },
      //   errorMessage: {
      //     message: message,
      //   },
      // }}
      variants={{
        error: message ? "error" : undefined,
        hasLabel: plumeProps.variants.hasLabel,
        hasTextHelper: plumeProps.variants.hasTextHelper,
      }}
    />
  );
}

const TextField = React.forwardRef(TextField_);
export default TextField;
