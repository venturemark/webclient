// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React from "react";
import {
  PlasmicModal,
  DefaultModalProps,
} from "component/plasmic/shared/PlasmicModal";
import { useAuth0 } from "@auth0/auth0-react";
import { useForm } from "react-hook-form";
import { useHistory } from "react-router-dom";
import { ICreateUser, ISearchUser, IUpdateUser } from "module/interface/user";
import { nameError, roleError } from "module/errors";
import { useCreateUser, useUpdateUser, useUser } from "module/hook/user";
import { useGetToken } from "module/auth";

interface ModalProps extends DefaultModalProps {
  isVisible?: any;
  setIsVisible?: any;
}

function Modal(props: ModalProps) {
  const { isVisible, setIsVisible, ...rest } = props;
  const history = useHistory();
  const token = useGetToken();
  const { user: authUser } = useAuth0();

  const { handleSubmit, register, errors } = useForm({
    mode: "onChange",
  });

  const userSearch: ISearchUser = {
    token,
  };
  const { data: userData } = useUser(userSearch);
  const user = userData ?? authUser;

  const { mutate: saveUser } = useCreateUser();
  const { mutate: updateUser } = useUpdateUser();

  const handleSave = (data: any) => {
    if (!data.name) {
      return;
    }

    const createUser: ICreateUser = {
      name: data.name,
      title: data.title,
      token: token,
    };
    const userUpdate: IUpdateUser = {
      id: user?.id,
      name: data.name,
      title: data.title,
      token: token,
    };

    user?.id ? saveUser(createUser) : updateUser(userUpdate);
    history.push("/new");
  };
  return (
    <PlasmicModal
      {...rest}
      editProfile={{
        onSubmit: handleSubmit(handleSave),
      }}
      nameField={{
        name: "name",
        defaultValue: user?.name ?? "",
        register: register({ required: true }),
        errorMessage: errors.name && nameError,
      }}
      jobField={{
        name: "title",
        defaultValue: user?.title ?? "",
        register: register({ required: true }),
        errorMessage: errors.role && roleError,
      }}
      save={{
        type: "submit",
        onClick: () => setIsVisible(undefined),
      }}
      cancel={{
        onClick: () => setIsVisible(undefined),
      }}
      close={{
        onClick: () => setIsVisible(undefined),
      }}
    />
  );
}

export default Modal;
