// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useContext } from "react";
import {
  PlasmicModal,
  DefaultModalProps,
} from "component/plasmic/shared/PlasmicModal";
import { useForm } from "react-hook-form";
import { useNavigate } from "react-router-dom";
import { IUpdateUser } from "module/interface/user";
import { nameError, roleError } from "module/errors";
import { useUpdateUser } from "module/hook/user";
import { useGetToken } from "module/auth";
import { UserContext } from "component/app";
import { useQuery } from "module/helpers";
import { IDeleteVenture } from "module/interface/venture";
import { useDeleteVenture } from "module/hook/venture";

type ModalType = "deleteTimeline" | "deleteVenture" | "editProfile" | undefined;

interface ModalProps extends DefaultModalProps {
  isVisible?: any;
  setIsVisible?: any;
  modalType?: ModalType;
}

function Modal(props: ModalProps) {
  const { isVisible, setIsVisible, modalType, ...rest } = props;
  const navigate = useNavigate();
  const token = useGetToken();
  const user = useContext(UserContext);
  const query = useQuery();
  const ventureId = query.get("ventureId") ?? "";
  const timelineId = query.get("timelineId") ?? "";

  const { handleSubmit, register, errors } = useForm({
    mode: "onChange",
  });

  const { mutate: updateUser } = useUpdateUser();
  const { mutate: deleteVenture } = useDeleteVenture();

  const handleSave = (data: any) => {
    if (!data.name) {
      return;
    }

    const userUpdate: IUpdateUser = {
      id: user?.id ?? "",
      name: data.name,
      title: data.title,
      successUrl: "/",
      token: token,
    };

    updateUser(userUpdate);
  };

  const deleteTimeline = () => {
    console.log(timelineId);
  };

  const handleDeleteVenture = () => {
    console.log("here is the venture being deleted.");
    console.log(ventureId);
    const ventureDelete: IDeleteVenture = {
      id: ventureId,
      successUrl: `/`,
      token: token,
    };

    deleteVenture(ventureDelete);
  };

  return (
    <PlasmicModal
      {...rest}
      modalType={modalType}
      editProfile={{
        onSubmit: handleSubmit(handleSave),
      }}
      photoAvatar={{
        user,
      }}
      nameField={{
        name: "name",
        defaultValue: user?.name ?? "",
        register: register({ required: true }),
        errorMessage: errors.name && nameError,
      }}
      jobField={{
        name: "title",
        defaultValue: user?.title ?? "",
        register: register({ required: true }),
        errorMessage: errors.role && roleError,
      }}
      deleteTimeline={
        {
          // onClick: () => deleteTimeline(),
        }
      }
      deleteVenture={{
        onClick: () => handleDeleteVenture(),
        type: "button",
      }}
      saveUser={{
        type: "submit",
      }}
      cancelEdit={{
        onClick: () => navigate("../settings"),
      }}
      cancelTimeline={
        {
          // onClick: () => navigate("../settings"),
        }
      }
      cancelVenture={{
        onClick: () => navigate("../settings"),
      }}
      close={{
        onClick: () => navigate("../settings"),
      }}
    />
  );
}

export default Modal;
