// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useState, useEffect } from "react";
import {
  PlasmicHome,
  DefaultHomeProps,
} from "component/plasmic/shared/PlasmicHome";
import { withAuthenticationRequired } from "@auth0/auth0-react";
import { ITimeline, ITimelineQuery } from "module/interface/timeline";
import { useTimelines } from "module/hook/timeline";
import { IUpdate, IUpdateQuery } from "module/interface/update";
import { useTimelineUpdates, useAllUpdates } from "module/hook/update";
import { getUser, getVenture } from "module/store";
import { useParams, useRouteMatch } from "react-router-dom";
import { useAuth0 } from "@auth0/auth0-react";

interface ParamTypes {
  ventureSlug: string;
  timelineSlug: string;
}

type VariantType = "isEmpty" | "isTimeline" | "isVenture" | undefined;
type IsActive = "feed" | "settings" | "members" | undefined;

interface HomeProps extends DefaultHomeProps {}

export function Home(props: HomeProps) {
  const user = getUser();
  const venture = getVenture();
  const { url } = useRouteMatch<IsActive>();
  const { getAccessTokenSilently } = useAuth0();
  const [token, setToken] = useState<string>("");
  const { timelineSlug, ventureSlug } = useParams<ParamTypes>();
  const [currentTimeline, setCurrentTimeline] = useState<
    ITimeline | undefined
  >();

  // const variant = timelineSlug
  //   ? "isTimeline"
  //   : venture && !timelineSlug
  //   ? "isTimeline"
  //   : venture
  //   ? "isVenture"
  //   : "isEmpty";
  const ventureId = venture?.url ?? "";
  const userId = user?.id ?? "";
  const timelineSearch: ITimelineQuery = {
    userId,
    ventureId,
    token,
  };
  const { data: timelinesData, isSuccess: timelineSuccess } = useTimelines(
    timelineSearch
  );

  const variant =
    venture && !timelineSlug
      ? "isTimeline"
      : !venture && !ventureSlug
      ? "isEmpty"
      : venture
      ? "isVenture"
      : "isVenture";

  const active = url.split("/")[3]
    ? (url.split("/")[3] as IsActive)
    : timelinesData?.length > 0
    ? (url.split("/")[2] as IsActive)
    : "settings";

  // local hooks shared with page-level elements
  const [isVisible, setIsVisible] = useState<
    "postDetails" | "mobileSidebar" | undefined
  >(undefined);
  const [isHome, setIsHome] = useState(true);
  const [variantType, setVariantType] = useState<VariantType>(variant);
  const [isActive, setIsActive] = useState<IsActive>(active);

  const timelineId = currentTimeline?.id ?? undefined;
  //currently hardcoding until we have a plan for org / user storage

  //hook / fetch stuff:

  const timelineUpdatesSearch: IUpdateQuery = {
    ventureId,
    timelineId,
    userId,
    token,
  };
  const allUpdatesSearch: IUpdateQuery = {
    ventureId,
    timelineId,
    userId,
    timelines: timelinesData,
    token,
  };
  const { data: allUpdates, isSuccess: updateSuccess } = useAllUpdates(
    allUpdatesSearch
  );
  const { data: timelineUpdates } = useTimelineUpdates(timelineUpdatesSearch);
  let updates = [];

  if (timelineSuccess && updateSuccess) {
    //deduplicate updates for home
    const homeUpdates: IUpdate[] = Array.from(
      new Set(
        allUpdates.map((update: IUpdate) =>
          Math.round(Number(update.id) / 1000000000)
        )
      )
    ).map((id) => {
      return allUpdates.find(
        (update: IUpdate) => Math.round(Number(update.id) / 1000000000) === id
      );
    });

    // return updates or updates of current timeline.
    updates = isHome ? homeUpdates ?? [] : timelineUpdates ?? [];
  }

  useEffect(() => {
    setVariantType(variant);
    // !venture && setVariantType("isEmpty");
    venture && variantType === "isEmpty" && setVariantType("isVenture");
    if (active === "settings" && !ventureSlug) {
      setIsActive("feed");
    } else {
      setIsActive(active);
    }

    //auth
    const getToken = async () => {
      try {
        const token = await getAccessTokenSilently();
        setToken(token);
      } catch (error) {
        console.log(error.error);
      }
    };
    if (token === "") {
      getToken();
    }
  }, [
    venture,
    variantType,
    variant,
    active,
    ventureSlug,
    getAccessTokenSilently,
    token,
  ]);

  console.log(updates);

  return (
    <>
      <PlasmicHome
        isVisible={isVisible}
        main={{
          currentTimeline,
          variantType: variantType,
          isActive: isActive,
          setIsActive,
          setVariantType,
          isVisible,
          setIsVisible,
        }}
        sidebar={{
          isHome: isHome,
          setIsHome: setIsHome,
          currentTimeline: currentTimeline,
          setCurrentTimeline: setCurrentTimeline,
          userId: userId,
          ventureId: ventureId,
        }}
        postDetails={{
          setIsVisible,
        }}

        // actionBar={{
        //   organizationId: organizationId,
        //   currentTimeline: currentTimeline,
        //   userId: userId,
        // }}
        // mainHeader={{
        //   timelineName: currentTimeline?.name ?? "",
        //   timelineDescription: currentTimeline?.desc ?? "edit description...",
        // }}
        // updatesContainer={{
        //   children: updates.map((update: IUpdate) => (
        //     <FeedUpdate
        //       text={update.text}
        //       key={update.id}
        //       id={update.id}
        //       organizationName={update.organizationId}
        //       timelineId={update.timelineId}
        //       userName={update.userId}
        //       date={update.date}
        //       allUpdates={allUpdates}
        //       setCurrentTimeline={setCurrentTimeline}
        //     />
        //   )),
        // }}
      />
    </>
  );
}

export default withAuthenticationRequired(Home);
