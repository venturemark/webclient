// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rr3cgzELv8j1fSZjvVMfyx
// Component: Ii0bQ3L3sO
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: MkyvVOg5Ik/component
import Sidebar from "../../sidebar/index"; // plasmic-import: FZWTu4L61t/component
import MainHeader from "../../MainHeader"; // plasmic-import: LRwT0lHdps/component
import ActionBar from "../../actionbar/index"; // plasmic-import: eUnRsS9UXR/component
import Update from "../../update/index"; // plasmic-import: Fs8bTUrvZrvfhCr/component
import ModalAlt from "../../ModalAlt"; // plasmic-import: Rd6ctyxKvRM/component

import { useScreenVariants } from "../shared/PlasmicGlobalVariant__Screen"; // plasmic-import: szbTUtTUfDW81Pi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_home.module.css"; // plasmic-import: rr3cgzELv8j1fSZjvVMfyx/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: Ii0bQ3L3sO/css

export type PlasmicHome__VariantMembers = {
  showLogin: "showLogin";
  isTimeline: "isTimeline";
  menuToggle: "menuToggle";
};

export type PlasmicHome__VariantsArgs = {
  showLogin?: SingleBooleanChoiceArg<"showLogin">;
  isTimeline?: SingleBooleanChoiceArg<"isTimeline">;
  menuToggle?: SingleBooleanChoiceArg<"menuToggle">;
};

type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>(
  "showLogin",
  "isTimeline",
  "menuToggle"
);

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  headerContainer?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  sidebarContainer?: p.Flex<"div">;
  sidebar?: p.Flex<typeof Sidebar>;
  main?: p.Flex<"div">;
  mainHeaderContainer?: p.Flex<"div">;
  mainHeader?: p.Flex<typeof MainHeader>;
  container?: p.Flex<"div">;
  actionBarContainer?: p.Flex<"div">;
  actionBar?: p.Flex<typeof ActionBar>;
  updatesContainer?: p.Flex<"div">;
  modalOverlay?: p.Flex<"div">;
  loginModal?: p.Flex<typeof ModalAlt>;
};

export interface DefaultHomeProps {
  showLogin?: SingleBooleanChoiceArg<"showLogin">;
  isTimeline?: SingleBooleanChoiceArg<"isTimeline">;
  menuToggle?: SingleBooleanChoiceArg<"menuToggle">;
  className?: string;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__isTimeline]: hasVariant(
          variants,
          "isTimeline",
          "isTimeline"
        ),
        [sty.root__menuToggle]: hasVariant(
          variants,
          "menuToggle",
          "menuToggle"
        ),
      })}
    >
      <div
        data-plasmic-name={"headerContainer"}
        data-plasmic-override={overrides.headerContainer}
        className={classNames(defaultcss.all, sty.headerContainer)}
      >
        <Header
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames("__wab_instance", sty.header, {
            [sty.header__menuToggle]: hasVariant(
              variants,
              "menuToggle",
              "menuToggle"
            ),
          })}
        />
      </div>

      <div className={classNames(defaultcss.all, sty.box___27XeS)}>
        {(
          hasVariant(variants, "menuToggle", "menuToggle") &&
          hasVariant(globalVariants, "screen", "tablet")
            ? false
            : hasVariant(variants, "menuToggle", "menuToggle") &&
              hasVariant(globalVariants, "screen", "desktop")
            ? false
            : hasVariant(variants, "menuToggle", "menuToggle")
            ? true
            : hasVariant(globalVariants, "screen", "notSupported")
            ? false
            : hasVariant(globalVariants, "screen", "mobile")
            ? false
            : true
        ) ? (
          <div
            data-plasmic-name={"sidebarContainer"}
            data-plasmic-override={overrides.sidebarContainer}
            className={classNames(defaultcss.all, sty.sidebarContainer, {
              [sty.sidebarContainer__menuToggle]: hasVariant(
                variants,
                "menuToggle",
                "menuToggle"
              ),
            })}
          >
            {(
              hasVariant(variants, "menuToggle", "menuToggle")
                ? true
                : hasVariant(globalVariants, "screen", "notSupported")
                ? false
                : hasVariant(globalVariants, "screen", "mobile")
                ? false
                : true
            ) ? (
              <div
                className={classNames(defaultcss.all, sty.box__sqRU, {
                  [sty.box__menuToggle__sqRUmPnl3]: hasVariant(
                    variants,
                    "menuToggle",
                    "menuToggle"
                  ),
                })}
              >
                {true ? (
                  <Sidebar
                    data-plasmic-name={"sidebar"}
                    data-plasmic-override={overrides.sidebar}
                    className={classNames("__wab_instance", sty.sidebar, {
                      [sty.sidebar__menuToggle]: hasVariant(
                        variants,
                        "menuToggle",
                        "menuToggle"
                      ),
                    })}
                  />
                ) : null}
              </div>
            ) : null}
          </div>
        ) : null}

        <p.Stack
          as={"div"}
          data-plasmic-name={"main"}
          data-plasmic-override={overrides.main}
          hasGap={true}
          className={classNames(defaultcss.all, sty.main)}
        >
          {(hasVariant(variants, "isTimeline", "isTimeline") ? true : false) ? (
            <div
              data-plasmic-name={"mainHeaderContainer"}
              data-plasmic-override={overrides.mainHeaderContainer}
              className={classNames(defaultcss.all, sty.mainHeaderContainer, {
                [sty.mainHeaderContainer__isTimeline]: hasVariant(
                  variants,
                  "isTimeline",
                  "isTimeline"
                ),
              })}
            >
              <MainHeader
                data-plasmic-name={"mainHeader"}
                data-plasmic-override={overrides.mainHeader}
                className={classNames("__wab_instance", sty.mainHeader, {
                  [sty.mainHeader__isTimeline]: hasVariant(
                    variants,
                    "isTimeline",
                    "isTimeline"
                  ),
                })}
              />
            </div>
          ) : null}

          <div className={classNames(defaultcss.all, sty.box__of3XW)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              hasGap={true}
              className={classNames(defaultcss.all, sty.container)}
            >
              <div
                data-plasmic-name={"actionBarContainer"}
                data-plasmic-override={overrides.actionBarContainer}
                className={classNames(defaultcss.all, sty.actionBarContainer)}
              >
                <ActionBar
                  data-plasmic-name={"actionBar"}
                  data-plasmic-override={overrides.actionBar}
                  className={classNames("__wab_instance", sty.actionBar, {
                    [sty.actionBar__isTimeline]: hasVariant(
                      variants,
                      "isTimeline",
                      "isTimeline"
                    ),
                  })}
                  error={[]}
                  errorMessage={"Please enter a number value"}
                  isActive={"isActive" as const}
                  text={[]}
                />
              </div>

              <div className={classNames(defaultcss.all, sty.box__g9Hh0)} />

              <p.Stack
                as={"div"}
                data-plasmic-name={"updatesContainer"}
                data-plasmic-override={overrides.updatesContainer}
                hasGap={true}
                className={classNames(defaultcss.all, sty.updatesContainer)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__ezjEq
                  )}
                >
                  {"new updates"}
                </div>

                <Update
                  className={classNames("__wab_instance", sty.update__aMfE)}
                />

                <Update
                  className={classNames("__wab_instance", sty.update__i0Ec2)}
                />

                <Update
                  className={classNames("__wab_instance", sty.update__pLxE)}
                />

                <Update
                  className={classNames("__wab_instance", sty.update__jcO9K)}
                />
              </p.Stack>
            </p.Stack>
          </div>
        </p.Stack>
      </div>

      {(hasVariant(variants, "showLogin", "showLogin") ? true : false) ? (
        <div
          data-plasmic-name={"modalOverlay"}
          data-plasmic-override={overrides.modalOverlay}
          className={classNames(defaultcss.all, sty.modalOverlay, {
            [sty.modalOverlay__menuToggle]: hasVariant(
              variants,
              "menuToggle",
              "menuToggle"
            ),
            [sty.modalOverlay__showLogin]: hasVariant(
              variants,
              "showLogin",
              "showLogin"
            ),
          })}
        >
          <ModalAlt
            data-plasmic-name={"loginModal"}
            data-plasmic-override={overrides.loginModal}
            className={classNames("__wab_instance", sty.loginModal, {
              [sty.loginModal__menuToggle]: hasVariant(
                variants,
                "menuToggle",
                "menuToggle"
              ),
            })}
            organizationDescription={
              "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec nec volutpat magna."
            }
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerContainer",
    "header",
    "sidebarContainer",
    "sidebar",
    "main",
    "mainHeaderContainer",
    "mainHeader",
    "container",
    "actionBarContainer",
    "actionBar",
    "updatesContainer",
    "modalOverlay",
    "loginModal",
  ],
  headerContainer: ["headerContainer", "header"],
  header: ["header"],
  sidebarContainer: ["sidebarContainer", "sidebar"],
  sidebar: ["sidebar"],
  main: [
    "main",
    "mainHeaderContainer",
    "mainHeader",
    "container",
    "actionBarContainer",
    "actionBar",
    "updatesContainer",
  ],
  mainHeaderContainer: ["mainHeaderContainer", "mainHeader"],
  mainHeader: ["mainHeader"],
  container: [
    "container",
    "actionBarContainer",
    "actionBar",
    "updatesContainer",
  ],
  actionBarContainer: ["actionBarContainer", "actionBar"],
  actionBar: ["actionBar"],
  updatesContainer: ["updatesContainer"],
  modalOverlay: ["modalOverlay", "loginModal"],
  loginModal: ["loginModal"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerContainer: "div";
  header: typeof Header;
  sidebarContainer: "div";
  sidebar: typeof Sidebar;
  main: "div";
  mainHeaderContainer: "div";
  mainHeader: typeof MainHeader;
  container: "div";
  actionBarContainer: "div";
  actionBar: typeof ActionBar;
  updatesContainer: "div";
  modalOverlay: "div";
  loginModal: typeof ModalAlt;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicHome__VariantsArgs;
  args?: PlasmicHome__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicHome__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps,
    });

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerContainer: makeNodeComponent("headerContainer"),
    header: makeNodeComponent("header"),
    sidebarContainer: makeNodeComponent("sidebarContainer"),
    sidebar: makeNodeComponent("sidebar"),
    main: makeNodeComponent("main"),
    mainHeaderContainer: makeNodeComponent("mainHeaderContainer"),
    mainHeader: makeNodeComponent("mainHeader"),
    container: makeNodeComponent("container"),
    actionBarContainer: makeNodeComponent("actionBarContainer"),
    actionBar: makeNodeComponent("actionBar"),
    updatesContainer: makeNodeComponent("updatesContainer"),
    modalOverlay: makeNodeComponent("modalOverlay"),
    loginModal: makeNodeComponent("loginModal"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
