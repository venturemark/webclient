// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rr3cgzELv8j1fSZjvVMfyx
// Component: Ii0bQ3L3sO
import * as React from "react";

import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicLink,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  Stack,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import IconButton from "../../iconbutton/index"; // plasmic-import: odPjbfT2kyJgB_S/component
import Sidebar from "../../sidebar/index"; // plasmic-import: FZWTu4L61t/component
import ActionBar from "../../actionbar/index"; // plasmic-import: eUnRsS9UXR/component
import Update from "../../update/index"; // plasmic-import: Fs8bTUrvZrvfhCr/component
import ActionsColumn from "../../actionscolumn/index"; // plasmic-import: Ey_MwfntCV/component

import {
  ScreenContext,
  ScreenValue,
} from "../shared/PlasmicGlobalVariant__Screen"; // plasmic-import: szbTUtTUfDW81Pi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_home.module.css"; // plasmic-import: rr3cgzELv8j1fSZjvVMfyx/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: Ii0bQ3L3sO/css

import IconCloseIcon from "../shared/icons/PlasmicIcon__IconClose"; // plasmic-import: FJuvOqJzhV/icon
import IconMenuOpenIcon from "../shared/icons/PlasmicIcon__IconMenuOpen"; // plasmic-import: U8bxGhPFOV/icon
import IconHomeIcon from "../shared/icons/PlasmicIcon__IconHome"; // plasmic-import: Z6YqF7wXr6/icon
import IconAddIcon from "../shared/icons/PlasmicIcon__IconAdd"; // plasmic-import: gg_6iBfcsu/icon

export type PlasmicHome__VariantMembers = {
  sidebarHidden: "sidebarHidden";
};

export type PlasmicHome__VariantsArgs = {
  sidebarHidden?: SingleBooleanChoiceArg<"sidebarHidden">;
};

type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>(
  "sidebarHidden"
);

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: Flex<"div">;
  toggleSidebar?: Flex<typeof IconButton>;
  startIcon3?: Flex<"svg">;
  endIcon3?: Flex<"svg">;
  homeButton?: Flex<typeof IconButton>;
  startIcon?: Flex<"svg">;
  endIcon2?: Flex<"svg">;
  addButton?: Flex<typeof IconButton>;
  startIcon2?: Flex<"svg">;
  endIcon?: Flex<"svg">;
  sidebar?: Flex<typeof Sidebar>;
  main?: Flex<"div">;
  actionBarContainer?: Flex<"div">;
  actionBar?: Flex<typeof ActionBar>;
  updatesContainer?: Flex<"div">;
  update?: Flex<typeof Update>;
  actionsColumn?: Flex<typeof ActionsColumn>;
};

export interface DefaultHomeProps {
  sidebarHidden?: SingleBooleanChoiceArg<"sidebarHidden">;
  className?: string;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: React.useContext(ScreenContext),
  });

  return (
    <Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={hasVariant(globalVariants, "screen", "mobile") ? true : false}
      className={classNames(sty.root, projectcss.root_reset, defaultcss.all, {
        [sty.root__sidebarHidden]: hasVariant(
          variants,
          "sidebarHidden",
          "sidebarHidden"
        ),
      })}
    >
      <div
        className={classNames(sty.box__nh02S, defaultcss.all, {
          [sty.box__sidebarHidden__nh02ScPu7G]: hasVariant(
            variants,
            "sidebarHidden",
            "sidebarHidden"
          ),
        })}
      >
        <IconButton
          data-plasmic-name={"toggleSidebar"}
          data-plasmic-override={overrides.toggleSidebar}
          className={classNames(sty.toggleSidebar, "__wab_instance", {
            [sty.toggleSidebar__sidebarHidden]: hasVariant(
              variants,
              "sidebarHidden",
              "sidebarHidden"
            ),
          })}
          content={""}
          endIcon={
            false ? (
              <svg
                data-plasmic-name={"endIcon3"}
                data-plasmic-override={overrides.endIcon3}
                className={classNames(sty.endIcon3, defaultcss.all)}
                role={"img"}
              />
            ) : null
          }
          startIcon={
            <PlasmicIcon
              data-plasmic-name={"startIcon3"}
              data-plasmic-override={overrides.startIcon3}
              PlasmicIconType={
                hasVariant(variants, "sidebarHidden", "sidebarHidden")
                  ? IconMenuOpenIcon
                  : IconCloseIcon
              }
              className={classNames(sty.startIcon3, defaultcss.all, {
                [sty.startIcon3__sidebarHidden]: hasVariant(
                  variants,
                  "sidebarHidden",
                  "sidebarHidden"
                ),
              })}
              role={"img"}
            />
          }
          withIcons={["start"]}
        />
      </div>
      {(
        hasVariant(variants, "sidebarHidden", "sidebarHidden") ? true : true
      ) ? (
        <Stack
          as={"div"}
          hasGap={
            hasVariant(variants, "sidebarHidden", "sidebarHidden")
              ? true
              : false
          }
          className={classNames(sty.box__mbTc6, defaultcss.all, {
            [sty.box__sidebarHidden__mbTc6CPu7G]: hasVariant(
              variants,
              "sidebarHidden",
              "sidebarHidden"
            ),
          })}
        >
          {(
            hasVariant(variants, "sidebarHidden", "sidebarHidden") ? true : true
          ) ? (
            <IconButton
              data-plasmic-name={"homeButton"}
              data-plasmic-override={overrides.homeButton}
              className={classNames(sty.homeButton, "__wab_instance", {
                [sty.homeButton__sidebarHidden]: hasVariant(
                  variants,
                  "sidebarHidden",
                  "sidebarHidden"
                ),
              })}
              content={""}
              endIcon={
                false ? (
                  <svg
                    data-plasmic-name={"endIcon2"}
                    data-plasmic-override={overrides.endIcon2}
                    className={classNames(sty.endIcon2, defaultcss.all)}
                    role={"img"}
                  />
                ) : null
              }
              startIcon={
                <PlasmicIcon
                  data-plasmic-name={"startIcon"}
                  data-plasmic-override={overrides.startIcon}
                  PlasmicIconType={
                    hasVariant(variants, "sidebarHidden", "sidebarHidden")
                      ? IconHomeIcon
                      : IconHomeIcon
                  }
                  className={classNames(sty.startIcon, defaultcss.all, {
                    [sty.startIcon__sidebarHidden]: hasVariant(
                      variants,
                      "sidebarHidden",
                      "sidebarHidden"
                    ),
                  })}
                  role={"img"}
                />
              }
              withIcons={
                hasVariant(variants, "sidebarHidden", "sidebarHidden")
                  ? ["start"]
                  : ["start"]
              }
            />
          ) : null}
          {(
            hasVariant(variants, "sidebarHidden", "sidebarHidden") ? true : true
          ) ? (
            <IconButton
              data-plasmic-name={"addButton"}
              data-plasmic-override={overrides.addButton}
              className={classNames(sty.addButton, "__wab_instance", {
                [sty.addButton__sidebarHidden]: hasVariant(
                  variants,
                  "sidebarHidden",
                  "sidebarHidden"
                ),
              })}
              content={""}
              endIcon={
                false ? (
                  <svg
                    data-plasmic-name={"endIcon"}
                    data-plasmic-override={overrides.endIcon}
                    className={classNames(sty.endIcon, defaultcss.all)}
                    role={"img"}
                  />
                ) : null
              }
              startIcon={
                <PlasmicIcon
                  data-plasmic-name={"startIcon2"}
                  data-plasmic-override={overrides.startIcon2}
                  PlasmicIconType={
                    hasVariant(variants, "sidebarHidden", "sidebarHidden")
                      ? IconAddIcon
                      : IconAddIcon
                  }
                  className={classNames(sty.startIcon2, defaultcss.all, {
                    [sty.startIcon2__sidebarHidden]: hasVariant(
                      variants,
                      "sidebarHidden",
                      "sidebarHidden"
                    ),
                  })}
                  role={"img"}
                />
              }
              withIcons={
                hasVariant(variants, "sidebarHidden", "sidebarHidden")
                  ? ["start"]
                  : ["start"]
              }
            />
          ) : null}
        </Stack>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
        <div
          className={classNames(sty.box___27XeS, defaultcss.all, {
            [sty.box__sidebarHidden___27XeScPu7G]: hasVariant(
              variants,
              "sidebarHidden",
              "sidebarHidden"
            ),
          })}
        >
          {(hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
            <Sidebar
              data-plasmic-name={"sidebar"}
              data-plasmic-override={overrides.sidebar}
              className={classNames(sty.sidebar, "__wab_instance", {
                [sty.sidebar__sidebarHidden]: hasVariant(
                  variants,
                  "sidebarHidden",
                  "sidebarHidden"
                ),
              })}
            />
          ) : null}
        </div>
      ) : null}

      <div
        data-plasmic-name={"main"}
        data-plasmic-override={overrides.main}
        className={classNames(sty.main, defaultcss.all, {
          [sty.main__sidebarHidden]: hasVariant(
            variants,
            "sidebarHidden",
            "sidebarHidden"
          ),
        })}
      >
        <Stack
          as={"div"}
          hasGap={hasVariant(globalVariants, "screen", "mobile") ? true : false}
          className={classNames(sty.box__ineb5, defaultcss.all)}
        >
          <div
            data-plasmic-name={"actionBarContainer"}
            data-plasmic-override={overrides.actionBarContainer}
            className={classNames(sty.actionBarContainer, defaultcss.all)}
          >
            <ActionBar
              data-plasmic-name={"actionBar"}
              data-plasmic-override={overrides.actionBar}
              className={classNames(sty.actionBar, "__wab_instance")}
              error={hasVariant(globalVariants, "screen", "mobile") ? [] : []}
              errorMessage={
                <div
                  className={classNames(
                    sty.box__pmC0Q,
                    defaultcss.all,
                    defaultcss.__wab_text
                  )}
                >
                  {"Please enter a number value"}
                </div>
              }
              text={hasVariant(globalVariants, "screen", "mobile") ? [] : []}
            />
          </div>

          <Stack
            as={"div"}
            data-plasmic-name={"updatesContainer"}
            data-plasmic-override={overrides.updatesContainer}
            hasGap={true}
            className={classNames(sty.updatesContainer, defaultcss.all)}
          >
            <Update
              data-plasmic-name={"update"}
              data-plasmic-override={overrides.update}
              className={classNames("__wab_instance")}
            />
          </Stack>
        </Stack>

        <ActionsColumn
          data-plasmic-name={"actionsColumn"}
          data-plasmic-override={overrides.actionsColumn}
          className={classNames(sty.actionsColumn, "__wab_instance")}
          content={["hasContent"]}
          number={"hasNumber" as const}
          numberValue={"67"}
        />
      </div>
    </Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "toggleSidebar",
    "startIcon3",
    "endIcon3",
    "homeButton",
    "startIcon",
    "endIcon2",
    "addButton",
    "startIcon2",
    "endIcon",
    "sidebar",
    "main",
    "actionBarContainer",
    "actionBar",
    "updatesContainer",
    "update",
    "actionsColumn",
  ],

  toggleSidebar: ["toggleSidebar", "startIcon3", "endIcon3"],
  startIcon3: ["startIcon3"],
  endIcon3: ["endIcon3"],
  homeButton: ["homeButton", "startIcon", "endIcon2"],
  startIcon: ["startIcon"],
  endIcon2: ["endIcon2"],
  addButton: ["addButton", "startIcon2", "endIcon"],
  startIcon2: ["startIcon2"],
  endIcon: ["endIcon"],
  sidebar: ["sidebar"],
  main: [
    "main",
    "actionBarContainer",
    "actionBar",
    "updatesContainer",
    "update",
    "actionsColumn",
  ],

  actionBarContainer: ["actionBarContainer", "actionBar"],
  actionBar: ["actionBar"],
  updatesContainer: ["updatesContainer", "update"],
  update: ["update"],
  actionsColumn: ["actionsColumn"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  toggleSidebar: typeof IconButton;
  startIcon3: "svg";
  endIcon3: "svg";
  homeButton: typeof IconButton;
  startIcon: "svg";
  endIcon2: "svg";
  addButton: typeof IconButton;
  startIcon2: "svg";
  endIcon: "svg";
  sidebar: typeof Sidebar;
  main: "div";
  actionBarContainer: "div";
  actionBar: typeof ActionBar;
  updatesContainer: "div";
  update: typeof Update;
  actionsColumn: typeof ActionsColumn;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps,
    });

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    toggleSidebar: makeNodeComponent("toggleSidebar"),
    startIcon3: makeNodeComponent("startIcon3"),
    endIcon3: makeNodeComponent("endIcon3"),
    homeButton: makeNodeComponent("homeButton"),
    startIcon: makeNodeComponent("startIcon"),
    endIcon2: makeNodeComponent("endIcon2"),
    addButton: makeNodeComponent("addButton"),
    startIcon2: makeNodeComponent("startIcon2"),
    endIcon: makeNodeComponent("endIcon"),
    sidebar: makeNodeComponent("sidebar"),
    main: makeNodeComponent("main"),
    actionBarContainer: makeNodeComponent("actionBarContainer"),
    actionBar: makeNodeComponent("actionBar"),
    updatesContainer: makeNodeComponent("updatesContainer"),
    update: makeNodeComponent("update"),
    actionsColumn: makeNodeComponent("actionsColumn"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
