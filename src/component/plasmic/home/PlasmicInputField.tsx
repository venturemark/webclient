// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rr3cgzELv8j1fSZjvVMfyx
// Component: yT5Y2AcZ02
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';
import defaultcss from '../plasmic__default_style.module.css'; // plasmic-import: global/defaultcss
import projectcss from './plasmic_home.module.css'; // plasmic-import: rr3cgzELv8j1fSZjvVMfyx/projectcss
import sty from './PlasmicInputField.module.css'; // plasmic-import: yT5Y2AcZ02/css

export type PlasmicInputField__VariantMembers = {};
export type PlasmicInputField__VariantsArgs = {};
type VariantPropType = keyof PlasmicInputField__VariantsArgs;
export const PlasmicInputField__VariantProps = new Array<VariantPropType>();

export type PlasmicInputField__ArgsType = {
  booking3DaysBefor?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInputField__ArgsType;
export const PlasmicInputField__ArgProps = new Array<ArgPropType>(
  'booking3DaysBefor',
  'children',
);

export type PlasmicInputField__OverridesType = {
  root?: p.Flex<'div'>;
  textbox?: p.Flex<'input'>;
};

export interface DefaultInputFieldProps {
  booking3DaysBefor?: React.ReactNode;
  children?: React.ReactNode;
  className?: string;
}

function PlasmicInputField__RenderFunc(props: {
  variants: PlasmicInputField__VariantsArgs;
  args: PlasmicInputField__ArgsType;
  overrides: PlasmicInputField__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.root,
      )}
    >
      <div className={classNames(defaultcss.all, sty.box__vrRjI)}>
        <p.PlasmicSlot
          defaultContents={'Name'}
          value={args.booking3DaysBefor}
          className={classNames(sty.slotBooking3DaysBefor)}
        />
      </div>

      <div className={classNames(defaultcss.all, sty.box___9KRuQ)}>
        <p.PlasmicSlot
          defaultContents={
            <input
              data-plasmic-name={'textbox'}
              data-plasmic-override={overrides.textbox}
              className={classNames(defaultcss.input, sty.textbox)}
              placeholder={'Some placeholder' as const}
              size={1 as const}
              type={'text' as const}
              value={'Some value' as const}
            />
          }
          value={args.children}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'textbox'],
  textbox: ['textbox'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  textbox: 'input';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputField__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputField__VariantsArgs;
    args?: PlasmicInputField__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInputField__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInputField__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      | ReservedPropsType
      | VariantPropType
      | ArgPropType
      | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(
  nodeName: NodeName,
) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputField__ArgProps,
      internalVariantPropNames: PlasmicInputField__VariantProps,
    });

    return PlasmicInputField__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicInputField';
  } else {
    func.displayName = `PlasmicInputField.${nodeName}`;
  }
  return func;
}

export const PlasmicInputField = Object.assign(
  // Top-level PlasmicInputField renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    textbox: makeNodeComponent('textbox'),

    // Metadata about props expected for PlasmicInputField
    internalVariantProps: PlasmicInputField__VariantProps,
    internalArgProps: PlasmicInputField__ArgProps,
  },
);

export default PlasmicInputField;
/* prettier-ignore-end */
