// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rr3cgzELv8j1fSZjvVMfyx
// Component: sIIbkPiydb
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_home.module.css"; // plasmic-import: rr3cgzELv8j1fSZjvVMfyx/projectcss
import sty from "./PlasmicSidebarListItem.module.css"; // plasmic-import: sIIbkPiydb/css

import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: RysJdjqIri/icon

export type PlasmicSidebarListItem__VariantMembers = {
  active: "active";
  _new: "_new";
};

export type PlasmicSidebarListItem__VariantsArgs = {
  active?: SingleBooleanChoiceArg<"active">;
  _new?: SingleBooleanChoiceArg<"_new">;
};

type VariantPropType = keyof PlasmicSidebarListItem__VariantsArgs;
export const PlasmicSidebarListItem__VariantProps = new Array<VariantPropType>(
  "active",
  "_new"
);

export type PlasmicSidebarListItem__ArgsType = {
  label?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSidebarListItem__ArgsType;
export const PlasmicSidebarListItem__ArgProps = new Array<ArgPropType>(
  "label",
  "children"
);

export type PlasmicSidebarListItem__OverridesType = {
  listItem?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  box?: p.Flex<"div">;
};

export interface DefaultSidebarListItemProps {
  label?: React.ReactNode;
  children?: React.ReactNode;
  active?: SingleBooleanChoiceArg<"active">;
  _new?: SingleBooleanChoiceArg<"_new">;
  className?: string;
}

function PlasmicSidebarListItem__RenderFunc(props: {
  variants: PlasmicSidebarListItem__VariantsArgs;
  args: PlasmicSidebarListItem__ArgsType;
  overrides: PlasmicSidebarListItem__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"listItem"}
      data-plasmic-override={overrides.listItem}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.listItem,
        {
          [sty.listItem___new]: hasVariant(variants, "_new", "_new"),
          [sty.listItem__active]: hasVariant(variants, "active", "active"),
        }
      )}
    >
      <p.PlasmicSlot
        defaultContents={
          <VectorIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, sty.svg)}
            role={"img"}
          />
        }
        value={args.children}
        className={classNames(sty.slotChildren, {
          [sty.slotChildren___new]: hasVariant(variants, "_new", "_new"),
          [sty.slotChildren__active]: hasVariant(variants, "active", "active"),
        })}
      />

      <div
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        className={classNames(defaultcss.all, sty.box, {
          [sty.box___new]: hasVariant(variants, "_new", "_new"),
          [sty.box__active]: hasVariant(variants, "active", "active"),
        })}
      >
        <p.PlasmicSlot
          defaultContents={"Metrics"}
          value={args.label}
          className={classNames(sty.slotLabel, {
            [sty.slotLabel__active]: hasVariant(variants, "active", "active"),
          })}
        />
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  listItem: ["listItem", "svg", "box"],
  svg: ["svg"],
  box: ["box"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  listItem: "div";
  svg: "svg";
  box: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebarListItem__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebarListItem__VariantsArgs;
    args?: PlasmicSidebarListItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSidebarListItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSidebarListItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSidebarListItem__ArgProps,
      internalVariantPropNames: PlasmicSidebarListItem__VariantProps,
    });

    return PlasmicSidebarListItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "listItem") {
    func.displayName = "PlasmicSidebarListItem";
  } else {
    func.displayName = `PlasmicSidebarListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebarListItem = Object.assign(
  // Top-level PlasmicSidebarListItem renders the root element
  makeNodeComponent("listItem"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    box: makeNodeComponent("box"),

    // Metadata about props expected for PlasmicSidebarListItem
    internalVariantProps: PlasmicSidebarListItem__VariantProps,
    internalArgProps: PlasmicSidebarListItem__ArgProps,
  }
);

export default PlasmicSidebarListItem;
/* prettier-ignore-end */
