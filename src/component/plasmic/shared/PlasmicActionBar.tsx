// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: eUnRsS9UXR
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import PhotoAvatar from "../../photoavatar/index"; // plasmic-import: uaoIqTcPRC-/component
import Tags from "../../tags/index"; // plasmic-import: 0wz8hGqZgNQ/component
import Button from "../../button/index"; // plasmic-import: JU1t0P9pFY/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: szbTUtTUfDW81Pi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import * as sty from "./PlasmicActionBar.module.css"; // plasmic-import: eUnRsS9UXR/css

import IconCloseIcon from "./icons/PlasmicIcon__IconClose"; // plasmic-import: v016HsKmfL/icon
import IconPlusIcon from "./icons/PlasmicIcon__IconPlus"; // plasmic-import: B5QLKmr2tW/icon
import IconSend2Icon from "./icons/PlasmicIcon__IconSend2"; // plasmic-import: Iea8iz1ew/icon

export type PlasmicActionBar__VariantMembers = {
  error: "hasError";
  text: "hasText";
  isActive: "isActive";
  timelineSelected: "timelineSelected";
  mobileLayout: "mobileLayout";
};

export type PlasmicActionBar__VariantsArgs = {
  error?: MultiChoiceArg<"hasError">;
  text?: MultiChoiceArg<"hasText">;
  isActive?: SingleBooleanChoiceArg<"isActive">;
  timelineSelected?: SingleBooleanChoiceArg<"timelineSelected">;
  mobileLayout?: SingleBooleanChoiceArg<"mobileLayout">;
};

type VariantPropType = keyof PlasmicActionBar__VariantsArgs;
export const PlasmicActionBar__VariantProps = new Array<VariantPropType>(
  "error",
  "text",
  "isActive",
  "timelineSelected",
  "mobileLayout"
);

export type PlasmicActionBar__ArgsType = {
  userInitials?: React.ReactNode;
  slot?: React.ReactNode;
  text2?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicActionBar__ArgsType;
export const PlasmicActionBar__ArgProps = new Array<ArgPropType>(
  "userInitials",
  "slot",
  "text2",
  "children"
);

export type PlasmicActionBar__OverridesType = {
  root?: p.Flex<"div">;
  form?: p.Flex<"form">;
  photoAvatar?: p.Flex<typeof PhotoAvatar>;
  editorContainer?: p.Flex<"div">;
  title?: p.Flex<"textarea">;
  description?: p.Flex<"textarea">;
  shareToContainer?: p.Flex<"div">;
  tagsContainer?: p.Flex<typeof Tags>;
  post?: p.Flex<typeof Button>;
  container?: p.Flex<"div">;
  selectedItemsContainer?: p.Flex<"div">;
  tags?: p.Flex<typeof Tags>;
  button?: p.Flex<"button">;
};

export interface DefaultActionBarProps {
  userInitials?: React.ReactNode;
  slot?: React.ReactNode;
  text2?: React.ReactNode;
  children?: React.ReactNode;
  error?: MultiChoiceArg<"hasError">;
  text?: MultiChoiceArg<"hasText">;
  isActive?: SingleBooleanChoiceArg<"isActive">;
  timelineSelected?: SingleBooleanChoiceArg<"timelineSelected">;
  mobileLayout?: SingleBooleanChoiceArg<"mobileLayout">;
  className?: string;
}

function PlasmicActionBar__RenderFunc(props: {
  variants: PlasmicActionBar__VariantsArgs;
  args: PlasmicActionBar__ArgsType;
  overrides: PlasmicActionBar__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__error_hasError]: hasVariant(variants, "error", "hasError"),
        [sty.root__isActive]: hasVariant(variants, "isActive", "isActive"),
        [sty.root__isActive_error_hasError]:
          hasVariant(variants, "isActive", "isActive") &&
          hasVariant(variants, "error", "hasError"),
        [sty.root__text_hasText]: hasVariant(variants, "text", "hasText"),
        [sty.root__text_hasText_error_hasError]:
          hasVariant(variants, "text", "hasText") &&
          hasVariant(variants, "error", "hasError"),
        [sty.root__timelineSelected]: hasVariant(
          variants,
          "timelineSelected",
          "timelineSelected"
        ),
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__zG8Do, {
          [sty.box__error_hasError__zG8DoxYqMt]: hasVariant(
            variants,
            "error",
            "hasError"
          ),
          [sty.box__isActive__zG8DovjQpn]: hasVariant(
            variants,
            "isActive",
            "isActive"
          ),
          [sty.box__timelineSelected__zG8Do75BwG]: hasVariant(
            variants,
            "timelineSelected",
            "timelineSelected"
          ),
          [sty.box__timelineSelected_isActive__zG8Do75BwGVjQpn]:
            hasVariant(variants, "timelineSelected", "timelineSelected") &&
            hasVariant(variants, "isActive", "isActive"),
        })}
      >
        <form
          data-plasmic-name={"form"}
          data-plasmic-override={overrides.form}
          className={classNames(defaultcss.all, sty.form, {
            [sty.form__isActive]: hasVariant(variants, "isActive", "isActive"),
            [sty.form__timelineSelected]: hasVariant(
              variants,
              "timelineSelected",
              "timelineSelected"
            ),
          })}
        >
          <PhotoAvatar
            data-plasmic-name={"photoAvatar"}
            data-plasmic-override={overrides.photoAvatar}
            className={classNames("__wab_instance", sty.photoAvatar, {
              [sty.photoAvatar__isActive]: hasVariant(
                variants,
                "isActive",
                "isActive"
              ),
              [sty.photoAvatar__timelineSelected]: hasVariant(
                variants,
                "timelineSelected",
                "timelineSelected"
              ),
              [sty.photoAvatar__timelineSelected_isActive]:
                hasVariant(variants, "timelineSelected", "timelineSelected") &&
                hasVariant(variants, "isActive", "isActive"),
            })}
            userInitials={
              <p.PlasmicSlot defaultContents={"KO"} value={args.userInitials} />
            }
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__ptnBs, {
              [sty.box__isActive__ptnBsvjQpn]: hasVariant(
                variants,
                "isActive",
                "isActive"
              ),
            })}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"editorContainer"}
              data-plasmic-override={overrides.editorContainer}
              hasGap={
                hasVariant(variants, "isActive", "isActive") ? true : false
              }
              className={classNames(defaultcss.all, sty.editorContainer, {
                [sty.editorContainer__error_hasError]: hasVariant(
                  variants,
                  "error",
                  "hasError"
                ),
                [sty.editorContainer__isActive]: hasVariant(
                  variants,
                  "isActive",
                  "isActive"
                ),
                [sty.editorContainer__text_hasText_error_hasError]:
                  hasVariant(variants, "text", "hasText") &&
                  hasVariant(variants, "error", "hasError"),
                [sty.editorContainer__timelineSelected]: hasVariant(
                  variants,
                  "timelineSelected",
                  "timelineSelected"
                ),
              })}
            >
              <textarea
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                className={classNames(defaultcss.textarea, sty.title, {
                  [sty.title__isActive]: hasVariant(
                    variants,
                    "isActive",
                    "isActive"
                  ),
                  [sty.title__timelineSelected]: hasVariant(
                    variants,
                    "timelineSelected",
                    "timelineSelected"
                  ),
                })}
                placeholder={"Write your update..." as const}
              />

              {(hasVariant(variants, "isActive", "isActive") ? true : false) ? (
                <textarea
                  data-plasmic-name={"description"}
                  data-plasmic-override={overrides.description}
                  className={classNames(defaultcss.textarea, sty.description, {
                    [sty.description__isActive]: hasVariant(
                      variants,
                      "isActive",
                      "isActive"
                    ),
                    [sty.description__timelineSelected]: hasVariant(
                      variants,
                      "timelineSelected",
                      "timelineSelected"
                    ),
                  })}
                  placeholder={
                    hasVariant(variants, "isActive", "isActive")
                      ? ("Description..." as const)
                      : ("Write a paragraph" as const)
                  }
                  rows={2 as const}
                  value={"" as const}
                />
              ) : null}
            </p.Stack>

            {(hasVariant(variants, "isActive", "isActive") ? true : true) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__mQqJf, {
                  [sty.box__isActive__mQqJfvjQpn]: hasVariant(
                    variants,
                    "isActive",
                    "isActive"
                  ),
                  [sty.box__mobileLayout__mQqJfr8WpI]: hasVariant(
                    variants,
                    "mobileLayout",
                    "mobileLayout"
                  ),
                  [sty.box__timelineSelected__mQqJf75BwG]: hasVariant(
                    variants,
                    "timelineSelected",
                    "timelineSelected"
                  ),
                  [sty.box__timelineSelected_isActive__mQqJf75BwGVjQpn]:
                    hasVariant(
                      variants,
                      "timelineSelected",
                      "timelineSelected"
                    ) && hasVariant(variants, "isActive", "isActive"),
                })}
              >
                {(
                  hasVariant(variants, "isActive", "isActive") ? true : false
                ) ? (
                  <div
                    className={classNames(defaultcss.all, sty.box__kjkQr, {
                      [sty.box__isActive__kjkQrvjQpn]: hasVariant(
                        variants,
                        "isActive",
                        "isActive"
                      ),
                    })}
                  >
                    <div
                      className={classNames(defaultcss.all, sty.box__dWUd, {
                        [sty.box__isActive__dWUdvjQpn]: hasVariant(
                          variants,
                          "isActive",
                          "isActive"
                        ),
                      })}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"shareToContainer"}
                        data-plasmic-override={overrides.shareToContainer}
                        hasGap={true}
                        className={classNames(
                          defaultcss.all,
                          sty.shareToContainer,
                          {
                            [sty.shareToContainer__isActive]: hasVariant(
                              variants,
                              "isActive",
                              "isActive"
                            ),
                            [sty.shareToContainer__mobileLayout]: hasVariant(
                              variants,
                              "mobileLayout",
                              "mobileLayout"
                            ),
                          }
                        )}
                      >
                        {(
                          hasVariant(variants, "isActive", "isActive")
                            ? true
                            : false
                        ) ? (
                          <p.Stack
                            as={"div"}
                            hasGap={
                              hasVariant(variants, "isActive", "isActive")
                                ? true
                                : false
                            }
                            className={classNames(
                              defaultcss.all,
                              sty.box__iriP,
                              {
                                [sty.box__isActive__iriPvjQpn]: hasVariant(
                                  variants,
                                  "isActive",
                                  "isActive"
                                ),
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                defaultcss.all,
                                sty.box__vnwRg
                              )}
                            >
                              <div
                                className={classNames(
                                  defaultcss.all,
                                  defaultcss.__wab_text,
                                  sty.box__pYpv,
                                  {
                                    [sty.box__isActive__pYpVvjQpn]: hasVariant(
                                      variants,
                                      "isActive",
                                      "isActive"
                                    ),
                                  }
                                )}
                              >
                                {"Share to:"}
                              </div>

                              <Tags
                                data-plasmic-name={"tagsContainer"}
                                data-plasmic-override={overrides.tagsContainer}
                                buttonFeatures={["icon", "hasText"]}
                                text2={"Wins"}
                              >
                                <IconCloseIcon
                                  className={classNames(
                                    defaultcss.all,
                                    sty.svg__dVcAh
                                  )}
                                  role={"img"}
                                />
                              </Tags>
                            </div>
                          </p.Stack>
                        ) : null}
                      </p.Stack>
                    </div>
                  </div>
                ) : null}

                <Button
                  data-plasmic-name={"post"}
                  data-plasmic-override={overrides.post}
                  buttonFeatures={
                    hasVariant(variants, "mobileLayout", "mobileLayout")
                      ? []
                      : []
                  }
                  buttonStyle={"primaryPurple" as const}
                  className={classNames("__wab_instance", sty.post, {
                    [sty.post__isActive]: hasVariant(
                      variants,
                      "isActive",
                      "isActive"
                    ),
                    [sty.post__mobileLayout]: hasVariant(
                      variants,
                      "mobileLayout",
                      "mobileLayout"
                    ),
                  })}
                  count={"1"}
                  isDisabled={
                    hasVariant(variants, "isActive", "isActive")
                      ? undefined
                      : ("isDisabled" as const)
                  }
                  slot={
                    <IconPlusIcon
                      className={classNames(defaultcss.all, sty.svg__orOwz)}
                      role={"img"}
                    />
                  }
                  text2={"Post"}
                >
                  <IconSend2Icon
                    className={classNames(defaultcss.all, sty.svg__ljFz)}
                    role={"img"}
                  />
                </Button>

                {(
                  hasVariant(variants, "timelineSelected", "timelineSelected")
                    ? true
                    : false
                ) ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"container"}
                    data-plasmic-override={overrides.container}
                    hasGap={
                      hasVariant(
                        variants,
                        "timelineSelected",
                        "timelineSelected"
                      ) ||
                      (hasVariant(variants, "isActive", "isActive") &&
                        hasVariant(
                          variants,
                          "timelineSelected",
                          "timelineSelected"
                        ))
                        ? true
                        : false
                    }
                    className={classNames(defaultcss.all, sty.container, {
                      [sty.container__isActive]: hasVariant(
                        variants,
                        "isActive",
                        "isActive"
                      ),
                      [sty.container__isActive_timelineSelected]:
                        hasVariant(variants, "isActive", "isActive") &&
                        hasVariant(
                          variants,
                          "timelineSelected",
                          "timelineSelected"
                        ),
                      [sty.container__timelineSelected]: hasVariant(
                        variants,
                        "timelineSelected",
                        "timelineSelected"
                      ),
                    })}
                  >
                    {(
                      hasVariant(variants, "isActive", "isActive") &&
                      hasVariant(
                        variants,
                        "timelineSelected",
                        "timelineSelected"
                      )
                        ? true
                        : false
                    ) ? (
                      <div
                        data-plasmic-name={"selectedItemsContainer"}
                        data-plasmic-override={overrides.selectedItemsContainer}
                        className={classNames(
                          defaultcss.all,
                          sty.selectedItemsContainer,
                          {
                            [sty.selectedItemsContainer__isActive_timelineSelected]:
                              hasVariant(variants, "isActive", "isActive") &&
                              hasVariant(
                                variants,
                                "timelineSelected",
                                "timelineSelected"
                              ),
                          }
                        )}
                      >
                        {(
                          hasVariant(variants, "isActive", "isActive") &&
                          hasVariant(
                            variants,
                            "timelineSelected",
                            "timelineSelected"
                          )
                            ? false
                            : false
                        ) ? (
                          <Tags
                            data-plasmic-name={"tags"}
                            data-plasmic-override={overrides.tags}
                            className={classNames("__wab_instance", sty.tags, {
                              [sty.tags__isActive_timelineSelected]:
                                hasVariant(variants, "isActive", "isActive") &&
                                hasVariant(
                                  variants,
                                  "timelineSelected",
                                  "timelineSelected"
                                ),
                            })}
                            text2={"Tag Name"}
                          >
                            <IconCloseIcon
                              className={classNames(
                                defaultcss.all,
                                sty.svg__hwNLe
                              )}
                              role={"img"}
                            />
                          </Tags>
                        ) : null}
                        {(
                          hasVariant(variants, "isActive", "isActive") &&
                          hasVariant(
                            variants,
                            "timelineSelected",
                            "timelineSelected"
                          )
                            ? true
                            : false
                        ) ? (
                          <button
                            data-plasmic-name={"button"}
                            data-plasmic-override={overrides.button}
                            className={classNames(
                              defaultcss.button,
                              sty.button,
                              {
                                [sty.button__isActive_timelineSelected]:
                                  hasVariant(
                                    variants,
                                    "isActive",
                                    "isActive"
                                  ) &&
                                  hasVariant(
                                    variants,
                                    "timelineSelected",
                                    "timelineSelected"
                                  ),
                              }
                            )}
                          >
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                defaultcss.all,
                                sty.box__kBcf
                              )}
                            >
                              {(
                                hasVariant(variants, "isActive", "isActive") &&
                                hasVariant(
                                  variants,
                                  "timelineSelected",
                                  "timelineSelected"
                                )
                                  ? false
                                  : true
                              ) ? (
                                <p.PlasmicSlot
                                  defaultContents={
                                    <IconPlusIcon
                                      className={classNames(
                                        defaultcss.all,
                                        sty.svg__niToo
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  value={args.slot}
                                />
                              ) : null}
                              <p.PlasmicSlot
                                defaultContents={"Metric"}
                                value={args.text2}
                                className={classNames(sty.slotText2, {
                                  [sty.slotText2__isActive_timelineSelected]:
                                    hasVariant(
                                      variants,
                                      "isActive",
                                      "isActive"
                                    ) &&
                                    hasVariant(
                                      variants,
                                      "timelineSelected",
                                      "timelineSelected"
                                    ),
                                })}
                              />

                              <p.PlasmicSlot
                                defaultContents={
                                  <IconCloseIcon
                                    className={classNames(
                                      defaultcss.all,
                                      sty.svg__kMNxX
                                    )}
                                    role={"img"}
                                  />
                                }
                                value={args.children}
                                className={classNames(sty.slotChildren)}
                              />
                            </p.Stack>
                          </button>
                        ) : null}
                      </div>
                    ) : null}
                  </p.Stack>
                ) : null}
              </p.Stack>
            ) : null}
          </p.Stack>
        </form>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "form",
    "photoAvatar",
    "editorContainer",
    "title",
    "description",
    "shareToContainer",
    "tagsContainer",
    "post",
    "container",
    "selectedItemsContainer",
    "tags",
    "button",
  ],
  form: [
    "form",
    "photoAvatar",
    "editorContainer",
    "title",
    "description",
    "shareToContainer",
    "tagsContainer",
    "post",
    "container",
    "selectedItemsContainer",
    "tags",
    "button",
  ],
  photoAvatar: ["photoAvatar"],
  editorContainer: ["editorContainer", "title", "description"],
  title: ["title"],
  description: ["description"],
  shareToContainer: ["shareToContainer", "tagsContainer"],
  tagsContainer: ["tagsContainer"],
  post: ["post"],
  container: ["container", "selectedItemsContainer", "tags", "button"],
  selectedItemsContainer: ["selectedItemsContainer", "tags", "button"],
  tags: ["tags"],
  button: ["button"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  form: "form";
  photoAvatar: typeof PhotoAvatar;
  editorContainer: "div";
  title: "textarea";
  description: "textarea";
  shareToContainer: "div";
  tagsContainer: typeof Tags;
  post: typeof Button;
  container: "div";
  selectedItemsContainer: "div";
  tags: typeof Tags;
  button: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActionBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicActionBar__VariantsArgs;
  args?: PlasmicActionBar__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicActionBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicActionBar__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicActionBar__ArgProps,
      internalVariantPropNames: PlasmicActionBar__VariantProps,
    });

    return PlasmicActionBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActionBar";
  } else {
    func.displayName = `PlasmicActionBar.${nodeName}`;
  }
  return func;
}

export const PlasmicActionBar = Object.assign(
  // Top-level PlasmicActionBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    photoAvatar: makeNodeComponent("photoAvatar"),
    editorContainer: makeNodeComponent("editorContainer"),
    title: makeNodeComponent("title"),
    description: makeNodeComponent("description"),
    shareToContainer: makeNodeComponent("shareToContainer"),
    tagsContainer: makeNodeComponent("tagsContainer"),
    post: makeNodeComponent("post"),
    container: makeNodeComponent("container"),
    selectedItemsContainer: makeNodeComponent("selectedItemsContainer"),
    tags: makeNodeComponent("tags"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicActionBar
    internalVariantProps: PlasmicActionBar__VariantProps,
    internalArgProps: PlasmicActionBar__ArgProps,
  }
);

export default PlasmicActionBar;
/* prettier-ignore-end */
