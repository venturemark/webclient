// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

import "@plasmicapp/react-web/lib/plasmic.css";

import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  makeFragment,
  MultiChoiceArg,
  omit,
  pick,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  StrictProps,
  useTrigger,
  wrapWithClassName,
} from "@plasmicapp/react-web";
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: eUnRsS9UXR
import * as React from "react";

import Button from "../../button"; // plasmic-import: JU1t0P9pFY/component
import ErrorMessage from "../../errormessage"; // plasmic-import: X8H70YUTyF/component
import IconButton from "../../iconbutton"; // plasmic-import: UIpuE7M1YY/component
import Tags from "../../tags"; // plasmic-import: 0wz8hGqZgNQ/component
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import IconCautionIcon from "./icons/PlasmicIcon__IconCaution"; // plasmic-import: 9xu35mhQf/icon
import IconCloseIcon from "./icons/PlasmicIcon__IconClose"; // plasmic-import: v016HsKmfL/icon
import IconEmojisvgIcon from "./icons/PlasmicIcon__IconEmojisvg"; // plasmic-import: 7EdfFx1qO/icon
import IconFeedIcon from "./icons/PlasmicIcon__IconFeed"; // plasmic-import: gkIqWTG_m/icon
import IconImagesvgIcon from "./icons/PlasmicIcon__IconImagesvg"; // plasmic-import: mIjXTEoTT/icon
import IconListsvgIcon from "./icons/PlasmicIcon__IconListsvg"; // plasmic-import: kGOcXPlB7/icon
import IconOvalIcon from "./icons/PlasmicIcon__IconOval"; // plasmic-import: FUAnm6q86/icon
import IconPlusIcon from "./icons/PlasmicIcon__IconPlus"; // plasmic-import: B5QLKmr2tW/icon
import IconSend2Icon from "./icons/PlasmicIcon__IconSend2"; // plasmic-import: Iea8iz1ew/icon
import * as sty from "./PlasmicActionBar.module.css"; // plasmic-import: eUnRsS9UXR/css
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: szbTUtTUfDW81Pi/globalVariant
import * as projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss

export type PlasmicActionBar__VariantMembers = {
  error: "hasError" | "unnamedVariant";
  text: "hasText";
  isActive: "isActive";
  timelineSelected: "timelineSelected";
  mobileLayout: "mobileLayout";
};

export type PlasmicActionBar__VariantsArgs = {
  error?: MultiChoiceArg<"hasError" | "unnamedVariant">;
  text?: MultiChoiceArg<"hasText">;
  isActive?: SingleBooleanChoiceArg<"isActive">;
  timelineSelected?: SingleBooleanChoiceArg<"timelineSelected">;
  mobileLayout?: SingleBooleanChoiceArg<"mobileLayout">;
};

type VariantPropType = keyof PlasmicActionBar__VariantsArgs;
export const PlasmicActionBar__VariantProps = new Array<VariantPropType>(
  "error",
  "text",
  "isActive",
  "timelineSelected",
  "mobileLayout"
);

export type PlasmicActionBar__ArgsType = {
  slot?: React.ReactNode;
  text2?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicActionBar__ArgsType;
export const PlasmicActionBar__ArgProps = new Array<ArgPropType>(
  "slot",
  "text2",
  "children"
);

export type PlasmicActionBar__OverridesType = {
  root?: p.Flex<"div">;
  form?: p.Flex<"form">;
  editorContainer?: p.Flex<"div">;
  title?: p.Flex<"textarea">;
  description?: p.Flex<"textarea">;
  emoji?: p.Flex<typeof IconButton>;
  bulletList?: p.Flex<typeof IconButton>;
  uploadImage?: p.Flex<typeof IconButton>;
  errorMessage?: p.Flex<typeof ErrorMessage>;
  characterLimitIndicator?: p.Flex<typeof IconButton>;
  shareToContainer?: p.Flex<"div">;
  text?: p.Flex<"div">;
  container?: p.Flex<"div">;
  selectedItemsContainer?: p.Flex<"div">;
  tags?: p.Flex<typeof Tags>;
  button?: p.Flex<"button">;
  post?: p.Flex<typeof Button>;
};

export interface DefaultActionBarProps {
  slot?: React.ReactNode;
  text2?: React.ReactNode;
  children?: React.ReactNode;
  error?: MultiChoiceArg<"hasError" | "unnamedVariant">;
  text?: MultiChoiceArg<"hasText">;
  isActive?: SingleBooleanChoiceArg<"isActive">;
  timelineSelected?: SingleBooleanChoiceArg<"timelineSelected">;
  mobileLayout?: SingleBooleanChoiceArg<"mobileLayout">;
  className?: string;
}

function PlasmicActionBar__RenderFunc(props: {
  variants: PlasmicActionBar__VariantsArgs;
  args: PlasmicActionBar__ArgsType;
  overrides: PlasmicActionBar__OverridesType;
  dataFetches?: PlasmicActionBar__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__error_hasError]: hasVariant(variants, "error", "hasError"),
        [sty.root__isActive]: hasVariant(variants, "isActive", "isActive"),
        [sty.root__isActive_error_hasError]:
          hasVariant(variants, "isActive", "isActive") &&
          hasVariant(variants, "error", "hasError"),
        [sty.root__text_hasText]: hasVariant(variants, "text", "hasText"),
        [sty.root__text_hasText_error_hasError]:
          hasVariant(variants, "text", "hasText") &&
          hasVariant(variants, "error", "hasError"),
        [sty.root__timelineSelected]: hasVariant(
          variants,
          "timelineSelected",
          "timelineSelected"
        ),
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__zG8Do, {
          [sty.freeBox__error_hasError__zG8DoxYqMt]: hasVariant(
            variants,
            "error",
            "hasError"
          ),
          [sty.freeBox__isActive__zG8DovjQpn]: hasVariant(
            variants,
            "isActive",
            "isActive"
          ),
          [sty.freeBox__timelineSelected__zG8Do75BwG]: hasVariant(
            variants,
            "timelineSelected",
            "timelineSelected"
          ),
          [sty.freeBox__timelineSelected_isActive__zG8Do75BwGVjQpn]:
            hasVariant(variants, "timelineSelected", "timelineSelected") &&
            hasVariant(variants, "isActive", "isActive"),
        })}
      >
        <form
          data-plasmic-name={"form"}
          data-plasmic-override={overrides.form}
          className={classNames(defaultcss.all, sty.form, {
            [sty.form__isActive]: hasVariant(variants, "isActive", "isActive"),
            [sty.form__timelineSelected]: hasVariant(
              variants,
              "timelineSelected",
              "timelineSelected"
            ),
            [sty.form__timelineSelected_isActive]:
              hasVariant(variants, "timelineSelected", "timelineSelected") &&
              hasVariant(variants, "isActive", "isActive"),
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__ptnBs, {
              [sty.freeBox__isActive__ptnBsvjQpn]: hasVariant(
                variants,
                "isActive",
                "isActive"
              ),
            })}
          >
            <div
              data-plasmic-name={"editorContainer"}
              data-plasmic-override={overrides.editorContainer}
              className={classNames(defaultcss.all, sty.editorContainer, {
                [sty.editorContainer__error_hasError]: hasVariant(
                  variants,
                  "error",
                  "hasError"
                ),
                [sty.editorContainer__isActive]: hasVariant(
                  variants,
                  "isActive",
                  "isActive"
                ),
                [sty.editorContainer__text_hasText_error_hasError]:
                  hasVariant(variants, "text", "hasText") &&
                  hasVariant(variants, "error", "hasError"),
                [sty.editorContainer__timelineSelected]: hasVariant(
                  variants,
                  "timelineSelected",
                  "timelineSelected"
                ),
              })}
            >
              <textarea
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                className={classNames(defaultcss.textarea, sty.title, {
                  [sty.title__isActive]: hasVariant(
                    variants,
                    "isActive",
                    "isActive"
                  ),
                  [sty.title__isActive_error_hasError]:
                    hasVariant(variants, "isActive", "isActive") &&
                    hasVariant(variants, "error", "hasError"),
                  [sty.title__timelineSelected]: hasVariant(
                    variants,
                    "timelineSelected",
                    "timelineSelected"
                  ),
                  [sty.title__timelineSelected_isActive]:
                    hasVariant(
                      variants,
                      "timelineSelected",
                      "timelineSelected"
                    ) && hasVariant(variants, "isActive", "isActive"),
                })}
                placeholder={"Write your update..." as const}
                rows={1}
              />

              {(hasVariant(variants, "isActive", "isActive") ? true : false) ? (
                <textarea
                  data-plasmic-name={"description"}
                  data-plasmic-override={overrides.description}
                  className={classNames(defaultcss.textarea, sty.description, {
                    [sty.description__isActive]: hasVariant(
                      variants,
                      "isActive",
                      "isActive"
                    ),
                    [sty.description__isActive_error_hasError]:
                      hasVariant(variants, "isActive", "isActive") &&
                      hasVariant(variants, "error", "hasError"),
                    [sty.description__timelineSelected]: hasVariant(
                      variants,
                      "timelineSelected",
                      "timelineSelected"
                    ),
                    [sty.description__timelineSelected_isActive]:
                      hasVariant(
                        variants,
                        "timelineSelected",
                        "timelineSelected"
                      ) && hasVariant(variants, "isActive", "isActive"),
                  })}
                  placeholder={
                    hasVariant(variants, "isActive", "isActive")
                      ? ("Description..." as const)
                      : ("Write a paragraph" as const)
                  }
                  rows={
                    hasVariant(variants, "isActive", "isActive") &&
                    hasVariant(globalVariants, "screen", "mobile")
                      ? (5 as const)
                      : hasVariant(variants, "isActive", "isActive")
                      ? (1 as const)
                      : undefined
                  }
                  value={"" as const}
                />
              ) : null}
            </div>

            {(hasVariant(variants, "isActive", "isActive") ? true : false) ? (
              <div
                className={classNames(defaultcss.all, sty.freeBox__hHc69, {
                  [sty.freeBox__isActive__hHc69VjQpn]: hasVariant(
                    variants,
                    "isActive",
                    "isActive"
                  ),
                })}
              >
                {(
                  hasVariant(variants, "isActive", "isActive") ? true : false
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.freeBox___1SVGi, {
                      [sty.freeBox__isActive___1SVGivjQpn]: hasVariant(
                        variants,
                        "isActive",
                        "isActive"
                      ),
                    })}
                  >
                    {(
                      hasVariant(variants, "isActive", "isActive")
                        ? true
                        : false
                    ) ? (
                      <IconButton
                        data-plasmic-name={"emoji"}
                        data-plasmic-override={overrides.emoji}
                        className={classNames("__wab_instance", sty.emoji, {
                          [sty.emoji__isActive]: hasVariant(
                            variants,
                            "isActive",
                            "isActive"
                          ),
                        })}
                        iconSize={
                          hasVariant(variants, "isActive", "isActive")
                            ? ("large" as const)
                            : undefined
                        }
                      >
                        <p.PlasmicIcon
                          PlasmicIconType={
                            hasVariant(variants, "isActive", "isActive")
                              ? IconEmojisvgIcon
                              : IconFeedIcon
                          }
                          className={classNames(defaultcss.all, sty.svg__xoE5, {
                            [sty.svg__isActive__xoE5VjQpn]: hasVariant(
                              variants,
                              "isActive",
                              "isActive"
                            ),
                          })}
                          role={"img"}
                        />
                      </IconButton>
                    ) : null}
                    {(
                      hasVariant(variants, "isActive", "isActive")
                        ? true
                        : false
                    ) ? (
                      <IconButton
                        data-plasmic-name={"bulletList"}
                        data-plasmic-override={overrides.bulletList}
                        className={classNames(
                          "__wab_instance",
                          sty.bulletList,
                          {
                            [sty.bulletList__isActive]: hasVariant(
                              variants,
                              "isActive",
                              "isActive"
                            ),
                          }
                        )}
                        iconSize={
                          hasVariant(variants, "isActive", "isActive")
                            ? ("large" as const)
                            : undefined
                        }
                      >
                        <p.PlasmicIcon
                          PlasmicIconType={
                            hasVariant(variants, "isActive", "isActive")
                              ? IconListsvgIcon
                              : IconFeedIcon
                          }
                          className={classNames(
                            defaultcss.all,
                            sty.svg__t421V,
                            {
                              [sty.svg__isActive__t421VvjQpn]: hasVariant(
                                variants,
                                "isActive",
                                "isActive"
                              ),
                            }
                          )}
                          role={"img"}
                        />
                      </IconButton>
                    ) : null}
                    {(
                      hasVariant(variants, "isActive", "isActive")
                        ? true
                        : false
                    ) ? (
                      <IconButton
                        data-plasmic-name={"uploadImage"}
                        data-plasmic-override={overrides.uploadImage}
                        className={classNames(
                          "__wab_instance",
                          sty.uploadImage,
                          {
                            [sty.uploadImage__isActive]: hasVariant(
                              variants,
                              "isActive",
                              "isActive"
                            ),
                          }
                        )}
                        iconSize={
                          hasVariant(variants, "isActive", "isActive")
                            ? ("large" as const)
                            : undefined
                        }
                      >
                        <p.PlasmicIcon
                          PlasmicIconType={
                            hasVariant(variants, "isActive", "isActive")
                              ? IconImagesvgIcon
                              : IconFeedIcon
                          }
                          className={classNames(
                            defaultcss.all,
                            sty.svg__zxbGe,
                            {
                              [sty.svg__isActive__zxbGevjQpn]: hasVariant(
                                variants,
                                "isActive",
                                "isActive"
                              ),
                            }
                          )}
                          role={"img"}
                        />
                      </IconButton>
                    ) : null}
                  </p.Stack>
                ) : null}
                {(
                  hasVariant(variants, "isActive", "isActive") ? true : false
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.freeBox___9ZsQ, {
                      [sty.freeBox__isActive___9ZsQvjQpn]: hasVariant(
                        variants,
                        "isActive",
                        "isActive"
                      ),
                      [sty.freeBox__isActive_error_hasError___9ZsQvjQpnXYqMt]:
                        hasVariant(variants, "isActive", "isActive") &&
                        hasVariant(variants, "error", "hasError"),
                    })}
                  >
                    {(
                      hasVariant(variants, "isActive", "isActive") &&
                      hasVariant(variants, "error", "hasError")
                        ? true
                        : false
                    ) ? (
                      <ErrorMessage
                        data-plasmic-name={"errorMessage"}
                        data-plasmic-override={overrides.errorMessage}
                        className={classNames("__wab_instance", {
                          [sty.errorMessage__isActive]: hasVariant(
                            variants,
                            "isActive",
                            "isActive"
                          ),
                          [sty.errorMessage__isActive_error_hasError]:
                            hasVariant(variants, "isActive", "isActive") &&
                            hasVariant(variants, "error", "hasError"),
                        })}
                        message={"Error message"}
                      />
                    ) : null}
                    {(
                      hasVariant(variants, "isActive", "isActive")
                        ? true
                        : false
                    ) ? (
                      <IconButton
                        data-plasmic-name={"characterLimitIndicator"}
                        data-plasmic-override={
                          overrides.characterLimitIndicator
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.characterLimitIndicator,
                          {
                            [sty.characterLimitIndicator__isActive]: hasVariant(
                              variants,
                              "isActive",
                              "isActive"
                            ),
                          }
                        )}
                        iconSize={
                          hasVariant(variants, "isActive", "isActive")
                            ? ("large" as const)
                            : undefined
                        }
                      >
                        <p.PlasmicIcon
                          PlasmicIconType={
                            hasVariant(variants, "isActive", "isActive")
                              ? IconOvalIcon
                              : IconFeedIcon
                          }
                          className={classNames(
                            defaultcss.all,
                            sty.svg__j4Ijp,
                            {
                              [sty.svg__isActive__j4IjpvjQpn]: hasVariant(
                                variants,
                                "isActive",
                                "isActive"
                              ),
                            }
                          )}
                          role={"img"}
                        />
                      </IconButton>
                    ) : null}
                  </p.Stack>
                ) : null}
              </div>
            ) : null}
          </p.Stack>
        </form>

        {(hasVariant(variants, "isActive", "isActive") ? true : false) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__mQqJf, {
              [sty.freeBox__isActive__mQqJfvjQpn]: hasVariant(
                variants,
                "isActive",
                "isActive"
              ),
              [sty.freeBox__mobileLayout__mQqJfr8WpI]: hasVariant(
                variants,
                "mobileLayout",
                "mobileLayout"
              ),
              [sty.freeBox__timelineSelected__mQqJf75BwG]: hasVariant(
                variants,
                "timelineSelected",
                "timelineSelected"
              ),
              [sty.freeBox__timelineSelected_isActive__mQqJf75BwGVjQpn]:
                hasVariant(variants, "timelineSelected", "timelineSelected") &&
                hasVariant(variants, "isActive", "isActive"),
            })}
          >
            {(hasVariant(variants, "isActive", "isActive") ? true : false) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__kjkQr, {
                  [sty.freeBox__isActive__kjkQrvjQpn]: hasVariant(
                    variants,
                    "isActive",
                    "isActive"
                  ),
                  [sty.freeBox__timelineSelected__kjkQr75BwG]: hasVariant(
                    variants,
                    "timelineSelected",
                    "timelineSelected"
                  ),
                })}
              >
                <div
                  className={classNames(defaultcss.all, sty.freeBox__dWUd, {
                    [sty.freeBox__isActive__dWUdvjQpn]: hasVariant(
                      variants,
                      "isActive",
                      "isActive"
                    ),
                    [sty.freeBox__timelineSelected__dWUd75BwG]: hasVariant(
                      variants,
                      "timelineSelected",
                      "timelineSelected"
                    ),
                    [sty.freeBox__timelineSelected_isActive__dWUd75BwGVjQpn]:
                      hasVariant(
                        variants,
                        "timelineSelected",
                        "timelineSelected"
                      ) && hasVariant(variants, "isActive", "isActive"),
                  })}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"shareToContainer"}
                    data-plasmic-override={overrides.shareToContainer}
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.shareToContainer,
                      {
                        [sty.shareToContainer__isActive]: hasVariant(
                          variants,
                          "isActive",
                          "isActive"
                        ),
                        [sty.shareToContainer__isActive_error_hasError]:
                          hasVariant(variants, "isActive", "isActive") &&
                          hasVariant(variants, "error", "hasError"),
                        [sty.shareToContainer__mobileLayout]: hasVariant(
                          variants,
                          "mobileLayout",
                          "mobileLayout"
                        ),
                        [sty.shareToContainer__timelineSelected]: hasVariant(
                          variants,
                          "timelineSelected",
                          "timelineSelected"
                        ),
                        [sty.shareToContainer__timelineSelected_isActive]:
                          hasVariant(
                            variants,
                            "timelineSelected",
                            "timelineSelected"
                          ) && hasVariant(variants, "isActive", "isActive"),
                      }
                    )}
                  >
                    {(
                      hasVariant(variants, "isActive", "isActive")
                        ? true
                        : false
                    ) ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          defaultcss.all,
                          sty.freeBox__iriP,
                          {
                            [sty.freeBox__isActive__iriPvjQpn]: hasVariant(
                              variants,
                              "isActive",
                              "isActive"
                            ),
                            [sty.freeBox__isActive_error_hasError__iriPvjQpnXYqMt]:
                              hasVariant(variants, "isActive", "isActive") &&
                              hasVariant(variants, "error", "hasError"),
                            [sty.freeBox__timelineSelected__iriP75BwG]:
                              hasVariant(
                                variants,
                                "timelineSelected",
                                "timelineSelected"
                              ),
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            sty.freeBox__vnwRg,
                            {
                              [sty.freeBox__isActive__vnwRgvjQpn]: hasVariant(
                                variants,
                                "isActive",
                                "isActive"
                              ),
                              [sty.freeBox__isActive_error_hasError__vnwRgvjQpnXYqMt]:
                                hasVariant(variants, "isActive", "isActive") &&
                                hasVariant(variants, "error", "hasError"),
                              [sty.freeBox__timelineSelected__vnwRg75BwG]:
                                hasVariant(
                                  variants,
                                  "timelineSelected",
                                  "timelineSelected"
                                ),
                            }
                          )}
                        >
                          <div
                            data-plasmic-name={"text"}
                            data-plasmic-override={overrides.text}
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.text,
                              {
                                [sty.text__isActive]: hasVariant(
                                  variants,
                                  "isActive",
                                  "isActive"
                                ),
                                [sty.text__isActive_error_hasError]:
                                  hasVariant(
                                    variants,
                                    "isActive",
                                    "isActive"
                                  ) &&
                                  hasVariant(variants, "error", "hasError"),
                                [sty.text__timelineSelected]: hasVariant(
                                  variants,
                                  "timelineSelected",
                                  "timelineSelected"
                                ),
                              }
                            )}
                          >
                            {hasVariant(variants, "isActive", "isActive")
                              ? "Post to:"
                              : "Share to:"}
                          </div>
                        </div>
                      </p.Stack>
                    ) : null}
                  </p.Stack>

                  {(
                    hasVariant(variants, "timelineSelected", "timelineSelected")
                      ? true
                      : false
                  ) ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"container"}
                      data-plasmic-override={overrides.container}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.container, {
                        [sty.container__isActive]: hasVariant(
                          variants,
                          "isActive",
                          "isActive"
                        ),
                        [sty.container__isActive_timelineSelected]:
                          hasVariant(variants, "isActive", "isActive") &&
                          hasVariant(
                            variants,
                            "timelineSelected",
                            "timelineSelected"
                          ),
                        [sty.container__timelineSelected]: hasVariant(
                          variants,
                          "timelineSelected",
                          "timelineSelected"
                        ),
                      })}
                    >
                      {(
                        hasVariant(variants, "isActive", "isActive") &&
                        hasVariant(
                          variants,
                          "timelineSelected",
                          "timelineSelected"
                        )
                          ? true
                          : false
                      ) ? (
                        <div
                          data-plasmic-name={"selectedItemsContainer"}
                          data-plasmic-override={
                            overrides.selectedItemsContainer
                          }
                          className={classNames(
                            defaultcss.all,
                            sty.selectedItemsContainer,
                            {
                              [sty.selectedItemsContainer__isActive]:
                                hasVariant(variants, "isActive", "isActive"),
                              [sty.selectedItemsContainer__isActive_timelineSelected]:
                                hasVariant(variants, "isActive", "isActive") &&
                                hasVariant(
                                  variants,
                                  "timelineSelected",
                                  "timelineSelected"
                                ),
                              [sty.selectedItemsContainer__timelineSelected]:
                                hasVariant(
                                  variants,
                                  "timelineSelected",
                                  "timelineSelected"
                                ),
                            }
                          )}
                        >
                          {(
                            hasVariant(variants, "isActive", "isActive") &&
                            hasVariant(
                              variants,
                              "timelineSelected",
                              "timelineSelected"
                            )
                              ? false
                              : false
                          ) ? (
                            <Tags
                              data-plasmic-name={"tags"}
                              data-plasmic-override={overrides.tags}
                              className={classNames(
                                "__wab_instance",
                                sty.tags,
                                {
                                  [sty.tags__isActive_timelineSelected]:
                                    hasVariant(
                                      variants,
                                      "isActive",
                                      "isActive"
                                    ) &&
                                    hasVariant(
                                      variants,
                                      "timelineSelected",
                                      "timelineSelected"
                                    ),
                                }
                              )}
                              text2={"Tag Name"}
                            >
                              <IconCloseIcon
                                className={classNames(
                                  defaultcss.all,
                                  sty.svg__hwNLe
                                )}
                                role={"img"}
                              />
                            </Tags>
                          ) : null}
                          {(
                            hasVariant(variants, "isActive", "isActive") &&
                            hasVariant(
                              variants,
                              "timelineSelected",
                              "timelineSelected"
                            )
                              ? true
                              : false
                          ) ? (
                            <button
                              data-plasmic-name={"button"}
                              data-plasmic-override={overrides.button}
                              className={classNames(
                                defaultcss.button,
                                sty.button,
                                {
                                  [sty.button__isActive]: hasVariant(
                                    variants,
                                    "isActive",
                                    "isActive"
                                  ),
                                  [sty.button__isActive_timelineSelected]:
                                    hasVariant(
                                      variants,
                                      "isActive",
                                      "isActive"
                                    ) &&
                                    hasVariant(
                                      variants,
                                      "timelineSelected",
                                      "timelineSelected"
                                    ),
                                }
                              )}
                            >
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  defaultcss.all,
                                  sty.freeBox__kBcf
                                )}
                              >
                                {(
                                  hasVariant(
                                    variants,
                                    "isActive",
                                    "isActive"
                                  ) &&
                                  hasVariant(
                                    variants,
                                    "timelineSelected",
                                    "timelineSelected"
                                  )
                                    ? false
                                    : true
                                )
                                  ? p.renderPlasmicSlot({
                                      defaultContents: (
                                        <IconPlusIcon
                                          className={classNames(
                                            defaultcss.all,
                                            sty.svg__niToo
                                          )}
                                          role={"img"}
                                        />
                                      ),

                                      value: args.slot,
                                    })
                                  : null}
                                {p.renderPlasmicSlot({
                                  defaultContents: "Metric",
                                  value: args.text2,
                                  className: classNames(sty.slotTargetText2, {
                                    [sty.slotTargetText2__isActive]: hasVariant(
                                      variants,
                                      "isActive",
                                      "isActive"
                                    ),
                                    [sty.slotTargetText2__isActive_timelineSelected]:
                                      hasVariant(
                                        variants,
                                        "isActive",
                                        "isActive"
                                      ) &&
                                      hasVariant(
                                        variants,
                                        "timelineSelected",
                                        "timelineSelected"
                                      ),
                                  }),
                                })}

                                {p.renderPlasmicSlot({
                                  defaultContents: (
                                    <IconCloseIcon
                                      className={classNames(
                                        defaultcss.all,
                                        sty.svg__kMNxX
                                      )}
                                      role={"img"}
                                    />
                                  ),

                                  value: args.children,
                                  className: classNames(sty.slotTargetChildren),
                                })}
                              </p.Stack>
                            </button>
                          ) : null}
                        </div>
                      ) : null}
                    </p.Stack>
                  ) : null}
                </div>

                {(
                  hasVariant(variants, "isActive", "isActive") ? true : false
                ) ? (
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__d8M3B, {
                      [sty.freeBox__isActive__d8M3BvjQpn]: hasVariant(
                        variants,
                        "isActive",
                        "isActive"
                      ),
                    })}
                  >
                    <Button
                      data-plasmic-name={"post"}
                      data-plasmic-override={overrides.post}
                      buttonFeatures={
                        hasVariant(variants, "mobileLayout", "mobileLayout")
                          ? []
                          : hasVariant(variants, "isActive", "isActive") &&
                            hasVariant(globalVariants, "screen", "mobile")
                          ? ["nonFullWidth"]
                          : []
                      }
                      buttonStyle={
                        hasVariant(variants, "isActive", "isActive")
                          ? undefined
                          : ("primaryPurple" as const)
                      }
                      className={classNames("__wab_instance", sty.post, {
                        [sty.post__isActive]: hasVariant(
                          variants,
                          "isActive",
                          "isActive"
                        ),
                        [sty.post__isActive_error_hasError]:
                          hasVariant(variants, "isActive", "isActive") &&
                          hasVariant(variants, "error", "hasError"),
                        [sty.post__isActive_timelineSelected]:
                          hasVariant(variants, "isActive", "isActive") &&
                          hasVariant(
                            variants,
                            "timelineSelected",
                            "timelineSelected"
                          ),
                        [sty.post__mobileLayout]: hasVariant(
                          variants,
                          "mobileLayout",
                          "mobileLayout"
                        ),
                      })}
                      count={"1"}
                      isDisabled={
                        hasVariant(variants, "isActive", "isActive") &&
                        hasVariant(
                          variants,
                          "timelineSelected",
                          "timelineSelected"
                        )
                          ? undefined
                          : hasVariant(variants, "isActive", "isActive") &&
                            hasVariant(variants, "error", "hasError")
                          ? undefined
                          : hasVariant(variants, "isActive", "isActive")
                          ? ("isDisabled" as const)
                          : ("isDisabled" as const)
                      }
                      slot={
                        <IconPlusIcon
                          className={classNames(defaultcss.all, sty.svg__orOwz)}
                          role={"img"}
                        />
                      }
                      text2={"Post"}
                    >
                      <IconSend2Icon
                        className={classNames(defaultcss.all, sty.svg__ljFz)}
                        role={"img"}
                      />
                    </Button>
                  </div>
                ) : null}
              </p.Stack>
            ) : null}
          </p.Stack>
        ) : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "form",
    "editorContainer",
    "title",
    "description",
    "emoji",
    "bulletList",
    "uploadImage",
    "errorMessage",
    "characterLimitIndicator",
    "shareToContainer",
    "text",
    "container",
    "selectedItemsContainer",
    "tags",
    "button",
    "post",
  ],
  form: [
    "form",
    "editorContainer",
    "title",
    "description",
    "emoji",
    "bulletList",
    "uploadImage",
    "errorMessage",
    "characterLimitIndicator",
  ],
  editorContainer: ["editorContainer", "title", "description"],
  title: ["title"],
  description: ["description"],
  emoji: ["emoji"],
  bulletList: ["bulletList"],
  uploadImage: ["uploadImage"],
  errorMessage: ["errorMessage"],
  characterLimitIndicator: ["characterLimitIndicator"],
  shareToContainer: ["shareToContainer", "text"],
  text: ["text"],
  container: ["container", "selectedItemsContainer", "tags", "button"],
  selectedItemsContainer: ["selectedItemsContainer", "tags", "button"],
  tags: ["tags"],
  button: ["button"],
  post: ["post"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  form: "form";
  editorContainer: "div";
  title: "textarea";
  description: "textarea";
  emoji: typeof IconButton;
  bulletList: typeof IconButton;
  uploadImage: typeof IconButton;
  errorMessage: typeof ErrorMessage;
  characterLimitIndicator: typeof IconButton;
  shareToContainer: "div";
  text: "div";
  container: "div";
  selectedItemsContainer: "div";
  tags: typeof Tags;
  button: "button";
  post: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActionBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActionBar__VariantsArgs;
    args?: PlasmicActionBar__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicActionBar__Fetches;
  } & Omit<PlasmicActionBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicActionBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicActionBar__ArgProps,
      internalVariantPropNames: PlasmicActionBar__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicActionBar__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActionBar";
  } else {
    func.displayName = `PlasmicActionBar.${nodeName}`;
  }
  return func;
}

export const PlasmicActionBar = Object.assign(
  // Top-level PlasmicActionBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    editorContainer: makeNodeComponent("editorContainer"),
    title: makeNodeComponent("title"),
    description: makeNodeComponent("description"),
    emoji: makeNodeComponent("emoji"),
    bulletList: makeNodeComponent("bulletList"),
    uploadImage: makeNodeComponent("uploadImage"),
    errorMessage: makeNodeComponent("errorMessage"),
    characterLimitIndicator: makeNodeComponent("characterLimitIndicator"),
    shareToContainer: makeNodeComponent("shareToContainer"),
    text: makeNodeComponent("text"),
    container: makeNodeComponent("container"),
    selectedItemsContainer: makeNodeComponent("selectedItemsContainer"),
    tags: makeNodeComponent("tags"),
    button: makeNodeComponent("button"),
    post: makeNodeComponent("post"),

    // Metadata about props expected for PlasmicActionBar
    internalVariantProps: PlasmicActionBar__VariantProps,
    internalArgProps: PlasmicActionBar__ArgProps,
  }
);

export default PlasmicActionBar;
/* prettier-ignore-end */
