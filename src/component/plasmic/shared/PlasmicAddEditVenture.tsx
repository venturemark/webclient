// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: xICnD3GwL-L
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import InputText from "../../inputtext/index"; // plasmic-import: v0nNSTRV39/component
import InputTextArea from "../../inputtextarea/index"; // plasmic-import: Q2R-U25DUBO/component
import Switch from "../../switch/index"; // plasmic-import: l1Qe8RjaNW/component
import ButtonSetEdit from "../../buttonsetedit/index"; // plasmic-import: pMqUN0f4G_a/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: szbTUtTUfDW81Pi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicAddEditVenture.module.css"; // plasmic-import: xICnD3GwL-L/css

export type PlasmicAddEditVenture__VariantMembers = {
  variantState: "isEdit";
};

export type PlasmicAddEditVenture__VariantsArgs = {
  variantState?: SingleChoiceArg<"isEdit">;
};

type VariantPropType = keyof PlasmicAddEditVenture__VariantsArgs;
export const PlasmicAddEditVenture__VariantProps = new Array<VariantPropType>(
  "variantState"
);

export type PlasmicAddEditVenture__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  children2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAddEditVenture__ArgsType;
export const PlasmicAddEditVenture__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "children2"
);

export type PlasmicAddEditVenture__OverridesType = {
  settings?: p.Flex<"div">;
  inputTextArea?: p.Flex<typeof InputTextArea>;
  _switch?: p.Flex<typeof Switch>;
  buttonSetEdit?: p.Flex<typeof ButtonSetEdit>;
};

export interface DefaultAddEditVentureProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  children2?: React.ReactNode;
  variantState?: SingleChoiceArg<"isEdit">;
  className?: string;
}

function PlasmicAddEditVenture__RenderFunc(props: {
  variants: PlasmicAddEditVenture__VariantsArgs;
  args: PlasmicAddEditVenture__ArgsType;
  overrides: PlasmicAddEditVenture__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"settings"}
      data-plasmic-override={overrides.settings}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.settings,
        {
          [sty.settings__variantState_isEdit]: hasVariant(
            variants,
            "variantState",
            "isEdit"
          ),
        }
      )}
    >
      <div className={classNames(defaultcss.all, sty.box__nqvhu)}>
        {(hasVariant(variants, "variantState", "isEdit") ? false : true) ? (
          <p.PlasmicSlot
            defaultContents={"Create a New Venture"}
            value={args.children}
            className={classNames(sty.slotChildren, {
              [sty.slotChildren__variantState_isEdit]: hasVariant(
                variants,
                "variantState",
                "isEdit"
              ),
            })}
          />
        ) : null}
        {(hasVariant(variants, "variantState", "isEdit") ? true : false) ? (
          <p.PlasmicSlot
            defaultContents={"Edit Venture"}
            value={args.children2}
            className={classNames(sty.slotChildren2, {
              [sty.slotChildren2__variantState_isEdit]: hasVariant(
                variants,
                "variantState",
                "isEdit"
              ),
            })}
          />
        ) : null}
        {(hasVariant(variants, "variantState", "isEdit") ? false : true) ? (
          <p.PlasmicSlot
            defaultContents={"Start a new venture for your timelines."}
            value={args.slot}
          />
        ) : null}
      </div>

      <InputText
        className={classNames("__wab_instance", sty.inputText__bXf6P)}
        hasLabel={"hasLabel" as const}
        label={"Name"}
      />

      <InputTextArea
        data-plasmic-name={"inputTextArea"}
        data-plasmic-override={overrides.inputTextArea}
        className={classNames("__wab_instance", sty.inputTextArea, {
          [sty.inputTextArea__variantState_isEdit]: hasVariant(
            variants,
            "variantState",
            "isEdit"
          ),
        })}
        hasLabel={"hasLabel" as const}
        hasTextHelper={"hasTextHelper" as const}
        label={"Description"}
      >
        {"Tell us a little bit about your venture."}
      </InputTextArea>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__uCWf, {
          [sty.box__variantState_isEdit__uCWf2IFcI]: hasVariant(
            variants,
            "variantState",
            "isEdit"
          ),
        })}
      >
        <InputText
          hasLabel={"hasLabel" as const}
          hasTextHelper={"hasTextHelper" as const}
          label={"Custom URL"}
        >
          {"Enter in a URL name for this venture"}
        </InputText>

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box___8V79Q,
            {
              [sty.box__variantState_isEdit___8V79Q2IFcI]: hasVariant(
                variants,
                "variantState",
                "isEdit"
              ),
            }
          )}
        >
          {".venturemark.co"}
        </div>
      </p.Stack>

      <div className={classNames(defaultcss.all, sty.box__katKc)}>
        <p.PlasmicSlot
          defaultContents={"Permissions"}
          value={args.slot2}
          className={classNames(sty.slotSlot2)}
        />
      </div>

      <Switch
        data-plasmic-name={"_switch"}
        data-plasmic-override={overrides._switch}
        className={classNames("__wab_instance", sty._switch, {
          [sty._switch__variantState_isEdit]: hasVariant(
            variants,
            "variantState",
            "isEdit"
          ),
        })}
        variantSettings={["hasLabel"]}
      />

      <ButtonSetEdit
        data-plasmic-name={"buttonSetEdit"}
        data-plasmic-override={overrides.buttonSetEdit}
        className={classNames("__wab_instance", sty.buttonSetEdit, {
          [sty.buttonSetEdit__variantState_isEdit]: hasVariant(
            variants,
            "variantState",
            "isEdit"
          ),
        })}
        variantState={
          hasVariant(variants, "variantState", "isEdit") &&
          hasVariant(globalVariants, "screen", "mobile")
            ? ("isEdit" as const)
            : hasVariant(variants, "variantState", "isEdit")
            ? ("isEdit" as const)
            : undefined
        }
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  settings: ["settings", "inputTextArea", "_switch", "buttonSetEdit"],
  inputTextArea: ["inputTextArea"],
  _switch: ["_switch"],
  buttonSetEdit: ["buttonSetEdit"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  settings: "div";
  inputTextArea: typeof InputTextArea;
  _switch: typeof Switch;
  buttonSetEdit: typeof ButtonSetEdit;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAddEditVenture__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicAddEditVenture__VariantsArgs;
  args?: PlasmicAddEditVenture__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicAddEditVenture__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicAddEditVenture__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAddEditVenture__ArgProps,
      internalVariantPropNames: PlasmicAddEditVenture__VariantProps,
    });

    return PlasmicAddEditVenture__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "settings") {
    func.displayName = "PlasmicAddEditVenture";
  } else {
    func.displayName = `PlasmicAddEditVenture.${nodeName}`;
  }
  return func;
}

export const PlasmicAddEditVenture = Object.assign(
  // Top-level PlasmicAddEditVenture renders the root element
  makeNodeComponent("settings"),
  {
    // Helper components rendering sub-elements
    inputTextArea: makeNodeComponent("inputTextArea"),
    _switch: makeNodeComponent("_switch"),
    buttonSetEdit: makeNodeComponent("buttonSetEdit"),

    // Metadata about props expected for PlasmicAddEditVenture
    internalVariantProps: PlasmicAddEditVenture__VariantProps,
    internalArgProps: PlasmicAddEditVenture__ArgProps,
  }
);

export default PlasmicAddEditVenture;
/* prettier-ignore-end */
