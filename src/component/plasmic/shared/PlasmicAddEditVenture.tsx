// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: xICnD3GwL-L
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import InputText from "../../inputtext/index"; // plasmic-import: v0nNSTRV39/component
import InputTextArea from "../../inputtextarea/index"; // plasmic-import: Q2R-U25DUBO/component
import Switch from "../../switch/index"; // plasmic-import: l1Qe8RjaNW/component
import Button from "../../button/index"; // plasmic-import: JU1t0P9pFY/component

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicAddEditVenture.module.css"; // plasmic-import: xICnD3GwL-L/css

import IconPlusIcon from "./icons/PlasmicIcon__IconPlus"; // plasmic-import: B5QLKmr2tW/icon
import IconRightIcon from "./icons/PlasmicIcon__IconRight"; // plasmic-import: v822ZhrBq/icon

export type PlasmicAddEditVenture__VariantMembers = {};

export type PlasmicAddEditVenture__VariantsArgs = {};
type VariantPropType = keyof PlasmicAddEditVenture__VariantsArgs;
export const PlasmicAddEditVenture__VariantProps = new Array<VariantPropType>();

export type PlasmicAddEditVenture__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAddEditVenture__ArgsType;
export const PlasmicAddEditVenture__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicAddEditVenture__OverridesType = {
  settings?: p.Flex<"div">;
  inputTextArea?: p.Flex<typeof InputTextArea>;
  _switch?: p.Flex<typeof Switch>;
  button?: p.Flex<typeof Button>;
  text2?: p.Flex<"div">;
};

export interface DefaultAddEditVentureProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  className?: string;
}

function PlasmicAddEditVenture__RenderFunc(props: {
  variants: PlasmicAddEditVenture__VariantsArgs;
  args: PlasmicAddEditVenture__ArgsType;
  overrides: PlasmicAddEditVenture__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"settings"}
      data-plasmic-override={overrides.settings}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.settings
      )}
    >
      <div className={classNames(defaultcss.all, sty.box__nqvhu)}>
        <p.PlasmicSlot
          defaultContents={"Create a New Venture"}
          value={args.children}
          className={classNames(sty.slotChildren)}
        />

        <p.PlasmicSlot
          defaultContents={"Start a new venture for your timelines."}
          value={args.slot}
        />
      </div>

      <InputText
        className={classNames("__wab_instance", sty.inputText__bXf6P)}
        input={
          <input
            className={classNames(defaultcss.input, sty.textbox__p4EWi)}
            placeholder={"" as const}
            size={1 as const}
            title={"" as const}
            type={"text" as const}
            value={"" as const}
          />
        }
        label={"Name"}
      />

      <InputTextArea
        data-plasmic-name={"inputTextArea"}
        data-plasmic-override={overrides.inputTextArea}
        className={classNames("__wab_instance", sty.inputTextArea)}
        hasTextHelper={"hasTextHelper" as const}
        label={"Description"}
      >
        {"Tell us a little bit about your venture."}
      </InputTextArea>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__uCWf)}
      >
        <InputText
          input={
            <input
              className={classNames(defaultcss.input, sty.textbox__hONdq)}
              placeholder={" " as const}
              size={1 as const}
              title={"" as const}
              type={"text" as const}
            />
          }
          label={"Custom URL"}
        >
          {"Text Helper Description"}
        </InputText>

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box___8V79Q
          )}
        >
          {".venturemark.co"}
        </div>
      </p.Stack>

      <div className={classNames(defaultcss.all, sty.box__katKc)}>
        <p.PlasmicSlot
          defaultContents={"Permissions"}
          value={args.slot2}
          className={classNames(sty.slotSlot2)}
        />
      </div>

      <Switch
        data-plasmic-name={"_switch"}
        data-plasmic-override={overrides._switch}
        className={classNames("__wab_instance", sty._switch)}
        variantSettings={["hasLabel"]}
      />

      <div className={classNames(defaultcss.all, sty.box___9CoNs)}>
        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          buttonStyle={"primaryPurple" as const}
          count={"1"}
          slot={
            <IconPlusIcon
              className={classNames(defaultcss.all, sty.svg__ogZaY)}
              role={"img"}
            />
          }
          text2={
            <div
              data-plasmic-name={"text2"}
              data-plasmic-override={overrides.text2}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text2
              )}
            >
              {"Create"}
            </div>
          }
        >
          <IconRightIcon
            className={classNames(defaultcss.all, sty.svg__f4Aw)}
            role={"img"}
          />
        </Button>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  settings: ["settings", "inputTextArea", "_switch", "button", "text2"],
  inputTextArea: ["inputTextArea"],
  _switch: ["_switch"],
  button: ["button", "text2"],
  text2: ["text2"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  settings: "div";
  inputTextArea: typeof InputTextArea;
  _switch: typeof Switch;
  button: typeof Button;
  text2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAddEditVenture__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicAddEditVenture__VariantsArgs;
  args?: PlasmicAddEditVenture__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicAddEditVenture__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicAddEditVenture__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAddEditVenture__ArgProps,
      internalVariantPropNames: PlasmicAddEditVenture__VariantProps,
    });

    return PlasmicAddEditVenture__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "settings") {
    func.displayName = "PlasmicAddEditVenture";
  } else {
    func.displayName = `PlasmicAddEditVenture.${nodeName}`;
  }
  return func;
}

export const PlasmicAddEditVenture = Object.assign(
  // Top-level PlasmicAddEditVenture renders the root element
  makeNodeComponent("settings"),
  {
    // Helper components rendering sub-elements
    inputTextArea: makeNodeComponent("inputTextArea"),
    _switch: makeNodeComponent("_switch"),
    button: makeNodeComponent("button"),
    text2: makeNodeComponent("text2"),

    // Metadata about props expected for PlasmicAddEditVenture
    internalVariantProps: PlasmicAddEditVenture__VariantProps,
    internalArgProps: PlasmicAddEditVenture__ArgProps,
  }
);

export default PlasmicAddEditVenture;
/* prettier-ignore-end */
