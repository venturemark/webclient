// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: l1Qe8RjaNW
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicButtonToggleSwitcher.module.css"; // plasmic-import: l1Qe8RjaNW/css

export type PlasmicButtonToggleSwitcher__VariantMembers = {
  isSelected: "isSelected";
};

export type PlasmicButtonToggleSwitcher__VariantsArgs = {
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
};

type VariantPropType = keyof PlasmicButtonToggleSwitcher__VariantsArgs;
export const PlasmicButtonToggleSwitcher__VariantProps = new Array<VariantPropType>(
  "isSelected"
);

export type PlasmicButtonToggleSwitcher__ArgsType = {};
type ArgPropType = keyof PlasmicButtonToggleSwitcher__ArgsType;
export const PlasmicButtonToggleSwitcher__ArgProps = new Array<ArgPropType>();

export type PlasmicButtonToggleSwitcher__OverridesType = {
  switcher?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultButtonToggleSwitcherProps {
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  className?: string;
}

function PlasmicButtonToggleSwitcher__RenderFunc(props: {
  variants: PlasmicButtonToggleSwitcher__VariantsArgs;
  args: PlasmicButtonToggleSwitcher__ArgsType;
  overrides: PlasmicButtonToggleSwitcher__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"switcher"}
      data-plasmic-override={overrides.switcher}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.switcher,
        {
          [sty.switcher__isSelected]: hasVariant(
            variants,
            "isSelected",
            "isSelected"
          ),
        }
      )}
    >
      <svg
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(defaultcss.all, sty.svg, {
          [sty.svg__isSelected]: hasVariant(
            variants,
            "isSelected",
            "isSelected"
          ),
        })}
        role={"img"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  switcher: ["switcher", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  switcher: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButtonToggleSwitcher__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicButtonToggleSwitcher__VariantsArgs;
  args?: PlasmicButtonToggleSwitcher__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicButtonToggleSwitcher__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicButtonToggleSwitcher__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButtonToggleSwitcher__ArgProps,
      internalVariantPropNames: PlasmicButtonToggleSwitcher__VariantProps,
    });

    return PlasmicButtonToggleSwitcher__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "switcher") {
    func.displayName = "PlasmicButtonToggleSwitcher";
  } else {
    func.displayName = `PlasmicButtonToggleSwitcher.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonToggleSwitcher = Object.assign(
  // Top-level PlasmicButtonToggleSwitcher renders the root element
  makeNodeComponent("switcher"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicButtonToggleSwitcher
    internalVariantProps: PlasmicButtonToggleSwitcher__VariantProps,
    internalArgProps: PlasmicButtonToggleSwitcher__ArgProps,
  }
);

export default PlasmicButtonToggleSwitcher;
/* prettier-ignore-end */
