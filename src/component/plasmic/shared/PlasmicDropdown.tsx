// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: Umq3CDOCIR
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import ListItem from "../../listitem/index"; // plasmic-import: q8aEgDsN8_/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import * as sty from "./PlasmicDropdown.module.css"; // plasmic-import: Umq3CDOCIR/css

export type PlasmicDropdown__VariantMembers = {};

export type PlasmicDropdown__VariantsArgs = {};
type VariantPropType = keyof PlasmicDropdown__VariantsArgs;
export const PlasmicDropdown__VariantProps = new Array<VariantPropType>();

export type PlasmicDropdown__ArgsType = {
  rename2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicDropdown__ArgsType;
export const PlasmicDropdown__ArgProps = new Array<ArgPropType>("rename2");

export type PlasmicDropdown__OverridesType = {
  root?: p.Flex<"div">;
  rectangle574?: p.Flex<"div">;
  ul?: p.Flex<"ul">;
  listItem?: p.Flex<typeof ListItem>;
};

export interface DefaultDropdownProps {
  rename2?: React.ReactNode;
  className?: string;
}

function PlasmicDropdown__RenderFunc(props: {
  variants: PlasmicDropdown__VariantsArgs;
  args: PlasmicDropdown__ArgsType;
  overrides: PlasmicDropdown__OverridesType;
  dataFetches?: PlasmicDropdown__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"rectangle574"}
        data-plasmic-override={overrides.rectangle574}
        className={classNames(defaultcss.all, sty.rectangle574)}
      >
        <p.Stack
          as={"ul"}
          data-plasmic-name={"ul"}
          data-plasmic-override={overrides.ul}
          hasGap={true}
          className={classNames(defaultcss.ul, sty.ul)}
        >
          <ListItem
            data-plasmic-name={"listItem"}
            data-plasmic-override={overrides.listItem}
            className={classNames("__wab_instance", sty.listItem)}
            rename={p.renderPlasmicSlot({
              defaultContents: "Archive",
              value: args.rename2,
            })}
          />
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "rectangle574", "ul", "listItem"],
  rectangle574: ["rectangle574", "ul", "listItem"],
  ul: ["ul", "listItem"],
  listItem: ["listItem"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  rectangle574: "div";
  ul: "ul";
  listItem: typeof ListItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDropdown__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDropdown__VariantsArgs;
    args?: PlasmicDropdown__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicDropdown__Fetches;
  } & Omit<PlasmicDropdown__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDropdown__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDropdown__ArgProps,
      internalVariantPropNames: PlasmicDropdown__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicDropdown__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDropdown";
  } else {
    func.displayName = `PlasmicDropdown.${nodeName}`;
  }
  return func;
}

export const PlasmicDropdown = Object.assign(
  // Top-level PlasmicDropdown renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    rectangle574: makeNodeComponent("rectangle574"),
    ul: makeNodeComponent("ul"),
    listItem: makeNodeComponent("listItem"),

    // Metadata about props expected for PlasmicDropdown
    internalVariantProps: PlasmicDropdown__VariantProps,
    internalArgProps: PlasmicDropdown__ArgProps,
  }
);

export default PlasmicDropdown;
/* prettier-ignore-end */
