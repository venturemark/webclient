// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: Fs8bTUrvZrvfhCr
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import ActionBar from "../../actionbar/index"; // plasmic-import: eUnRsS9UXR/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicFeedUpdate.module.css"; // plasmic-import: Fs8bTUrvZrvfhCr/css

import IconPlusIcon from "./icons/PlasmicIcon__IconPlus"; // plasmic-import: B5QLKmr2tW/icon
import IconCloseIcon from "./icons/PlasmicIcon__IconClose"; // plasmic-import: v016HsKmfL/icon

export type PlasmicFeedUpdate__VariantMembers = {
  isOwner: "isOwner";
  isPublic: "isPublic";
};

export type PlasmicFeedUpdate__VariantsArgs = {
  isOwner?: SingleBooleanChoiceArg<"isOwner">;
  isPublic?: SingleBooleanChoiceArg<"isPublic">;
};

type VariantPropType = keyof PlasmicFeedUpdate__VariantsArgs;
export const PlasmicFeedUpdate__VariantProps = new Array<VariantPropType>(
  "isOwner",
  "isPublic"
);

export type PlasmicFeedUpdate__ArgsType = {};
type ArgPropType = keyof PlasmicFeedUpdate__ArgsType;
export const PlasmicFeedUpdate__ArgProps = new Array<ArgPropType>();

export type PlasmicFeedUpdate__OverridesType = {
  root?: p.Flex<"div">;
  feedContainer?: p.Flex<"div">;
};

export interface DefaultFeedUpdateProps {
  isOwner?: SingleBooleanChoiceArg<"isOwner">;
  isPublic?: SingleBooleanChoiceArg<"isPublic">;
  className?: string;
}

function PlasmicFeedUpdate__RenderFunc(props: {
  variants: PlasmicFeedUpdate__VariantsArgs;
  args: PlasmicFeedUpdate__ArgsType;
  overrides: PlasmicFeedUpdate__OverridesType;
  dataFetches?: PlasmicFeedUpdate__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      {(
        hasVariant(variants, "isPublic", "isPublic")
          ? true
          : hasVariant(variants, "isOwner", "isOwner")
          ? true
          : false
      ) ? (
        <ActionBar
          className={classNames("__wab_instance", sty.actionBar__wJeXh, {
            [sty.actionBar__isOwner__wJeXh9Te3O]: hasVariant(
              variants,
              "isOwner",
              "isOwner"
            ),
            [sty.actionBar__isPublic__wJeXhYCnHl]: hasVariant(
              variants,
              "isPublic",
              "isPublic"
            ),
          })}
          postType={"isActive" as const}
        />
      ) : null}
      {(hasVariant(variants, "isOwner", "isOwner") ? true : false) ? (
        <ActionBar
          className={classNames("__wab_instance", sty.actionBar__dhhrd, {
            [sty.actionBar__isOwner__dhhrd9Te3O]: hasVariant(
              variants,
              "isOwner",
              "isOwner"
            ),
          })}
          content={["hasDescription"]}
          isOwner={"isOwner" as const}
          postType={"isPosted" as const}
        />
      ) : null}
      {(hasVariant(variants, "isOwner", "isOwner") ? true : false) ? (
        <ActionBar
          className={classNames("__wab_instance", sty.actionBar___8UKK, {
            [sty.actionBar__isOwner___8UKK9Te3O]: hasVariant(
              variants,
              "isOwner",
              "isOwner"
            ),
          })}
          postType={"isPosted" as const}
        />
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"feedContainer"}
        data-plasmic-override={overrides.feedContainer}
        hasGap={true}
        className={classNames(projectcss.all, sty.feedContainer)}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "feedContainer"],
  feedContainer: ["feedContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  feedContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeedUpdate__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeedUpdate__VariantsArgs;
    args?: PlasmicFeedUpdate__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFeedUpdate__Fetches;
  } & Omit<PlasmicFeedUpdate__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFeedUpdate__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFeedUpdate__ArgProps,
      internalVariantPropNames: PlasmicFeedUpdate__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicFeedUpdate__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeedUpdate";
  } else {
    func.displayName = `PlasmicFeedUpdate.${nodeName}`;
  }
  return func;
}

export const PlasmicFeedUpdate = Object.assign(
  // Top-level PlasmicFeedUpdate renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    feedContainer: makeNodeComponent("feedContainer"),

    // Metadata about props expected for PlasmicFeedUpdate
    internalVariantProps: PlasmicFeedUpdate__VariantProps,
    internalArgProps: PlasmicFeedUpdate__ArgProps,
  }
);

export default PlasmicFeedUpdate;
/* prettier-ignore-end */
