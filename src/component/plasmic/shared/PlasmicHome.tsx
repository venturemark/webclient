// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: cRgEcIgCT1
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Header from "../../header/index"; // plasmic-import: MkyvVOg5Ik/component
import Sidebar from "../../sidebar/index"; // plasmic-import: FZWTu4L61t/component
import MainHeader from "../../mainheader/index"; // plasmic-import: LRwT0lHdps/component
import ActionBar from "../../actionbar/index"; // plasmic-import: eUnRsS9UXR/component
import Update from "../../update/index"; // plasmic-import: Fs8bTUrvZrvfhCr/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: szbTUtTUfDW81Pi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: cRgEcIgCT1/css

import IconPlusIcon from "./icons/PlasmicIcon__IconPlus"; // plasmic-import: B5QLKmr2tW/icon
import IconCloseIcon from "./icons/PlasmicIcon__IconClose"; // plasmic-import: v016HsKmfL/icon

export type PlasmicHome__VariantMembers = {};

export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  sidebar?: p.Flex<typeof Sidebar>;
  main2?: p.Flex<"div">;
  container?: p.Flex<"div">;
  mainHeader?: p.Flex<typeof MainHeader>;
  updatesContainer?: p.Flex<"div">;
  actionBar?: p.Flex<typeof ActionBar>;
};

export interface DefaultHomeProps {
  className?: string;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  });

  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div className={classNames(defaultcss.all, sty.box___70Att)}>
            {(hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
              <Sidebar
                data-plasmic-name={"sidebar"}
                data-plasmic-override={overrides.sidebar}
                className={classNames("__wab_instance", sty.sidebar)}
              />
            ) : null}

            <div
              data-plasmic-name={"main2"}
              data-plasmic-override={overrides.main2}
              className={classNames(defaultcss.all, sty.main2)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"container"}
                data-plasmic-override={overrides.container}
                hasGap={true}
                className={classNames(defaultcss.all, sty.container)}
              >
                <MainHeader
                  data-plasmic-name={"mainHeader"}
                  data-plasmic-override={overrides.mainHeader}
                  className={classNames("__wab_instance", sty.mainHeader)}
                  headerStyles={"timelineSubHeader" as const}
                  timelineDescription={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__taWsq
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tablet")
                        ? "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec nec volutpat magna."
                        : "Lorem ipsum dolor sit amet, consectetur adipiscing elit. \nDonec nec volutpat magna."}
                    </div>
                  }
                  timelineName={"Wins"}
                />

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"updatesContainer"}
                  data-plasmic-override={overrides.updatesContainer}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.updatesContainer)}
                >
                  <ActionBar
                    data-plasmic-name={"actionBar"}
                    data-plasmic-override={overrides.actionBar}
                    className={classNames("__wab_instance", sty.actionBar)}
                  />

                  <Update
                    className={classNames("__wab_instance", sty.update__ofZlh)}
                  />

                  <Update />

                  <Update
                    className={classNames("__wab_instance", sty.update__lnRaY)}
                  />
                </p.Stack>
              </p.Stack>

              <div className={classNames(defaultcss.all, sty.box__a6FcE)} />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "sidebar",
    "main2",
    "container",
    "mainHeader",
    "updatesContainer",
    "actionBar",
  ],

  header: ["header"],
  sidebar: ["sidebar"],
  main2: ["main2", "container", "mainHeader", "updatesContainer", "actionBar"],
  container: ["container", "mainHeader", "updatesContainer", "actionBar"],
  mainHeader: ["mainHeader"],
  updatesContainer: ["updatesContainer", "actionBar"],
  actionBar: ["actionBar"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  sidebar: typeof Sidebar;
  main2: "div";
  container: "div";
  mainHeader: typeof MainHeader;
  updatesContainer: "div";
  actionBar: typeof ActionBar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicHome__VariantsArgs;
  args?: PlasmicHome__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicHome__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps,
    });

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sidebar: makeNodeComponent("sidebar"),
    main2: makeNodeComponent("main2"),
    container: makeNodeComponent("container"),
    mainHeader: makeNodeComponent("mainHeader"),
    updatesContainer: makeNodeComponent("updatesContainer"),
    actionBar: makeNodeComponent("actionBar"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
