// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: cRgEcIgCT1
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Modal from "../../modal/index"; // plasmic-import: Rd6ctyxKvRM/component
import Sidebar from "../../sidebar/index"; // plasmic-import: FZWTu4L61t/component
import Header from "../../header/index"; // plasmic-import: MkyvVOg5Ik/component
import Main from "../../main/index"; // plasmic-import: 0c6QSqHYCk/component
import PostDetails from "../../postdetails/index"; // plasmic-import: 1E73LSzV2l/component

import { useScreenVariants as useScreenVariantsszbTUtTUfDw81Pi } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: szbTUtTUfDW81Pi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: cRgEcIgCT1/css

export type PlasmicHome__VariantMembers = {
  isVisible:
    | "postDetails"
    | "mobileSidebar"
    | "showProfileModal"
    | "isPublic"
    | "showShareModal";
};

export type PlasmicHome__VariantsArgs = {
  isVisible?: MultiChoiceArg<
    | "postDetails"
    | "mobileSidebar"
    | "showProfileModal"
    | "isPublic"
    | "showShareModal"
  >;
};

type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>(
  "isVisible"
);

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  modal?: p.Flex<typeof Modal>;
  sidebar?: p.Flex<typeof Sidebar>;
  text?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  mainContainer?: p.Flex<"div">;
  main?: p.Flex<typeof Main>;
  postDetails?: p.Flex<typeof PostDetails>;
};

export interface DefaultHomeProps {
  isVisible?: MultiChoiceArg<
    | "postDetails"
    | "mobileSidebar"
    | "showProfileModal"
    | "isPublic"
    | "showShareModal"
  >;
  className?: string;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsszbTUtTUfDw81Pi(),
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root,
            {
              [sty.rootisVisible_isPublic]: hasVariant(
                variants,
                "isVisible",
                "isPublic"
              ),
              [sty.rootisVisible_mobileSidebar]: hasVariant(
                variants,
                "isVisible",
                "mobileSidebar"
              ),
              [sty.rootisVisible_postDetails]: hasVariant(
                variants,
                "isVisible",
                "postDetails"
              ),
              [sty.rootisVisible_showProfileModal]: hasVariant(
                variants,
                "isVisible",
                "showProfileModal"
              ),
              [sty.rootisVisible_showShareModal]: hasVariant(
                variants,
                "isVisible",
                "showShareModal"
              ),
            }
          )}
        >
          {(
            hasVariant(variants, "isVisible", "showShareModal")
              ? true
              : hasVariant(variants, "isVisible", "showProfileModal")
              ? true
              : false
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__bSzQ, {
                [sty.freeBoxisVisible_showProfileModal__bSzQvxFZh]: hasVariant(
                  variants,
                  "isVisible",
                  "showProfileModal"
                ),
                [sty.freeBoxisVisible_showShareModal__bSzQyRvLm]: hasVariant(
                  variants,
                  "isVisible",
                  "showShareModal"
                ),
              })}
            >
              {(
                hasVariant(variants, "isVisible", "showShareModal")
                  ? true
                  : hasVariant(variants, "isVisible", "showProfileModal")
                  ? true
                  : false
              ) ? (
                <Modal
                  data-plasmic-name={"modal"}
                  data-plasmic-override={overrides.modal}
                  className={classNames("__wab_instance", sty.modal, {
                    [sty.modalisVisible_showProfileModal]: hasVariant(
                      variants,
                      "isVisible",
                      "showProfileModal"
                    ),
                    [sty.modalisVisible_showShareModal]: hasVariant(
                      variants,
                      "isVisible",
                      "showShareModal"
                    ),
                  })}
                  modalType={
                    hasVariant(variants, "isVisible", "showShareModal")
                      ? ("shareModal" as const)
                      : hasVariant(variants, "isVisible", "showProfileModal")
                      ? ("editProfile" as const)
                      : undefined
                  }
                />
              ) : null}
            </div>
          ) : null}

          <div
            className={classNames(projectcss.all, sty.freeBox___70Att, {
              [sty.freeBoxisVisible_isPublic___70AttunhQv]: hasVariant(
                variants,
                "isVisible",
                "isPublic"
              ),
              [sty.freeBoxisVisible_mobileSidebar___70AttO6F5A]: hasVariant(
                variants,
                "isVisible",
                "mobileSidebar"
              ),
              [sty.freeBoxisVisible_postDetails___70AttbZmLb]: hasVariant(
                variants,
                "isVisible",
                "postDetails"
              ),
            })}
          >
            {(
              hasVariant(variants, "isVisible", "isPublic") &&
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant(variants, "isVisible", "isPublic")
                ? true
                : hasVariant(variants, "isVisible", "mobileSidebar")
                ? true
                : hasVariant(globalVariants, "screen", "mobile")
                ? false
                : true
            ) ? (
              <Sidebar
                data-plasmic-name={"sidebar"}
                data-plasmic-override={overrides.sidebar}
                className={classNames("__wab_instance", sty.sidebar, {
                  [sty.sidebarisVisible_isPublic]: hasVariant(
                    variants,
                    "isVisible",
                    "isPublic"
                  ),
                  [sty.sidebarisVisible_mobileSidebar]: hasVariant(
                    variants,
                    "isVisible",
                    "mobileSidebar"
                  ),
                  [sty.sidebarisVisible_mobileSidebar_isVisible_postDetails]:
                    hasVariant(variants, "isVisible", "mobileSidebar") &&
                    hasVariant(variants, "isVisible", "postDetails"),
                  [sty.sidebarisVisible_postDetails]: hasVariant(
                    variants,
                    "isVisible",
                    "postDetails"
                  ),
                })}
                hasInput={true}
                isPublic={
                  hasVariant(variants, "isVisible", "isPublic")
                    ? true
                    : undefined
                }
                userName={
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Name"}
                  </div>
                }
              />
            ) : null}

            <div
              className={classNames(projectcss.all, sty.freeBox__cJlKh, {
                [sty.freeBoxisVisible_isPublic__cJlKhunhQv]: hasVariant(
                  variants,
                  "isVisible",
                  "isPublic"
                ),
                [sty.freeBoxisVisible_postDetails__cJlKhbZmLb]: hasVariant(
                  variants,
                  "isVisible",
                  "postDetails"
                ),
              })}
            >
              <Header
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames("__wab_instance", sty.header, {
                  [sty.headerisVisible_postDetails]: hasVariant(
                    variants,
                    "isVisible",
                    "postDetails"
                  ),
                })}
                views={"userAccount" as const}
              />

              <div
                data-plasmic-name={"mainContainer"}
                data-plasmic-override={overrides.mainContainer}
                className={classNames(projectcss.all, sty.mainContainer, {
                  [sty.mainContainerisVisible_isPublic]: hasVariant(
                    variants,
                    "isVisible",
                    "isPublic"
                  ),
                  [sty.mainContainerisVisible_mobileSidebar]: hasVariant(
                    variants,
                    "isVisible",
                    "mobileSidebar"
                  ),
                  [sty.mainContainerisVisible_postDetails]: hasVariant(
                    variants,
                    "isVisible",
                    "postDetails"
                  ),
                })}
              >
                <Main
                  data-plasmic-name={"main"}
                  data-plasmic-override={overrides.main}
                  className={classNames("__wab_instance", sty.main, {
                    [sty.mainisVisible_isPublic]: hasVariant(
                      variants,
                      "isVisible",
                      "isPublic"
                    ),
                    [sty.mainisVisible_mobileSidebar]: hasVariant(
                      variants,
                      "isVisible",
                      "mobileSidebar"
                    ),
                    [sty.mainisVisible_postDetails]: hasVariant(
                      variants,
                      "isVisible",
                      "postDetails"
                    ),
                  })}
                  isActive={
                    hasVariant(variants, "isVisible", "isPublic")
                      ? ("feed" as const)
                      : hasVariant(variants, "isVisible", "postDetails")
                      ? ("feed" as const)
                      : ("settings" as const)
                  }
                  isOwner={
                    hasVariant(variants, "isVisible", "isPublic")
                      ? undefined
                      : true
                  }
                  isPublic={
                    hasVariant(variants, "isVisible", "isPublic")
                      ? true
                      : undefined
                  }
                  variantType={
                    hasVariant(variants, "isVisible", "isPublic")
                      ? ("isVenture" as const)
                      : ("isTimeline" as const)
                  }
                />
              </div>

              {(
                hasVariant(variants, "isVisible", "postDetails")
                  ? true
                  : hasVariant(globalVariants, "screen", "desktopLarge")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___49Hi7, {
                    [sty.freeBoxisVisible_postDetails___49Hi7BZmLb]: hasVariant(
                      variants,
                      "isVisible",
                      "postDetails"
                    ),
                  })}
                >
                  {(
                    hasVariant(variants, "isVisible", "postDetails")
                      ? true
                      : true
                  ) ? (
                    <PostDetails
                      data-plasmic-name={"postDetails"}
                      data-plasmic-override={overrides.postDetails}
                      className={classNames("__wab_instance", sty.postDetails, {
                        [sty.postDetailsisVisible_postDetails]: hasVariant(
                          variants,
                          "isVisible",
                          "postDetails"
                        ),
                      })}
                    />
                  ) : null}
                </div>
              ) : null}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "modal",
    "sidebar",
    "text",
    "header",
    "mainContainer",
    "main",
    "postDetails",
  ],
  modal: ["modal"],
  sidebar: ["sidebar", "text"],
  text: ["text"],
  header: ["header"],
  mainContainer: ["mainContainer", "main"],
  main: ["main"],
  postDetails: ["postDetails"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  modal: typeof Modal;
  sidebar: typeof Sidebar;
  text: "div";
  header: typeof Header;
  mainContainer: "div";
  main: typeof Main;
  postDetails: typeof PostDetails;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps,
    });

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    sidebar: makeNodeComponent("sidebar"),
    text: makeNodeComponent("text"),
    header: makeNodeComponent("header"),
    mainContainer: makeNodeComponent("mainContainer"),
    main: makeNodeComponent("main"),
    postDetails: makeNodeComponent("postDetails"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
