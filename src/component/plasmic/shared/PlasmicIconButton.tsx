// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: UIpuE7M1YY
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicIconButton.module.css"; // plasmic-import: UIpuE7M1YY/css

import IconFeedIcon from "./icons/PlasmicIcon__IconFeed"; // plasmic-import: gkIqWTG_m/icon

export type PlasmicIconButton__VariantMembers = {
  iconSize: "large";
  isActive: "isActive";
  greenBgHover: "greenBgHover";
};

export type PlasmicIconButton__VariantsArgs = {
  iconSize?: SingleChoiceArg<"large">;
  isActive?: SingleBooleanChoiceArg<"isActive">;
  greenBgHover?: SingleBooleanChoiceArg<"greenBgHover">;
};

type VariantPropType = keyof PlasmicIconButton__VariantsArgs;
export const PlasmicIconButton__VariantProps = new Array<VariantPropType>(
  "iconSize",
  "isActive",
  "greenBgHover"
);

export type PlasmicIconButton__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicIconButton__ArgsType;
export const PlasmicIconButton__ArgProps = new Array<ArgPropType>("children");

export type PlasmicIconButton__OverridesType = {
  root?: p.Flex<"div">;
  container?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultIconButtonProps {
  children?: React.ReactNode;
  iconSize?: SingleChoiceArg<"large">;
  isActive?: SingleBooleanChoiceArg<"isActive">;
  greenBgHover?: SingleBooleanChoiceArg<"greenBgHover">;
  className?: string;
}

function PlasmicIconButton__RenderFunc(props: {
  variants: PlasmicIconButton__VariantsArgs;
  args: PlasmicIconButton__ArgsType;
  overrides: PlasmicIconButton__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__greenBgHover]: hasVariant(
          variants,
          "greenBgHover",
          "greenBgHover"
        ),
        [sty.root__isActive]: hasVariant(variants, "isActive", "isActive"),
      })}
    >
      <div
        data-plasmic-name={"container"}
        data-plasmic-override={overrides.container}
        className={classNames(defaultcss.all, sty.container, {
          [sty.container__greenBgHover]: hasVariant(
            variants,
            "greenBgHover",
            "greenBgHover"
          ),
          [sty.container__iconSize_large]: hasVariant(
            variants,
            "iconSize",
            "large"
          ),
          [sty.container__isActive]: hasVariant(
            variants,
            "isActive",
            "isActive"
          ),
        })}
      >
        <p.PlasmicSlot
          defaultContents={
            <IconFeedIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(defaultcss.all, sty.svg)}
              role={"img"}
            />
          }
          value={args.children}
          className={classNames(sty.slotChildren, {
            [sty.slotChildren__greenBgHover]: hasVariant(
              variants,
              "greenBgHover",
              "greenBgHover"
            ),
            [sty.slotChildren__iconSize_large]: hasVariant(
              variants,
              "iconSize",
              "large"
            ),
          })}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "container", "svg"],
  container: ["container", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  container: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIconButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicIconButton__VariantsArgs;
  args?: PlasmicIconButton__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicIconButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicIconButton__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicIconButton__ArgProps,
      internalVariantPropNames: PlasmicIconButton__VariantProps,
    });

    return PlasmicIconButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIconButton";
  } else {
    func.displayName = `PlasmicIconButton.${nodeName}`;
  }
  return func;
}

export const PlasmicIconButton = Object.assign(
  // Top-level PlasmicIconButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicIconButton
    internalVariantProps: PlasmicIconButton__VariantProps,
    internalArgProps: PlasmicIconButton__ArgProps,
  }
);

export default PlasmicIconButton;
/* prettier-ignore-end */
