// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: v0nNSTRV39
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import ErrorMessage from "../../errormessage/index"; // plasmic-import: X8H70YUTyF/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicInputText.module.css"; // plasmic-import: v0nNSTRV39/css

import IconHashIcon from "./icons/PlasmicIcon__IconHash"; // plasmic-import: AVLV6uMr56/icon
import IconCautionIcon from "./icons/PlasmicIcon__IconCaution"; // plasmic-import: 9xu35mhQf/icon

export type PlasmicInputText__VariantMembers = {
  hasTextHelper: "hasTextHelper";
  error: "error";
  hasLabel: "hasLabel";
  isDisabled: "isDisabled";
  hasLeftIcon: "hasLeftIcon";
};

export type PlasmicInputText__VariantsArgs = {
  hasTextHelper?: SingleBooleanChoiceArg<"hasTextHelper">;
  error?: SingleBooleanChoiceArg<"error">;
  hasLabel?: SingleBooleanChoiceArg<"hasLabel">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  hasLeftIcon?: SingleBooleanChoiceArg<"hasLeftIcon">;
};

type VariantPropType = keyof PlasmicInputText__VariantsArgs;
export const PlasmicInputText__VariantProps = new Array<VariantPropType>(
  "hasTextHelper",
  "error",
  "hasLabel",
  "isDisabled",
  "hasLeftIcon"
);

export type PlasmicInputText__ArgsType = {
  label?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInputText__ArgsType;
export const PlasmicInputText__ArgProps = new Array<ArgPropType>(
  "label",
  "children",
  "slot"
);

export type PlasmicInputText__OverridesType = {
  root?: p.Flex<"div">;
  textInput?: p.Flex<"div">;
  labelContainer?: p.Flex<"label">;
  inputHelperText?: p.Flex<"div">;
  textboxContainer?: p.Flex<"div">;
  leftIcon?: p.Flex<"div">;
  input2?: p.Flex<"input">;
  errorContainer?: p.Flex<"div">;
  errorMessage?: p.Flex<typeof ErrorMessage>;
};

export interface DefaultInputTextProps {
  label?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  hasTextHelper?: SingleBooleanChoiceArg<"hasTextHelper">;
  error?: SingleBooleanChoiceArg<"error">;
  hasLabel?: SingleBooleanChoiceArg<"hasLabel">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  hasLeftIcon?: SingleBooleanChoiceArg<"hasLeftIcon">;
  className?: string;
}

function PlasmicInputText__RenderFunc(props: {
  variants: PlasmicInputText__VariantsArgs;
  args: PlasmicInputText__ArgsType;
  overrides: PlasmicInputText__OverridesType;
  dataFetches?: PlasmicInputText__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"textInput"}
        data-plasmic-override={overrides.textInput}
        hasGap={true}
        className={classNames(projectcss.all, sty.textInput)}
      >
        {(hasVariant(variants, "hasLabel", "hasLabel") ? true : false) ? (
          <label
            data-plasmic-name={"labelContainer"}
            data-plasmic-override={overrides.labelContainer}
            className={classNames(projectcss.all, sty.labelContainer, {
              [sty.labelContainer__hasLabel]: hasVariant(
                variants,
                "hasLabel",
                "hasLabel"
              ),
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Label Name",
              value: args.label,
              className: classNames(sty.slotTargetLabel),
            })}
          </label>
        ) : null}
        {(
          hasVariant(variants, "hasTextHelper", "hasTextHelper") ? true : false
        ) ? (
          <div
            data-plasmic-name={"inputHelperText"}
            data-plasmic-override={overrides.inputHelperText}
            className={classNames(projectcss.all, sty.inputHelperText, {
              [sty.inputHelperText__error]: hasVariant(
                variants,
                "error",
                "error"
              ),
              [sty.inputHelperText__hasTextHelper]: hasVariant(
                variants,
                "hasTextHelper",
                "hasTextHelper"
              ),
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Text Helper Description",
              value: args.children,
              className: classNames(sty.slotTargetChildren),
            })}
          </div>
        ) : null}

        <div className={classNames(projectcss.all, sty.freeBox___9LrSw)}>
          <div
            data-plasmic-name={"textboxContainer"}
            data-plasmic-override={overrides.textboxContainer}
            className={classNames(projectcss.all, sty.textboxContainer)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__lygyM)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__eDsPg, {
                  [sty.freeBox__hasLeftIcon__eDsPgLDyDu]: hasVariant(
                    variants,
                    "hasLeftIcon",
                    "hasLeftIcon"
                  ),
                })}
              >
                {(
                  hasVariant(variants, "hasLeftIcon", "hasLeftIcon")
                    ? true
                    : true
                ) ? (
                  <div
                    data-plasmic-name={"leftIcon"}
                    data-plasmic-override={overrides.leftIcon}
                    className={classNames(projectcss.all, sty.leftIcon, {
                      [sty.leftIcon__hasLeftIcon]: hasVariant(
                        variants,
                        "hasLeftIcon",
                        "hasLeftIcon"
                      ),
                    })}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <IconHashIcon
                          className={classNames(projectcss.all, sty.svg__ynG1Y)}
                          role={"img"}
                        />
                      ),

                      value: args.slot,
                    })}
                  </div>
                ) : null}

                <input
                  data-plasmic-name={"input2"}
                  data-plasmic-override={overrides.input2}
                  className={classNames(projectcss.input, sty.input2, {
                    [sty.input2__hasLeftIcon]: hasVariant(
                      variants,
                      "hasLeftIcon",
                      "hasLeftIcon"
                    ),
                    [sty.input2__isDisabled]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    ),
                  })}
                  disabled={false}
                  placeholder={"" as const}
                  title={"" as const}
                  type={"text" as const}
                />
              </p.Stack>
            </div>
          </div>
        </div>

        {(hasVariant(variants, "error", "error") ? true : true) ? (
          <div
            data-plasmic-name={"errorContainer"}
            data-plasmic-override={overrides.errorContainer}
            className={classNames(projectcss.all, sty.errorContainer, {
              [sty.errorContainer__error]: hasVariant(
                variants,
                "error",
                "error"
              ),
            })}
          >
            {(hasVariant(variants, "error", "error") ? true : false) ? (
              <ErrorMessage
                data-plasmic-name={"errorMessage"}
                data-plasmic-override={overrides.errorMessage}
                message={"Error message"}
              />
            ) : null}
          </div>
        ) : null}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "textInput",
    "labelContainer",
    "inputHelperText",
    "textboxContainer",
    "leftIcon",
    "input2",
    "errorContainer",
    "errorMessage",
  ],
  textInput: [
    "textInput",
    "labelContainer",
    "inputHelperText",
    "textboxContainer",
    "leftIcon",
    "input2",
    "errorContainer",
    "errorMessage",
  ],
  labelContainer: ["labelContainer"],
  inputHelperText: ["inputHelperText"],
  textboxContainer: ["textboxContainer", "leftIcon", "input2"],
  leftIcon: ["leftIcon"],
  input2: ["input2"],
  errorContainer: ["errorContainer", "errorMessage"],
  errorMessage: ["errorMessage"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  textInput: "div";
  labelContainer: "label";
  inputHelperText: "div";
  textboxContainer: "div";
  leftIcon: "div";
  input2: "input";
  errorContainer: "div";
  errorMessage: typeof ErrorMessage;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputText__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputText__VariantsArgs;
    args?: PlasmicInputText__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputText__Fetches;
  } & Omit<PlasmicInputText__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInputText__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputText__ArgProps,
      internalVariantPropNames: PlasmicInputText__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicInputText__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputText";
  } else {
    func.displayName = `PlasmicInputText.${nodeName}`;
  }
  return func;
}

export const PlasmicInputText = Object.assign(
  // Top-level PlasmicInputText renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    labelContainer: makeNodeComponent("labelContainer"),
    inputHelperText: makeNodeComponent("inputHelperText"),
    textboxContainer: makeNodeComponent("textboxContainer"),
    leftIcon: makeNodeComponent("leftIcon"),
    input2: makeNodeComponent("input2"),
    errorContainer: makeNodeComponent("errorContainer"),
    errorMessage: makeNodeComponent("errorMessage"),

    // Metadata about props expected for PlasmicInputText
    internalVariantProps: PlasmicInputText__VariantProps,
    internalArgProps: PlasmicInputText__ArgProps,
  }
);

export default PlasmicInputText;
/* prettier-ignore-end */
