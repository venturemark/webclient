// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: Q9Z-qP9n2Q
// plasmic-unformatted
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import InputToggleButton from "../../InputToggleButton"; // plasmic-import: 0x0YjULkfHN/component

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicInputToggleSet.module.css"; // plasmic-import: Q9Z-qP9n2Q/css

export type PlasmicInputToggleSet__VariantMembers = {};

export type PlasmicInputToggleSet__VariantsArgs = {};
type VariantPropType = keyof PlasmicInputToggleSet__VariantsArgs;
export const PlasmicInputToggleSet__VariantProps = new Array<VariantPropType>();

export type PlasmicInputToggleSet__ArgsType = {
  label3?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInputToggleSet__ArgsType;
export const PlasmicInputToggleSet__ArgProps = new Array<ArgPropType>("label3");

export type PlasmicInputToggleSet__OverridesType = {
  root?: p.Flex<"div">;
  label?: p.Flex<"label">;
};

export interface DefaultInputToggleSetProps {
  label3?: React.ReactNode;
  className?: string;
}

function PlasmicInputToggleSet__RenderFunc(props: {
  variants: PlasmicInputToggleSet__VariantsArgs;
  args: PlasmicInputToggleSet__ArgsType;
  overrides: PlasmicInputToggleSet__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <label
        data-plasmic-name={"label"}
        data-plasmic-override={overrides.label}
        className={classNames(defaultcss.all, sty.label)}
      >
        <p.PlasmicSlot
          defaultContents={"Visibility"}
          value={args.label3}
          className={classNames(sty.slotLabel3)}
        />
      </label>

      <div className={classNames(defaultcss.all, sty.box__zgeS0)}>
        <InputToggleButton
          label3={"Private"}
          position={"top" as const}
          selected={"selected" as const}
        >
          {"Only admins and members invited by you can see this timeline. "}
        </InputToggleButton>

        <InputToggleButton
          className={classNames("__wab_instance", sty.inputToggleButton__m5Zt4)}
          label3={"Members"}
          position={"middle" as const}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box___2IwyL
            )}
          >
            {
              "Members from this venture will automatically be invited to this timeline."
            }
          </div>
        </InputToggleButton>

        <InputToggleButton
          className={classNames("__wab_instance", sty.inputToggleButton__zLhjs)}
          label3={"Public"}
          position={"bottom" as const}
        >
          {"Anyone with the venture domain can see this timeline."}
        </InputToggleButton>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "label"],
  label: ["label"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  label: "label";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputToggleSet__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicInputToggleSet__VariantsArgs;
  args?: PlasmicInputToggleSet__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicInputToggleSet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicInputToggleSet__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputToggleSet__ArgProps,
      internalVariantPropNames: PlasmicInputToggleSet__VariantProps,
    });

    return PlasmicInputToggleSet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputToggleSet";
  } else {
    func.displayName = `PlasmicInputToggleSet.${nodeName}`;
  }
  return func;
}

export const PlasmicInputToggleSet = Object.assign(
  // Top-level PlasmicInputToggleSet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    label: makeNodeComponent("label"),

    // Metadata about props expected for PlasmicInputToggleSet
    internalVariantProps: PlasmicInputToggleSet__VariantProps,
    internalArgProps: PlasmicInputToggleSet__ArgProps,
  }
);

export default PlasmicInputToggleSet;
/* prettier-ignore-end */
