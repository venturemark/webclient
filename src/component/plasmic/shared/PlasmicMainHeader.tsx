// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: LRwT0lHdps
// plasmic-unformatted
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import IconButton from "../../IconButton"; // plasmic-import: UIpuE7M1YY/component
import IconButtonMember from "../../IconButtonMember"; // plasmic-import: ZhI9zuyxBT/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: szbTUtTUfDW81Pi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicMainHeader.module.css"; // plasmic-import: LRwT0lHdps/css

import IconExternalLinkIcon from "./icons/PlasmicIcon__IconExternalLink"; // plasmic-import: BDHiWdSyk/icon
import IconFeedIcon from "./icons/PlasmicIcon__IconFeed"; // plasmic-import: gkIqWTG_m/icon
import IconSettings2Icon from "./icons/PlasmicIcon__IconSettings2"; // plasmic-import: sumyU8-X3n/icon

export type PlasmicMainHeader__VariantMembers = {};

export type PlasmicMainHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicMainHeader__VariantsArgs;
export const PlasmicMainHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicMainHeader__ArgsType = {
  timelineDescription?: React.ReactNode;
  timelineName?: React.ReactNode;
};

type ArgPropType = keyof PlasmicMainHeader__ArgsType;
export const PlasmicMainHeader__ArgProps = new Array<ArgPropType>(
  "timelineDescription",
  "timelineName"
);

export type PlasmicMainHeader__OverridesType = {
  container?: p.Flex<"div">;
  iconContainer?: p.Flex<"div">;
  iconButtonMember?: p.Flex<typeof IconButtonMember>;
};

export interface DefaultMainHeaderProps {
  timelineDescription?: React.ReactNode;
  timelineName?: React.ReactNode;
  className?: string;
}

function PlasmicMainHeader__RenderFunc(props: {
  variants: PlasmicMainHeader__VariantsArgs;
  args: PlasmicMainHeader__ArgsType;
  overrides: PlasmicMainHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  });

  return (
    <div
      data-plasmic-name={"container"}
      data-plasmic-override={overrides.container}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.container
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box___3Xg51)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__sDNfz)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__yHtqj)}
          >
            <p.PlasmicSlot
              defaultContents={"Wins"}
              value={args.timelineName}
              className={classNames(sty.slotTimelineName)}
            />

            <IconButton
              className={classNames("__wab_instance", sty.iconButton___6HyIq)}
              iconSize={"large" as const}
            >
              <IconExternalLinkIcon
                className={classNames(defaultcss.all, sty.svg__nqhCc)}
                role={"img"}
              />
            </IconButton>
          </p.Stack>

          {(hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
            <div className={classNames(defaultcss.all, sty.box__fohK2)}>
              <p.PlasmicSlot
                defaultContents={
                  "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec nec volutpat magna."
                }
                value={args.timelineDescription}
                className={classNames(sty.slotTimelineDescription)}
              />
            </div>
          ) : null}
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"iconContainer"}
          data-plasmic-override={overrides.iconContainer}
          hasGap={true}
          className={classNames(defaultcss.all, sty.iconContainer)}
        >
          <IconButton iconSize={"large" as const}>
            <IconFeedIcon
              className={classNames(defaultcss.all, sty.svg__eTdlE)}
              role={"img"}
            />
          </IconButton>

          <IconButtonMember
            data-plasmic-name={"iconButtonMember"}
            data-plasmic-override={overrides.iconButtonMember}
            className={classNames("__wab_instance", sty.iconButtonMember)}
            isActive={"isActive" as const}
            memberCount={"+"}
          />

          <IconButton
            className={classNames("__wab_instance", sty.iconButton__nVsD)}
            iconSize={"large" as const}
          >
            <IconSettings2Icon
              className={classNames(defaultcss.all, sty.svg__isMis)}
              role={"img"}
            />
          </IconButton>
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  container: ["container", "iconContainer", "iconButtonMember"],
  iconContainer: ["iconContainer", "iconButtonMember"],
  iconButtonMember: ["iconButtonMember"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  container: "div";
  iconContainer: "div";
  iconButtonMember: typeof IconButtonMember;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicMainHeader__VariantsArgs;
  args?: PlasmicMainHeader__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicMainHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicMainHeader__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMainHeader__ArgProps,
      internalVariantPropNames: PlasmicMainHeader__VariantProps,
    });

    return PlasmicMainHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "container") {
    func.displayName = "PlasmicMainHeader";
  } else {
    func.displayName = `PlasmicMainHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicMainHeader = Object.assign(
  // Top-level PlasmicMainHeader renders the root element
  makeNodeComponent("container"),
  {
    // Helper components rendering sub-elements
    iconContainer: makeNodeComponent("iconContainer"),
    iconButtonMember: makeNodeComponent("iconButtonMember"),

    // Metadata about props expected for PlasmicMainHeader
    internalVariantProps: PlasmicMainHeader__VariantProps,
    internalArgProps: PlasmicMainHeader__ArgProps,
  }
);

export default PlasmicMainHeader;
/* prettier-ignore-end */
