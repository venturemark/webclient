// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: Rd6ctyxKvRM
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Button from "../../button/index"; // plasmic-import: JU1t0P9pFY/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import * as sty from "./PlasmicModalAlt.module.css"; // plasmic-import: Rd6ctyxKvRM/css

import IconPlusIcon from "./icons/PlasmicIcon__IconPlus"; // plasmic-import: B5QLKmr2tW/icon
import IconRightIcon from "./icons/PlasmicIcon__IconRight"; // plasmic-import: v822ZhrBq/icon

export type PlasmicModalAlt__VariantMembers = {
  orgSelected: "orgSelected";
};

export type PlasmicModalAlt__VariantsArgs = {
  orgSelected?: SingleBooleanChoiceArg<"orgSelected">;
};

type VariantPropType = keyof PlasmicModalAlt__VariantsArgs;
export const PlasmicModalAlt__VariantProps = new Array<VariantPropType>(
  "orgSelected"
);

export type PlasmicModalAlt__ArgsType = {
  organizationDescription?: React.ReactNode;
};

type ArgPropType = keyof PlasmicModalAlt__ArgsType;
export const PlasmicModalAlt__ArgProps = new Array<ArgPropType>(
  "organizationDescription"
);

export type PlasmicModalAlt__OverridesType = {
  root?: p.Flex<"div">;
  group64?: p.Flex<"div">;
  welcomeForm?: p.Flex<"form">;
  organizationDescription?: p.Flex<"div">;
  cancel?: p.Flex<typeof Button>;
  text2?: p.Flex<"div">;
  save?: p.Flex<typeof Button>;
  text22?: p.Flex<"div">;
};

export interface DefaultModalAltProps {
  organizationDescription?: React.ReactNode;
  orgSelected?: SingleBooleanChoiceArg<"orgSelected">;
  className?: string;
}

function PlasmicModalAlt__RenderFunc(props: {
  variants: PlasmicModalAlt__VariantsArgs;
  args: PlasmicModalAlt__ArgsType;
  overrides: PlasmicModalAlt__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"group64"}
        data-plasmic-override={overrides.group64}
        className={classNames(defaultcss.all, sty.group64)}
      >
        <p.Stack
          as={"form"}
          data-plasmic-name={"welcomeForm"}
          data-plasmic-override={overrides.welcomeForm}
          hasGap={true}
          className={classNames(defaultcss.all, sty.welcomeForm, {
            [sty.welcomeForm__orgSelected]: hasVariant(
              variants,
              "orgSelected",
              "orgSelected"
            ),
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__ljTa5)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__aUujC)}
            >
              <p.PlasmicSlot
                defaultContents={
                  <React.Fragment>
                    <div
                      data-plasmic-name={"organizationDescription"}
                      data-plasmic-override={overrides.organizationDescription}
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.organizationDescription
                      )}
                    >
                      {"Delete this timeline?"}
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.box__hxFmc)}
                    >
                      <Button
                        data-plasmic-name={"cancel"}
                        data-plasmic-override={overrides.cancel}
                        buttonStyle={"danger" as const}
                        count={"1"}
                        slot={
                          <IconPlusIcon
                            className={classNames(
                              defaultcss.all,
                              sty.svg___3JrHd
                            )}
                            role={"img"}
                          />
                        }
                        text2={
                          <div
                            data-plasmic-name={"text2"}
                            data-plasmic-override={overrides.text2}
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.text2
                            )}
                          >
                            {"Delete"}
                          </div>
                        }
                      >
                        <IconRightIcon
                          className={classNames(
                            defaultcss.all,
                            sty.svg___3WnXb
                          )}
                          role={"img"}
                        />
                      </Button>

                      <Button
                        data-plasmic-name={"save"}
                        data-plasmic-override={overrides.save}
                        buttonFeatures={[]}
                        buttonStyle={"secondaryPurple" as const}
                        className={classNames("__wab_instance", sty.save)}
                        count={"1"}
                        slot={
                          <IconPlusIcon
                            className={classNames(
                              defaultcss.all,
                              sty.svg__seQ2S
                            )}
                            role={"img"}
                          />
                        }
                        text2={
                          <div
                            data-plasmic-name={"text22"}
                            data-plasmic-override={overrides.text22}
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.text22
                            )}
                          >
                            {"Cancel"}
                          </div>
                        }
                      >
                        <IconRightIcon
                          className={classNames(defaultcss.all, sty.svg__oTsn)}
                          role={"img"}
                        />
                      </Button>
                    </p.Stack>
                  </React.Fragment>
                }
                value={args.organizationDescription}
                className={classNames(sty.slotOrganizationDescription)}
              />
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "group64",
    "welcomeForm",
    "organizationDescription",
    "cancel",
    "text2",
    "save",
    "text22",
  ],
  group64: [
    "group64",
    "welcomeForm",
    "organizationDescription",
    "cancel",
    "text2",
    "save",
    "text22",
  ],
  welcomeForm: [
    "welcomeForm",
    "organizationDescription",
    "cancel",
    "text2",
    "save",
    "text22",
  ],
  organizationDescription: ["organizationDescription"],
  cancel: ["cancel", "text2"],
  text2: ["text2"],
  save: ["save", "text22"],
  text22: ["text22"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  group64: "div";
  welcomeForm: "form";
  organizationDescription: "div";
  cancel: typeof Button;
  text2: "div";
  save: typeof Button;
  text22: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicModalAlt__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicModalAlt__VariantsArgs;
  args?: PlasmicModalAlt__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicModalAlt__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicModalAlt__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicModalAlt__ArgProps,
      internalVariantPropNames: PlasmicModalAlt__VariantProps,
    });

    return PlasmicModalAlt__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicModalAlt";
  } else {
    func.displayName = `PlasmicModalAlt.${nodeName}`;
  }
  return func;
}

export const PlasmicModalAlt = Object.assign(
  // Top-level PlasmicModalAlt renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    group64: makeNodeComponent("group64"),
    welcomeForm: makeNodeComponent("welcomeForm"),
    organizationDescription: makeNodeComponent("organizationDescription"),
    cancel: makeNodeComponent("cancel"),
    text2: makeNodeComponent("text2"),
    save: makeNodeComponent("save"),
    text22: makeNodeComponent("text22"),

    // Metadata about props expected for PlasmicModalAlt
    internalVariantProps: PlasmicModalAlt__VariantProps,
    internalArgProps: PlasmicModalAlt__ArgProps,
  }
);

export default PlasmicModalAlt;
/* prettier-ignore-end */
