// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: imGt0hxgfe
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import RadioButtonGroup from "../../RadioButtonGroup"; // plasmic-import: Q9Z-qP9n2Q/component
import RadioButton from "../../RadioButton"; // plasmic-import: 0x0YjULkfHN/component
import Button from "../../button/index"; // plasmic-import: JU1t0P9pFY/component
import ProfileForm from "../../profileform/index"; // plasmic-import: _XzWccJtXuE/component

import { useScreenVariants as useScreenVariantsszbTUtTUfDw81Pi } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: szbTUtTUfDW81Pi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicOnboardingGroup.module.css"; // plasmic-import: imGt0hxgfe/css

import IconPlusIcon from "./icons/PlasmicIcon__IconPlus"; // plasmic-import: B5QLKmr2tW/icon
import IconRightIcon from "./icons/PlasmicIcon__IconRight"; // plasmic-import: v822ZhrBq/icon

export type PlasmicOnboardingGroup__VariantMembers = {
  onboardingSteps: "step1" | "step2" | "step3";
};

export type PlasmicOnboardingGroup__VariantsArgs = {
  onboardingSteps?: SingleChoiceArg<"step1" | "step2" | "step3">;
};

type VariantPropType = keyof PlasmicOnboardingGroup__VariantsArgs;
export const PlasmicOnboardingGroup__VariantProps = new Array<VariantPropType>(
  "onboardingSteps"
);

export type PlasmicOnboardingGroup__ArgsType = {};
type ArgPropType = keyof PlasmicOnboardingGroup__ArgsType;
export const PlasmicOnboardingGroup__ArgProps = new Array<ArgPropType>();

export type PlasmicOnboardingGroup__OverridesType = {
  root?: p.Flex<"div">;
  step1?: p.Flex<"div">;
  buttonSetContainerSurvey?: p.Flex<"div">;
  choicePeople?: p.Flex<typeof RadioButton>;
  choiceSearch?: p.Flex<typeof RadioButton>;
  choiceSocial?: p.Flex<typeof RadioButton>;
  choiceOther?: p.Flex<typeof RadioButton>;
  step1ContinueButton?: p.Flex<typeof Button>;
  step2?: p.Flex<"div">;
  profileForm?: p.Flex<typeof ProfileForm>;
  step3?: p.Flex<"div">;
  buttonSetContainerStreamline?: p.Flex<"div">;
  choiceTeam?: p.Flex<typeof RadioButton>;
  choiceNetwork?: p.Flex<typeof RadioButton>;
  choiceProgress?: p.Flex<typeof RadioButton>;
  beginButton?: p.Flex<typeof Button>;
};

export interface DefaultOnboardingGroupProps {
  onboardingSteps?: SingleChoiceArg<"step1" | "step2" | "step3">;
  className?: string;
}

function PlasmicOnboardingGroup__RenderFunc(props: {
  variants: PlasmicOnboardingGroup__VariantsArgs;
  args: PlasmicOnboardingGroup__ArgsType;
  overrides: PlasmicOnboardingGroup__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsszbTUtTUfDw81Pi(),
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootonboardingSteps_step1]: hasVariant(
          variants,
          "onboardingSteps",
          "step1"
        ),
        [sty.rootonboardingSteps_step2]: hasVariant(
          variants,
          "onboardingSteps",
          "step2"
        ),
        [sty.rootonboardingSteps_step3]: hasVariant(
          variants,
          "onboardingSteps",
          "step3"
        ),
      })}
    >
      {(
        hasVariant(variants, "onboardingSteps", "step3")
          ? true
          : hasVariant(variants, "onboardingSteps", "step2")
          ? true
          : hasVariant(variants, "onboardingSteps", "step1")
          ? true
          : hasVariant(globalVariants, "screen", "desktopLarge")
          ? true
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"step1"}
          data-plasmic-override={overrides.step1}
          hasGap={true}
          className={classNames(projectcss.all, sty.step1, {
            [sty.step1onboardingSteps_step1]: hasVariant(
              variants,
              "onboardingSteps",
              "step1"
            ),
            [sty.step1onboardingSteps_step2]: hasVariant(
              variants,
              "onboardingSteps",
              "step2"
            ),
            [sty.step1onboardingSteps_step3]: hasVariant(
              variants,
              "onboardingSteps",
              "step3"
            ),
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__aFons)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1KDo
              )}
            >
              {"How did you hear about us?"}
            </div>
          </div>

          {true ? (
            <div
              data-plasmic-name={"buttonSetContainerSurvey"}
              data-plasmic-override={overrides.buttonSetContainerSurvey}
              className={classNames(
                projectcss.all,
                sty.buttonSetContainerSurvey
              )}
            >
              <RadioButtonGroup
                className={classNames(
                  "__wab_instance",
                  sty.radioButtonGroup__luNn
                )}
                groupContainer={
                  <React.Fragment>
                    <RadioButton
                      data-plasmic-name={"choicePeople"}
                      data-plasmic-override={overrides.choicePeople}
                      helperText={
                        "Only members invited by you can see this timeline. "
                      }
                      radioVariants={["hasLabel", "hasImage"]}
                      slot={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__xGpYk)}
                          displayHeight={"100%" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "https://site-assets.plasmic.app/251d4810d2398393983538a7c9b056ad.svg",
                            fullWidth: 225,
                            fullHeight: 150,
                            aspectRatio: 1.5,
                          }}
                        />
                      }
                    >
                      {"Someone I know"}
                    </RadioButton>

                    <RadioButton
                      data-plasmic-name={"choiceSearch"}
                      data-plasmic-override={overrides.choiceSearch}
                      helperText={
                        "Only members invited by you can see this timeline. "
                      }
                      radioVariants={["hasLabel", "hasImage"]}
                      slot={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__jtspc)}
                          displayHeight={"100%" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "https://site-assets.plasmic.app/d3f40c1e3edd44f1556b20c0f77ed6e2.svg",
                            fullWidth: 215,
                            fullHeight: 150,
                            aspectRatio: 1.431818,
                          }}
                        />
                      }
                    >
                      {"Search engine or blog post"}
                    </RadioButton>

                    <RadioButton
                      data-plasmic-name={"choiceSocial"}
                      data-plasmic-override={overrides.choiceSocial}
                      helperText={
                        "Only members invited by you can see this timeline. "
                      }
                      radioVariants={["hasLabel", "hasImage"]}
                      slot={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__zdWxi)}
                          displayHeight={"100%" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "https://site-assets.plasmic.app/3489cd482db5785ea39ac5a50a57a0e6.svg",
                            fullWidth: 162,
                            fullHeight: 150,
                            aspectRatio: 1.078431,
                          }}
                        />
                      }
                    >
                      {"Social media"}
                    </RadioButton>

                    <RadioButton
                      data-plasmic-name={"choiceOther"}
                      data-plasmic-override={overrides.choiceOther}
                      helperText={
                        "Only members invited by you can see this timeline. "
                      }
                      radioVariants={["hasLabel", "hasImage"]}
                      slot={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__faPxV)}
                          displayHeight={"100%" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"41px" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "https://site-assets.plasmic.app/6c6f1926bf135c04717db2fbe7976047.svg",
                            fullWidth: 300,
                            fullHeight: 89,
                            aspectRatio: 3.375,
                          }}
                        />
                      }
                    >
                      {"Other"}
                    </RadioButton>
                  </React.Fragment>
                }
              />
            </div>
          ) : null}

          <Button
            data-plasmic-name={"step1ContinueButton"}
            data-plasmic-override={overrides.step1ContinueButton}
            buttonStyle={"primaryPurple" as const}
            className={classNames("__wab_instance", sty.step1ContinueButton)}
            text2={"Continue"}
          />
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "onboardingSteps", "step3")
          ? true
          : hasVariant(variants, "onboardingSteps", "step2")
          ? true
          : hasVariant(variants, "onboardingSteps", "step1")
          ? true
          : hasVariant(globalVariants, "screen", "desktopLarge")
          ? true
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"step2"}
          data-plasmic-override={overrides.step2}
          hasGap={true}
          className={classNames(projectcss.all, sty.step2, {
            [sty.step2onboardingSteps_step1]: hasVariant(
              variants,
              "onboardingSteps",
              "step1"
            ),
            [sty.step2onboardingSteps_step2]: hasVariant(
              variants,
              "onboardingSteps",
              "step2"
            ),
            [sty.step2onboardingSteps_step3]: hasVariant(
              variants,
              "onboardingSteps",
              "step3"
            ),
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__pN5Ma)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__y6Bvv
              )}
            >
              {"Tell us about yourself"}
            </div>
          </div>

          <ProfileForm
            data-plasmic-name={"profileForm"}
            data-plasmic-override={overrides.profileForm}
            className={classNames("__wab_instance", sty.profileForm, {
              [sty.profileFormonboardingSteps_step2]: hasVariant(
                variants,
                "onboardingSteps",
                "step2"
              ),
            })}
          />
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "onboardingSteps", "step3")
          ? true
          : hasVariant(globalVariants, "screen", "desktopLarge")
          ? true
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"step3"}
          data-plasmic-override={overrides.step3}
          hasGap={true}
          className={classNames(projectcss.all, sty.step3, {
            [sty.step3onboardingSteps_step3]: hasVariant(
              variants,
              "onboardingSteps",
              "step3"
            ),
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__p0Ml9)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yemtJ
              )}
            >
              {"How to do you plan to use breadcrumb?"}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rMuN,
                {
                  [sty.textonboardingSteps_step3__rMuNt81EX]: hasVariant(
                    variants,
                    "onboardingSteps",
                    "step3"
                  ),
                }
              )}
            >
              {"We will streamline your setup experience accordingly."}
            </div>
          </p.Stack>

          {true ? (
            <div
              data-plasmic-name={"buttonSetContainerStreamline"}
              data-plasmic-override={overrides.buttonSetContainerStreamline}
              className={classNames(
                projectcss.all,
                sty.buttonSetContainerStreamline
              )}
            >
              <RadioButtonGroup
                className={classNames(
                  "__wab_instance",
                  sty.radioButtonGroup__t5J48
                )}
                groupContainer={
                  <React.Fragment>
                    <RadioButton
                      data-plasmic-name={"choiceTeam"}
                      data-plasmic-override={overrides.choiceTeam}
                      helperText={
                        "Collaborate and share updates with your team."
                      }
                      isHorizontal={true}
                      radioVariants={["hasLabel", "hasImage", "hasDescription"]}
                      slot={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__dKBtA)}
                          displayHeight={"100%" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "https://site-assets.plasmic.app/251d4810d2398393983538a7c9b056ad.svg",
                            fullWidth: 225,
                            fullHeight: 150,
                            aspectRatio: 1.5,
                          }}
                        />
                      }
                    >
                      {"Stay in sync with my team"}
                    </RadioButton>

                    <RadioButton
                      data-plasmic-name={"choiceNetwork"}
                      data-plasmic-override={overrides.choiceNetwork}
                      helperText={
                        "Only members invited by you can see this timeline. "
                      }
                      isHorizontal={true}
                      radioVariants={["hasLabel", "hasImage", "hasDescription"]}
                      slot={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__hwMba)}
                          displayHeight={"100%" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "https://site-assets.plasmic.app/c5b1ca9978a4b1118461e843b93dbf28.svg",
                            fullWidth: 196,
                            fullHeight: 150,
                            aspectRatio: 1.309091,
                          }}
                        />
                      }
                    >
                      {"Keep my network updated"}
                    </RadioButton>

                    <RadioButton
                      data-plasmic-name={"choiceProgress"}
                      data-plasmic-override={overrides.choiceProgress}
                      helperText={"Write better and document your journey."}
                      isHorizontal={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? undefined
                          : true
                      }
                      radioVariants={["hasLabel", "hasImage", "hasDescription"]}
                      slot={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___78JSr)}
                          displayHeight={"100%" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "https://site-assets.plasmic.app/41af925b4a700e21e4e80268c0684fb1.svg",
                            fullWidth: 172,
                            fullHeight: 150,
                            aspectRatio: 1.147368,
                          }}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gIeBd,
                          {
                            [sty.textonboardingSteps_step3__gIeBdt81EX]:
                              hasVariant(variants, "onboardingSteps", "step3"),
                          }
                        )}
                      >
                        {"Document and track my progress"}
                      </div>
                    </RadioButton>
                  </React.Fragment>
                }
                isHorizontal={true}
              />
            </div>
          ) : null}

          <Button
            data-plasmic-name={"beginButton"}
            data-plasmic-override={overrides.beginButton}
            buttonStyle={"primaryPurple" as const}
            className={classNames("__wab_instance", sty.beginButton, {
              [sty.beginButtononboardingSteps_step3]: hasVariant(
                variants,
                "onboardingSteps",
                "step3"
              ),
            })}
            count={"1"}
            text2={"Begin"}
          />
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "step1",
    "buttonSetContainerSurvey",
    "choicePeople",
    "choiceSearch",
    "choiceSocial",
    "choiceOther",
    "step1ContinueButton",
    "step2",
    "profileForm",
    "step3",
    "buttonSetContainerStreamline",
    "choiceTeam",
    "choiceNetwork",
    "choiceProgress",
    "beginButton",
  ],
  step1: [
    "step1",
    "buttonSetContainerSurvey",
    "choicePeople",
    "choiceSearch",
    "choiceSocial",
    "choiceOther",
    "step1ContinueButton",
  ],
  buttonSetContainerSurvey: [
    "buttonSetContainerSurvey",
    "choicePeople",
    "choiceSearch",
    "choiceSocial",
    "choiceOther",
  ],
  choicePeople: ["choicePeople"],
  choiceSearch: ["choiceSearch"],
  choiceSocial: ["choiceSocial"],
  choiceOther: ["choiceOther"],
  step1ContinueButton: ["step1ContinueButton"],
  step2: ["step2", "profileForm"],
  profileForm: ["profileForm"],
  step3: [
    "step3",
    "buttonSetContainerStreamline",
    "choiceTeam",
    "choiceNetwork",
    "choiceProgress",
    "beginButton",
  ],
  buttonSetContainerStreamline: [
    "buttonSetContainerStreamline",
    "choiceTeam",
    "choiceNetwork",
    "choiceProgress",
  ],
  choiceTeam: ["choiceTeam"],
  choiceNetwork: ["choiceNetwork"],
  choiceProgress: ["choiceProgress"],
  beginButton: ["beginButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  step1: "div";
  buttonSetContainerSurvey: "div";
  choicePeople: typeof RadioButton;
  choiceSearch: typeof RadioButton;
  choiceSocial: typeof RadioButton;
  choiceOther: typeof RadioButton;
  step1ContinueButton: typeof Button;
  step2: "div";
  profileForm: typeof ProfileForm;
  step3: "div";
  buttonSetContainerStreamline: "div";
  choiceTeam: typeof RadioButton;
  choiceNetwork: typeof RadioButton;
  choiceProgress: typeof RadioButton;
  beginButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOnboardingGroup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOnboardingGroup__VariantsArgs;
    args?: PlasmicOnboardingGroup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOnboardingGroup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOnboardingGroup__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicOnboardingGroup__ArgProps,
      internalVariantPropNames: PlasmicOnboardingGroup__VariantProps,
    });

    return PlasmicOnboardingGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOnboardingGroup";
  } else {
    func.displayName = `PlasmicOnboardingGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicOnboardingGroup = Object.assign(
  // Top-level PlasmicOnboardingGroup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    step1: makeNodeComponent("step1"),
    buttonSetContainerSurvey: makeNodeComponent("buttonSetContainerSurvey"),
    choicePeople: makeNodeComponent("choicePeople"),
    choiceSearch: makeNodeComponent("choiceSearch"),
    choiceSocial: makeNodeComponent("choiceSocial"),
    choiceOther: makeNodeComponent("choiceOther"),
    step1ContinueButton: makeNodeComponent("step1ContinueButton"),
    step2: makeNodeComponent("step2"),
    profileForm: makeNodeComponent("profileForm"),
    step3: makeNodeComponent("step3"),
    buttonSetContainerStreamline: makeNodeComponent(
      "buttonSetContainerStreamline"
    ),
    choiceTeam: makeNodeComponent("choiceTeam"),
    choiceNetwork: makeNodeComponent("choiceNetwork"),
    choiceProgress: makeNodeComponent("choiceProgress"),
    beginButton: makeNodeComponent("beginButton"),

    // Metadata about props expected for PlasmicOnboardingGroup
    internalVariantProps: PlasmicOnboardingGroup__VariantProps,
    internalArgProps: PlasmicOnboardingGroup__ArgProps,
  }
);

export default PlasmicOnboardingGroup;
/* prettier-ignore-end */
