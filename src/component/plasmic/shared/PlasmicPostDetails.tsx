// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: 1E73LSzV2l
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import IconButton from "../../iconbutton/index"; // plasmic-import: UIpuE7M1YY/component
import ContentPost from "../../contentpost/index"; // plasmic-import: A1UjtYt6k0/component
import ReplyContent from "../../replycontent/index"; // plasmic-import: q3VnCwfx25w/component
import ReplyInput from "../../replyinput/index"; // plasmic-import: PE9pgtdNju/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import * as sty from "./PlasmicPostDetails.module.css"; // plasmic-import: 1E73LSzV2l/css

import IconCloseIcon from "./icons/PlasmicIcon__IconClose"; // plasmic-import: v016HsKmfL/icon

export type PlasmicPostDetails__VariantMembers = {};

export type PlasmicPostDetails__VariantsArgs = {};
type VariantPropType = keyof PlasmicPostDetails__VariantsArgs;
export const PlasmicPostDetails__VariantProps = new Array<VariantPropType>();

export type PlasmicPostDetails__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicPostDetails__ArgsType;
export const PlasmicPostDetails__ArgProps = new Array<ArgPropType>("children");

export type PlasmicPostDetails__OverridesType = {
  root?: p.Flex<"div">;
  close?: p.Flex<typeof IconButton>;
  svg?: p.Flex<"svg">;
  post?: p.Flex<typeof ContentPost>;
  userName3?: p.Flex<"span">;
  span?: p.Flex<"span">;
  date3?: p.Flex<"span">;
  repliesContainer?: p.Flex<"div">;
  replyContent?: p.Flex<typeof ReplyContent>;
  replyInput?: p.Flex<typeof ReplyInput>;
};

export interface DefaultPostDetailsProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicPostDetails__RenderFunc(props: {
  variants: PlasmicPostDetails__VariantsArgs;
  args: PlasmicPostDetails__ArgsType;
  overrides: PlasmicPostDetails__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {true ? (
        <div className={classNames(defaultcss.all, sty.box__qxUjW)}>
          <p.PlasmicSlot
            defaultContents={"Post Details"}
            value={args.children}
            className={classNames(sty.slotChildren)}
          />

          <IconButton
            data-plasmic-name={"close"}
            data-plasmic-override={overrides.close}
            className={classNames("__wab_instance", sty.close)}
            iconSize={"large" as const}
          >
            <IconCloseIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(defaultcss.all, sty.svg)}
              role={"img"}
            />
          </IconButton>
        </div>
      ) : null}

      <div className={classNames(defaultcss.all, sty.box__n7A9B)}>
        <ContentPost
          data-plasmic-name={"post"}
          data-plasmic-override={overrides.post}
          className={classNames("__wab_instance", sty.post)}
          date={
            <React.Fragment>
              <span
                data-plasmic-name={"span"}
                data-plasmic-override={overrides.span}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.span
                )}
              >
                {"â€¢"}
              </span>

              <span
                data-plasmic-name={"date3"}
                data-plasmic-override={overrides.date3}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.date3
                )}
              >
                {"3 hours ago"}
              </span>
            </React.Fragment>
          }
          state={["isPostDetails"]}
          userInitials={"KO"}
          userName={
            <span
              data-plasmic-name={"userName3"}
              data-plasmic-override={overrides.userName3}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.userName3
              )}
            >
              <span>
                <span style={{ fontWeight: 700 }}>{"The Rock"}</span>
              </span>
            </span>
          }
        />
      </div>

      <div
        data-plasmic-name={"repliesContainer"}
        data-plasmic-override={overrides.repliesContainer}
        className={classNames(defaultcss.all, sty.repliesContainer)}
      >
        <ReplyContent
          data-plasmic-name={"replyContent"}
          data-plasmic-override={overrides.replyContent}
        />
      </div>

      <ReplyInput
        data-plasmic-name={"replyInput"}
        data-plasmic-override={overrides.replyInput}
        className={classNames("__wab_instance", sty.replyInput)}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "close",
    "svg",
    "post",
    "userName3",
    "span",
    "date3",
    "repliesContainer",
    "replyContent",
    "replyInput",
  ],
  close: ["close", "svg"],
  svg: ["svg"],
  post: ["post", "userName3", "span", "date3"],
  userName3: ["userName3"],
  span: ["span"],
  date3: ["date3"],
  repliesContainer: ["repliesContainer", "replyContent"],
  replyContent: ["replyContent"],
  replyInput: ["replyInput"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  close: typeof IconButton;
  svg: "svg";
  post: typeof ContentPost;
  userName3: "span";
  span: "span";
  date3: "span";
  repliesContainer: "div";
  replyContent: typeof ReplyContent;
  replyInput: typeof ReplyInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPostDetails__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicPostDetails__VariantsArgs;
  args?: PlasmicPostDetails__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicPostDetails__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicPostDetails__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPostDetails__ArgProps,
      internalVariantPropNames: PlasmicPostDetails__VariantProps,
    });

    return PlasmicPostDetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPostDetails";
  } else {
    func.displayName = `PlasmicPostDetails.${nodeName}`;
  }
  return func;
}

export const PlasmicPostDetails = Object.assign(
  // Top-level PlasmicPostDetails renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    close: makeNodeComponent("close"),
    svg: makeNodeComponent("svg"),
    post: makeNodeComponent("post"),
    userName3: makeNodeComponent("userName3"),
    span: makeNodeComponent("span"),
    date3: makeNodeComponent("date3"),
    repliesContainer: makeNodeComponent("repliesContainer"),
    replyContent: makeNodeComponent("replyContent"),
    replyInput: makeNodeComponent("replyInput"),

    // Metadata about props expected for PlasmicPostDetails
    internalVariantProps: PlasmicPostDetails__VariantProps,
    internalArgProps: PlasmicPostDetails__ArgProps,
  }
);

export default PlasmicPostDetails;
/* prettier-ignore-end */
