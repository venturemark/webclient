// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: 1E73LSzV2l
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import ContentPost from "../../contentpost/index"; // plasmic-import: A1UjtYt6k0/component
import ReplyContent from "../../replycontent/index"; // plasmic-import: q3VnCwfx25w/component
import ReplyInput from "../../replyinput/index"; // plasmic-import: PE9pgtdNju/component

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicPostDetails2.module.css"; // plasmic-import: 1E73LSzV2l/css

export type PlasmicPostDetails2__VariantMembers = {};

export type PlasmicPostDetails2__VariantsArgs = {};
type VariantPropType = keyof PlasmicPostDetails2__VariantsArgs;
export const PlasmicPostDetails2__VariantProps = new Array<VariantPropType>();

export type PlasmicPostDetails2__ArgsType = {};
type ArgPropType = keyof PlasmicPostDetails2__ArgsType;
export const PlasmicPostDetails2__ArgProps = new Array<ArgPropType>();

export type PlasmicPostDetails2__OverridesType = {
  root?: p.Flex<"div">;
  contentPost?: p.Flex<typeof ContentPost>;
  replyContent?: p.Flex<typeof ReplyContent>;
  replyInput?: p.Flex<typeof ReplyInput>;
};

export interface DefaultPostDetails2Props {
  className?: string;
}

function PlasmicPostDetails2__RenderFunc(props: {
  variants: PlasmicPostDetails2__VariantsArgs;
  args: PlasmicPostDetails2__ArgsType;
  overrides: PlasmicPostDetails2__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <ContentPost
        data-plasmic-name={"contentPost"}
        data-plasmic-override={overrides.contentPost}
        className={classNames("__wab_instance", sty.contentPost)}
      />

      <ReplyContent
        data-plasmic-name={"replyContent"}
        data-plasmic-override={overrides.replyContent}
        className={classNames("__wab_instance", sty.replyContent)}
      />

      <ReplyInput
        data-plasmic-name={"replyInput"}
        data-plasmic-override={overrides.replyInput}
        className={classNames("__wab_instance", sty.replyInput)}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "contentPost", "replyContent", "replyInput"],
  contentPost: ["contentPost"],
  replyContent: ["replyContent"],
  replyInput: ["replyInput"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  contentPost: typeof ContentPost;
  replyContent: typeof ReplyContent;
  replyInput: typeof ReplyInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPostDetails2__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicPostDetails2__VariantsArgs;
  args?: PlasmicPostDetails2__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicPostDetails2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicPostDetails2__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPostDetails2__ArgProps,
      internalVariantPropNames: PlasmicPostDetails2__VariantProps,
    });

    return PlasmicPostDetails2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPostDetails2";
  } else {
    func.displayName = `PlasmicPostDetails2.${nodeName}`;
  }
  return func;
}

export const PlasmicPostDetails2 = Object.assign(
  // Top-level PlasmicPostDetails2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    contentPost: makeNodeComponent("contentPost"),
    replyContent: makeNodeComponent("replyContent"),
    replyInput: makeNodeComponent("replyInput"),

    // Metadata about props expected for PlasmicPostDetails2
    internalVariantProps: PlasmicPostDetails2__VariantProps,
    internalArgProps: PlasmicPostDetails2__ArgProps,
  }
);

export default PlasmicPostDetails2;
/* prettier-ignore-end */
