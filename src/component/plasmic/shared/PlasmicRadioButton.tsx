// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: 0x0YjULkfHN
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsszbTUtTUfDw81Pi } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: szbTUtTUfDW81Pi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicRadioButton.module.css"; // plasmic-import: 0x0YjULkfHN/css

export type PlasmicRadioButton__VariantMembers = {
  radioVariants:
    | "isSelected"
    | "isDisabled"
    | "hasLabel"
    | "hasDescription"
    | "hasImage";
  isHorizontal: "isHorizontal";
};

export type PlasmicRadioButton__VariantsArgs = {
  radioVariants?: MultiChoiceArg<
    "isSelected" | "isDisabled" | "hasLabel" | "hasDescription" | "hasImage"
  >;
  isHorizontal?: SingleBooleanChoiceArg<"isHorizontal">;
};

type VariantPropType = keyof PlasmicRadioButton__VariantsArgs;
export const PlasmicRadioButton__VariantProps = new Array<VariantPropType>(
  "radioVariants",
  "isHorizontal"
);

export type PlasmicRadioButton__ArgsType = {
  helperText?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicRadioButton__ArgsType;
export const PlasmicRadioButton__ArgProps = new Array<ArgPropType>(
  "helperText",
  "children",
  "slot"
);

export type PlasmicRadioButton__OverridesType = {
  root?: p.Flex<"div">;
  radio?: p.Flex<"div">;
  labelContainer?: p.Flex<"div">;
  label?: p.Flex<"label">;
  inputHelperText?: p.Flex<"div">;
  buttonContainer?: p.Flex<"div">;
};

export interface DefaultRadioButtonProps {
  helperText?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  radioVariants?: MultiChoiceArg<
    "isSelected" | "isDisabled" | "hasLabel" | "hasDescription" | "hasImage"
  >;
  isHorizontal?: SingleBooleanChoiceArg<"isHorizontal">;
  className?: string;
}

function PlasmicRadioButton__RenderFunc(props: {
  variants: PlasmicRadioButton__VariantsArgs;
  args: PlasmicRadioButton__ArgsType;
  overrides: PlasmicRadioButton__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =
    useTrigger("useFocusVisibleWithin", {
      isTextInput: false,
    });

  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin,
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsszbTUtTUfDw81Pi(),
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootisHorizontal]: hasVariant(
          variants,
          "isHorizontal",
          "isHorizontal"
        ),
        [sty.rootradioVariants_hasDescription]: hasVariant(
          variants,
          "radioVariants",
          "hasDescription"
        ),
        [sty.rootradioVariants_hasImage]: hasVariant(
          variants,
          "radioVariants",
          "hasImage"
        ),
        [sty.rootradioVariants_hasLabel]: hasVariant(
          variants,
          "radioVariants",
          "hasLabel"
        ),
        [sty.rootradioVariants_isSelected]: hasVariant(
          variants,
          "radioVariants",
          "isSelected"
        ),
      })}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"radio"}
        data-plasmic-override={overrides.radio}
        hasGap={true}
        className={classNames(projectcss.all, sty.radio, {
          [sty.radio___focusVisibleWithin]: triggers.focusVisibleWithin_root,
          [sty.radioisHorizontal]: hasVariant(
            variants,
            "isHorizontal",
            "isHorizontal"
          ),
          [sty.radioradioVariants_hasImage]: hasVariant(
            variants,
            "radioVariants",
            "hasImage"
          ),
          [sty.radioradioVariants_hasLabel]: hasVariant(
            variants,
            "radioVariants",
            "hasLabel"
          ),
          [sty.radioradioVariants_isDisabled]: hasVariant(
            variants,
            "radioVariants",
            "isDisabled"
          ),
          [sty.radioradioVariants_isSelected]: hasVariant(
            variants,
            "radioVariants",
            "isSelected"
          ),
        })}
      >
        {(hasVariant(variants, "radioVariants", "hasImage") ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__gJxhU, {
              [sty.freeBoxisHorizontal__gJxhUysWIq]: hasVariant(
                variants,
                "isHorizontal",
                "isHorizontal"
              ),
              [sty.freeBoxradioVariants_hasImage__gJxhUhPxes]: hasVariant(
                variants,
                "radioVariants",
                "hasImage"
              ),
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___4Meh)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                />
              ),

              value: args.slot,
            })}
          </div>
        ) : null}
        {(hasVariant(variants, "radioVariants", "hasLabel") ? true : true) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"labelContainer"}
            data-plasmic-override={overrides.labelContainer}
            hasGap={true}
            className={classNames(projectcss.all, sty.labelContainer, {
              [sty.labelContainerisHorizontal]: hasVariant(
                variants,
                "isHorizontal",
                "isHorizontal"
              ),
              [sty.labelContainerradioVariants_hasImage]: hasVariant(
                variants,
                "radioVariants",
                "hasImage"
              ),
              [sty.labelContainerradioVariants_hasLabel]: hasVariant(
                variants,
                "radioVariants",
                "hasLabel"
              ),
              [sty.labelContainerradioVariants_isSelected]: hasVariant(
                variants,
                "radioVariants",
                "isSelected"
              ),
            })}
          >
            {(
              hasVariant(variants, "radioVariants", "hasLabel") ? true : true
            ) ? (
              <label
                data-plasmic-name={"label"}
                data-plasmic-override={overrides.label}
                className={classNames(projectcss.all, sty.label, {
                  [sty.labelisHorizontal]: hasVariant(
                    variants,
                    "isHorizontal",
                    "isHorizontal"
                  ),
                  [sty.labelradioVariants_hasImage]: hasVariant(
                    variants,
                    "radioVariants",
                    "hasImage"
                  ),
                  [sty.labelradioVariants_hasLabel]: hasVariant(
                    variants,
                    "radioVariants",
                    "hasLabel"
                  ),
                  [sty.labelradioVariants_isSelected]: hasVariant(
                    variants,
                    "radioVariants",
                    "isSelected"
                  ),
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Private",
                  value: args.children,
                  className: classNames(sty.slotTargetChildren, {
                    [sty.slotTargetChildrenisHorizontal]: hasVariant(
                      variants,
                      "isHorizontal",
                      "isHorizontal"
                    ),
                    [sty.slotTargetChildrenradioVariants_hasImage]: hasVariant(
                      variants,
                      "radioVariants",
                      "hasImage"
                    ),
                    [sty.slotTargetChildrenradioVariants_hasLabel]: hasVariant(
                      variants,
                      "radioVariants",
                      "hasLabel"
                    ),
                  }),
                })}
              </label>
            ) : null}
            {(
              hasVariant(variants, "radioVariants", "hasDescription")
                ? true
                : true
            ) ? (
              <div
                data-plasmic-name={"inputHelperText"}
                data-plasmic-override={overrides.inputHelperText}
                className={classNames(projectcss.all, sty.inputHelperText, {
                  [sty.inputHelperTextisHorizontal]: hasVariant(
                    variants,
                    "isHorizontal",
                    "isHorizontal"
                  ),
                  [sty.inputHelperTextradioVariants_hasDescription]: hasVariant(
                    variants,
                    "radioVariants",
                    "hasDescription"
                  ),
                  [sty.inputHelperTextradioVariants_hasLabel]: hasVariant(
                    variants,
                    "radioVariants",
                    "hasLabel"
                  ),
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents:
                    "Only admins and members invited by you can see this timeline. ",
                  value: args.helperText,
                  className: classNames(sty.slotTargetHelperText, {
                    [sty.slotTargetHelperTextisHorizontal]: hasVariant(
                      variants,
                      "isHorizontal",
                      "isHorizontal"
                    ),
                    [sty.slotTargetHelperTextradioVariants_hasImage]:
                      hasVariant(variants, "radioVariants", "hasImage"),
                    [sty.slotTargetHelperTextradioVariants_hasLabel]:
                      hasVariant(variants, "radioVariants", "hasLabel"),
                  }),
                })}
              </div>
            ) : null}
          </p.Stack>
        ) : null}
        {(hasVariant(variants, "radioVariants", "isSelected") ? true : true) ? (
          <div
            data-plasmic-name={"buttonContainer"}
            data-plasmic-override={overrides.buttonContainer}
            className={classNames(projectcss.all, sty.buttonContainer, {
              [sty.buttonContainerisHorizontal]: hasVariant(
                variants,
                "isHorizontal",
                "isHorizontal"
              ),
              [sty.buttonContainerradioVariants_hasLabel]: hasVariant(
                variants,
                "radioVariants",
                "hasLabel"
              ),
              [sty.buttonContainerradioVariants_isDisabled]: hasVariant(
                variants,
                "radioVariants",
                "isDisabled"
              ),
              [sty.buttonContainerradioVariants_isSelected]: hasVariant(
                variants,
                "radioVariants",
                "isSelected"
              ),
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__gJHtM, {
                [sty.freeBoxisHorizontal__gJHtMysWIq]: hasVariant(
                  variants,
                  "isHorizontal",
                  "isHorizontal"
                ),
                [sty.freeBoxradioVariants_isSelected__gJHtMnYn7]: hasVariant(
                  variants,
                  "radioVariants",
                  "isSelected"
                ),
              })}
            />
          </div>
        ) : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "radio",
    "labelContainer",
    "label",
    "inputHelperText",
    "buttonContainer",
  ],
  radio: [
    "radio",
    "labelContainer",
    "label",
    "inputHelperText",
    "buttonContainer",
  ],
  labelContainer: ["labelContainer", "label", "inputHelperText"],
  label: ["label"],
  inputHelperText: ["inputHelperText"],
  buttonContainer: ["buttonContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  radio: "div";
  labelContainer: "div";
  label: "label";
  inputHelperText: "div";
  buttonContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRadioButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRadioButton__VariantsArgs;
    args?: PlasmicRadioButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRadioButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRadioButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRadioButton__ArgProps,
      internalVariantPropNames: PlasmicRadioButton__VariantProps,
    });

    return PlasmicRadioButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRadioButton";
  } else {
    func.displayName = `PlasmicRadioButton.${nodeName}`;
  }
  return func;
}

export const PlasmicRadioButton = Object.assign(
  // Top-level PlasmicRadioButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    radio: makeNodeComponent("radio"),
    labelContainer: makeNodeComponent("labelContainer"),
    label: makeNodeComponent("label"),
    inputHelperText: makeNodeComponent("inputHelperText"),
    buttonContainer: makeNodeComponent("buttonContainer"),

    // Metadata about props expected for PlasmicRadioButton
    internalVariantProps: PlasmicRadioButton__VariantProps,
    internalArgProps: PlasmicRadioButton__ArgProps,
  }
);

export default PlasmicRadioButton;
/* prettier-ignore-end */
