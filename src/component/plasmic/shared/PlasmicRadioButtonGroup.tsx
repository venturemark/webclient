// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: Q9Z-qP9n2Q
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import RadioButton from "../../RadioButton"; // plasmic-import: 0x0YjULkfHN/component

import { useScreenVariants as useScreenVariantsszbTUtTUfDw81Pi } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: szbTUtTUfDW81Pi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicRadioButtonGroup.module.css"; // plasmic-import: Q9Z-qP9n2Q/css

export type PlasmicRadioButtonGroup__VariantMembers = {
  hasLabel: "hasLabel";
  isHorizontal: "isHorizontal";
  isDisabled: "isDisabled";
};

export type PlasmicRadioButtonGroup__VariantsArgs = {
  hasLabel?: SingleBooleanChoiceArg<"hasLabel">;
  isHorizontal?: SingleBooleanChoiceArg<"isHorizontal">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
};

type VariantPropType = keyof PlasmicRadioButtonGroup__VariantsArgs;
export const PlasmicRadioButtonGroup__VariantProps = new Array<VariantPropType>(
  "hasLabel",
  "isHorizontal",
  "isDisabled"
);

export type PlasmicRadioButtonGroup__ArgsType = {
  label?: React.ReactNode;
  groupContainer?: React.ReactNode;
};

type ArgPropType = keyof PlasmicRadioButtonGroup__ArgsType;
export const PlasmicRadioButtonGroup__ArgProps = new Array<ArgPropType>(
  "label",
  "groupContainer"
);

export type PlasmicRadioButtonGroup__OverridesType = {
  root?: p.Flex<"div">;
  labelContainer?: p.Flex<"label">;
  groupContainer?: p.Flex<"div">;
};

export interface DefaultRadioButtonGroupProps {
  label?: React.ReactNode;
  groupContainer?: React.ReactNode;
  hasLabel?: SingleBooleanChoiceArg<"hasLabel">;
  isHorizontal?: SingleBooleanChoiceArg<"isHorizontal">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  className?: string;
}

function PlasmicRadioButtonGroup__RenderFunc(props: {
  variants: PlasmicRadioButtonGroup__VariantsArgs;
  args: PlasmicRadioButtonGroup__ArgsType;
  overrides: PlasmicRadioButtonGroup__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsszbTUtTUfDw81Pi(),
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootisHorizontal]: hasVariant(
          variants,
          "isHorizontal",
          "isHorizontal"
        ),
      })}
    >
      {(hasVariant(variants, "hasLabel", "hasLabel") ? true : false) ? (
        <label
          data-plasmic-name={"labelContainer"}
          data-plasmic-override={overrides.labelContainer}
          className={classNames(projectcss.all, sty.labelContainer, {
            [sty.labelContainerhasLabel]: hasVariant(
              variants,
              "hasLabel",
              "hasLabel"
            ),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Title",
            value: args.label,
            className: classNames(sty.slotTargetLabel),
          })}
        </label>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"groupContainer"}
        data-plasmic-override={overrides.groupContainer}
        hasGap={true}
        className={classNames(projectcss.all, sty.groupContainer, {
          [sty.groupContainerhasLabel]: hasVariant(
            variants,
            "hasLabel",
            "hasLabel"
          ),
          [sty.groupContainerhasLabel_isHorizontal]:
            hasVariant(variants, "hasLabel", "hasLabel") &&
            hasVariant(variants, "isHorizontal", "isHorizontal"),
          [sty.groupContainerisDisabled]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          ),
          [sty.groupContainerisHorizontal]: hasVariant(
            variants,
            "isHorizontal",
            "isHorizontal"
          ),
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <RadioButton
                helperText={
                  "Only members invited by you can see this timeline. "
                }
                isHorizontal={true}
                radioVariants={["hasLabel", "hasImage", "hasDescription"]}
              >
                {"Private"}
              </RadioButton>

              <RadioButton
                className={classNames("__wab_instance", sty.radioButton___1NpP)}
                helperText={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tiY5D
                    )}
                  >
                    {
                      "All members from this venture will be added to this timeline."
                    }
                  </div>
                }
                isHorizontal={true}
                radioVariants={["hasLabel", "hasDescription", "hasImage"]}
              >
                {"Members"}
              </RadioButton>

              <RadioButton
                className={classNames("__wab_instance", sty.radioButton__tW68H)}
                helperText={
                  "Anyone with the venture domain can see this timeline."
                }
                isHorizontal={true}
                radioVariants={["hasLabel", "hasDescription", "hasImage"]}
              >
                {"Public"}
              </RadioButton>
            </React.Fragment>
          ),
          value: args.groupContainer,
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "labelContainer", "groupContainer"],
  labelContainer: ["labelContainer"],
  groupContainer: ["groupContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  labelContainer: "label";
  groupContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRadioButtonGroup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRadioButtonGroup__VariantsArgs;
    args?: PlasmicRadioButtonGroup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRadioButtonGroup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRadioButtonGroup__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRadioButtonGroup__ArgProps,
      internalVariantPropNames: PlasmicRadioButtonGroup__VariantProps,
    });

    return PlasmicRadioButtonGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRadioButtonGroup";
  } else {
    func.displayName = `PlasmicRadioButtonGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicRadioButtonGroup = Object.assign(
  // Top-level PlasmicRadioButtonGroup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    labelContainer: makeNodeComponent("labelContainer"),
    groupContainer: makeNodeComponent("groupContainer"),

    // Metadata about props expected for PlasmicRadioButtonGroup
    internalVariantProps: PlasmicRadioButtonGroup__VariantProps,
    internalArgProps: PlasmicRadioButtonGroup__ArgProps,
  }
);

export default PlasmicRadioButtonGroup;
/* prettier-ignore-end */
