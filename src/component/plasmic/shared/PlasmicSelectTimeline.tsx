// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: fX--9UW2GgJ
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicSelectTimeline.module.css"; // plasmic-import: fX--9UW2GgJ/css

import IconPlusIcon from "./icons/PlasmicIcon__IconPlus"; // plasmic-import: B5QLKmr2tW/icon

export type PlasmicSelectTimeline__VariantMembers = {
  isActive: "isActive";
  timelineSelected: "timelineSelected";
};

export type PlasmicSelectTimeline__VariantsArgs = {
  isActive?: SingleBooleanChoiceArg<"isActive">;
  timelineSelected?: SingleBooleanChoiceArg<"timelineSelected">;
};

type VariantPropType = keyof PlasmicSelectTimeline__VariantsArgs;
export const PlasmicSelectTimeline__VariantProps = new Array<VariantPropType>(
  "isActive",
  "timelineSelected"
);

export type PlasmicSelectTimeline__ArgsType = {};
type ArgPropType = keyof PlasmicSelectTimeline__ArgsType;
export const PlasmicSelectTimeline__ArgProps = new Array<ArgPropType>();

export type PlasmicSelectTimeline__OverridesType = {
  timelineSelect?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultSelectTimelineProps {
  isActive?: SingleBooleanChoiceArg<"isActive">;
  timelineSelected?: SingleBooleanChoiceArg<"timelineSelected">;
  className?: string;
}

function PlasmicSelectTimeline__RenderFunc(props: {
  variants: PlasmicSelectTimeline__VariantsArgs;
  args: PlasmicSelectTimeline__ArgsType;
  overrides: PlasmicSelectTimeline__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"timelineSelect"}
      data-plasmic-override={overrides.timelineSelect}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.timelineSelect,
        {
          [sty.timelineSelect__isActive]: hasVariant(
            variants,
            "isActive",
            "isActive"
          ),

          [sty.timelineSelect__timelineSelected]: hasVariant(
            variants,
            "timelineSelected",
            "timelineSelected"
          ),

          [sty.timelineSelect__timelineSelected_isActive]:
            hasVariant(variants, "timelineSelected", "timelineSelected") &&
            hasVariant(variants, "isActive", "isActive"),
        }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__lnRel, {
          [sty.box__isActive__lnRelVpG5]: hasVariant(
            variants,
            "isActive",
            "isActive"
          ),
        })}
      >
        <IconPlusIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg, {
            [sty.svg__isActive]: hasVariant(variants, "isActive", "isActive"),
          })}
          role={"img"}
        />

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__nTNtH,
            {
              [sty.box__isActive__nTNtHvpG5]: hasVariant(
                variants,
                "isActive",
                "isActive"
              ),
            }
          )}
        >
          {"Select timeline"}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  timelineSelect: ["timelineSelect", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  timelineSelect: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelectTimeline__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicSelectTimeline__VariantsArgs;
  args?: PlasmicSelectTimeline__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicSelectTimeline__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicSelectTimeline__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSelectTimeline__ArgProps,
      internalVariantPropNames: PlasmicSelectTimeline__VariantProps,
    });

    return PlasmicSelectTimeline__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "timelineSelect") {
    func.displayName = "PlasmicSelectTimeline";
  } else {
    func.displayName = `PlasmicSelectTimeline.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectTimeline = Object.assign(
  // Top-level PlasmicSelectTimeline renders the root element
  makeNodeComponent("timelineSelect"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicSelectTimeline
    internalVariantProps: PlasmicSelectTimeline__VariantProps,
    internalArgProps: PlasmicSelectTimeline__ArgProps,
  }
);

export default PlasmicSelectTimeline;
/* prettier-ignore-end */
