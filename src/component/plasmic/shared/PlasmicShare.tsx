// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: Ockk5wTs5Zq
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import InputText from "../../inputtext/index"; // plasmic-import: v0nNSTRV39/component
import Button from "../../button/index"; // plasmic-import: JU1t0P9pFY/component
import MemberItem from "../../memberitem/index"; // plasmic-import: D8Y_2wee1o/component
import VisibilityState from "../../visibilitystate/index"; // plasmic-import: pG3eTcOvTW0/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicShare.module.css"; // plasmic-import: Ockk5wTs5Zq/css

import IconHashIcon from "./icons/PlasmicIcon__IconHash"; // plasmic-import: AVLV6uMr56/icon
import IconPlusIcon from "./icons/PlasmicIcon__IconPlus"; // plasmic-import: B5QLKmr2tW/icon
import IconRightIcon from "./icons/PlasmicIcon__IconRight"; // plasmic-import: v822ZhrBq/icon
import IconLinkIcon from "./icons/PlasmicIcon__IconLink"; // plasmic-import: 0QuxgUi0r/icon
import IconMemberIcon from "./icons/PlasmicIcon__IconMember"; // plasmic-import: Vx3fG4Fxc/icon
import LockIconsvgIcon from "./icons/PlasmicIcon__LockIconsvg"; // plasmic-import: 1tBTTGMGvG/icon
import IconPublicsvgIcon from "./icons/PlasmicIcon__IconPublicsvg"; // plasmic-import: DkUt8Ihq_s/icon

export type PlasmicShare__VariantMembers = {
  type: "timeline" | "venture";
  visibilitySelect: "_private" | "_public" | "members";
  isOwner: "isOwner";
};

export type PlasmicShare__VariantsArgs = {
  type?: SingleChoiceArg<"timeline" | "venture">;
  visibilitySelect?: SingleChoiceArg<"_private" | "_public" | "members">;
  isOwner?: SingleBooleanChoiceArg<"isOwner">;
};

type VariantPropType = keyof PlasmicShare__VariantsArgs;
export const PlasmicShare__VariantProps = new Array<VariantPropType>(
  "type",
  "visibilitySelect",
  "isOwner"
);

export type PlasmicShare__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot42?: React.ReactNode;
  slot32?: React.ReactNode;
  slot422?: React.ReactNode;
  slot322?: React.ReactNode;
  slot43?: React.ReactNode;
  slot33?: React.ReactNode;
  children2?: React.ReactNode;
  slot5?: React.ReactNode;
  slot2?: React.ReactNode;
  slot6?: React.ReactNode;
  slot7?: React.ReactNode;
  children3?: React.ReactNode;
  slot44?: React.ReactNode;
  slot34?: React.ReactNode;
  slot45?: React.ReactNode;
  slot35?: React.ReactNode;
  slot46?: React.ReactNode;
  slot36?: React.ReactNode;
  slot47?: React.ReactNode;
  slot37?: React.ReactNode;
  slot48?: React.ReactNode;
  slot38?: React.ReactNode;
};

type ArgPropType = keyof PlasmicShare__ArgsType;
export const PlasmicShare__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot3",
  "slot4",
  "slot42",
  "slot32",
  "slot422",
  "slot322",
  "slot43",
  "slot33",
  "children2",
  "slot5",
  "slot2",
  "slot6",
  "slot7",
  "children3",
  "slot44",
  "slot34",
  "slot45",
  "slot35",
  "slot46",
  "slot36",
  "slot47",
  "slot37",
  "slot48",
  "slot38"
);

export type PlasmicShare__OverridesType = {
  root?: p.Flex<"div">;
  form?: p.Flex<"form">;
  email?: p.Flex<typeof InputText>;
  invite?: p.Flex<typeof Button>;
  span?: p.Flex<"span">;
  email2?: p.Flex<typeof InputText>;
  membersContainer?: p.Flex<"div">;
  wrapper?: p.Flex<"div">;
  text2?: p.Flex<"div">;
  visibilityState?: p.Flex<typeof VisibilityState>;
  copyLink?: p.Flex<"div">;
};

export interface DefaultShareProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot42?: React.ReactNode;
  slot32?: React.ReactNode;
  slot422?: React.ReactNode;
  slot322?: React.ReactNode;
  slot43?: React.ReactNode;
  slot33?: React.ReactNode;
  children2?: React.ReactNode;
  slot5?: React.ReactNode;
  slot2?: React.ReactNode;
  slot6?: React.ReactNode;
  slot7?: React.ReactNode;
  children3?: React.ReactNode;
  slot44?: React.ReactNode;
  slot34?: React.ReactNode;
  slot45?: React.ReactNode;
  slot35?: React.ReactNode;
  slot46?: React.ReactNode;
  slot36?: React.ReactNode;
  slot47?: React.ReactNode;
  slot37?: React.ReactNode;
  slot48?: React.ReactNode;
  slot38?: React.ReactNode;
  type?: SingleChoiceArg<"timeline" | "venture">;
  visibilitySelect?: SingleChoiceArg<"_private" | "_public" | "members">;
  isOwner?: SingleBooleanChoiceArg<"isOwner">;
  className?: string;
}

function PlasmicShare__RenderFunc(props: {
  variants: PlasmicShare__VariantsArgs;
  args: PlasmicShare__ArgsType;
  overrides: PlasmicShare__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.rootisOwner]: hasVariant(variants, "isOwner", "isOwner"),
        [sty.roottype_venture]: hasVariant(variants, "type", "venture"),
      })}
    >
      <div className={classNames(projectcss.all, sty.freeBox___8PKum)}>
        {(hasVariant(variants, "type", "venture") ? false : true)
          ? p.renderPlasmicSlot({
              defaultContents: "Timeline Members",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrentype_timeline]: hasVariant(
                  variants,
                  "type",
                  "timeline"
                ),
                [sty.slotTargetChildrentype_venture]: hasVariant(
                  variants,
                  "type",
                  "venture"
                ),
              }),
            })
          : null}
        {(
          hasVariant(variants, "type", "venture")
            ? true
            : hasVariant(variants, "type", "timeline")
            ? false
            : false
        )
          ? p.renderPlasmicSlot({
              defaultContents: "Network Members",
              value: args.children3,
              className: classNames(sty.slotTargetChildren3, {
                [sty.slotTargetChildren3type_timeline]: hasVariant(
                  variants,
                  "type",
                  "timeline"
                ),
                [sty.slotTargetChildren3type_venture]: hasVariant(
                  variants,
                  "type",
                  "venture"
                ),
              }),
            })
          : null}
        {false
          ? p.renderPlasmicSlot({
              defaultContents:
                "Enter their email to invite and add them to this organization.",
              value: args.slot,
            })
          : null}
      </div>

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__pA5XW)}>
          {false
            ? p.renderPlasmicSlot({
                defaultContents: "Timeline Members",
                value: args.children2,
                className: classNames(sty.slotTargetChildren2),
              })
            : null}
          {false
            ? p.renderPlasmicSlot({
                defaultContents:
                  "Add members from your venture to the timeline",
                value: args.slot5,
              })
            : null}
        </div>
      ) : null}

      <div
        className={classNames(projectcss.all, sty.freeBox___80D2Z, {
          [sty.freeBoxtype_venture_isOwner___80D2Z49PC95R44R]:
            hasVariant(variants, "type", "venture") &&
            hasVariant(variants, "isOwner", "isOwner"),
        })}
      >
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__dKcM4)}
          >
            <p.Stack
              as={"form"}
              data-plasmic-name={"form"}
              data-plasmic-override={overrides.form}
              hasGap={true}
              className={classNames(projectcss.all, sty.form)}
            >
              <InputText
                data-plasmic-name={"email"}
                data-plasmic-override={overrides.email}
                hasLabel={true}
                hasTextHelper={true}
                label={"Invite a member by email"}
              >
                {
                  "Enter their email to invite and add them to this organization."
                }
              </InputText>

              <Button
                data-plasmic-name={"invite"}
                data-plasmic-override={overrides.invite}
                buttonFeatures={["nonFullWidth", "removeText", "showStartIcon"]}
                className={classNames("__wab_instance", sty.invite)}
                count={"1"}
                text2={"Button"}
              />
            </p.Stack>

            {false ? (
              <p.Stack
                as={"a"}
                hasGap={true}
                className={classNames(projectcss.a, sty.link__fnYec)}
              >
                <IconLinkIcon
                  className={classNames(projectcss.all, sty.svg__td3Iw)}
                  role={"img"}
                />

                <span
                  data-plasmic-name={"span"}
                  data-plasmic-override={overrides.span}
                  className={classNames(
                    projectcss.span,
                    projectcss.__wab_text,
                    sty.span
                  )}
                >
                  {"Copy Invite Link"}
                </span>
              </p.Stack>
            ) : null}
          </p.Stack>
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__sRTx)}
          >
            <InputText
              data-plasmic-name={"email2"}
              data-plasmic-override={overrides.email2}
              className={classNames("__wab_instance", sty.email2, {
                [sty.email2type_timeline]: hasVariant(
                  variants,
                  "type",
                  "timeline"
                ),
              })}
              hasLabel={true}
              label={
                hasVariant(variants, "isOwner", "isOwner")
                  ? "Find or add members"
                  : "Find members"
              }
            />

            <Button
              buttonFeatures={["removeText", "showStartIcon", "nonFullWidth"]}
              className={classNames("__wab_instance", sty.button__eyLcD, {
                [sty.buttontype_timeline__eyLcD8Drt6]: hasVariant(
                  variants,
                  "type",
                  "timeline"
                ),
                [sty.buttontype_venture__eyLcD49PC9]: hasVariant(
                  variants,
                  "type",
                  "venture"
                ),
                [sty.buttonvisibilitySelect__private__eyLcDdcTzL]: hasVariant(
                  variants,
                  "visibilitySelect",
                  "_private"
                ),
              })}
              count={"1"}
              text2={"Button"}
            />
          </p.Stack>
        ) : null}
        {true ? (
          <div
            data-plasmic-name={"membersContainer"}
            data-plasmic-override={overrides.membersContainer}
            className={classNames(projectcss.all, sty.membersContainer)}
          >
            <div
              data-plasmic-name={"wrapper"}
              data-plasmic-override={overrides.wrapper}
              className={classNames(projectcss.all, sty.wrapper, {
                [sty.wrappervisibilitySelect__private]: hasVariant(
                  variants,
                  "visibilitySelect",
                  "_private"
                ),
              })}
            >
              <MemberItem
                className={classNames("__wab_instance", sty.memberItem__dYKyI, {
                  [sty.memberItemvisibilitySelect__private__dYKyIdcTzL]:
                    hasVariant(variants, "visibilitySelect", "_private"),
                })}
                isOwner={true}
                slot3={p.renderPlasmicSlot({
                  defaultContents: "example@email.com",
                  value: args.slot3,
                })}
                userName={p.renderPlasmicSlot({
                  defaultContents: "User Name",
                  value: args.slot4,
                })}
                userVariant={"isRequested" as const}
                ventureTimeline={"isTimeline" as const}
              />

              <MemberItem
                className={classNames("__wab_instance", sty.memberItem__f7Hx8)}
                isOwner={true}
                slot3={p.renderPlasmicSlot({
                  defaultContents: "example@email.com",
                  value: args.slot33,
                })}
                userName={p.renderPlasmicSlot({
                  defaultContents: "example@email.com",
                  value: args.slot43,
                })}
                userVariant={"isAdmin" as const}
              />

              <MemberItem
                className={classNames("__wab_instance", sty.memberItem__ppsSh)}
                isOwner={true}
                slot3={p.renderPlasmicSlot({
                  defaultContents: "example@email.com",
                  value: args.slot34,
                })}
                userName={p.renderPlasmicSlot({
                  defaultContents: "example@email.com",
                  value: args.slot44,
                })}
                userVariant={"isAdmin" as const}
              />

              <MemberItem
                className={classNames("__wab_instance", sty.memberItem__kioF, {
                  [sty.memberItemisOwner__kioF5R44R]: hasVariant(
                    variants,
                    "isOwner",
                    "isOwner"
                  ),
                  [sty.memberItemtype_venture_isOwner__kioF49PC95R44R]:
                    hasVariant(variants, "type", "venture") &&
                    hasVariant(variants, "isOwner", "isOwner"),
                })}
                slot3={p.renderPlasmicSlot({
                  defaultContents: "example@email.com",
                  value: args.slot322,
                })}
                userName={p.renderPlasmicSlot({
                  defaultContents: "User Name",
                  value: args.slot422,
                })}
                userVariant={"isMember" as const}
              />

              <MemberItem
                className={classNames("__wab_instance", sty.memberItem___4Ardk)}
                slot3={p.renderPlasmicSlot({
                  defaultContents: "example@email.com",
                  value: args.slot32,
                })}
                userName={p.renderPlasmicSlot({
                  defaultContents: "User Name",
                  value: args.slot42,
                })}
                userVariant={"isAdmin" as const}
              />

              <MemberItem
                className={classNames("__wab_instance", sty.memberItem__sojRo)}
                slot3={p.renderPlasmicSlot({
                  defaultContents: "example@email.com",
                  value: args.slot35,
                })}
                userName={p.renderPlasmicSlot({
                  defaultContents: "User Name",
                  value: args.slot45,
                })}
                userVariant={"isAdmin" as const}
              />

              <MemberItem
                className={classNames("__wab_instance", sty.memberItem__b1Vsq)}
                slot3={p.renderPlasmicSlot({
                  defaultContents: "example@email.com",
                  value: args.slot36,
                })}
                userName={p.renderPlasmicSlot({
                  defaultContents: "User Name",
                  value: args.slot46,
                })}
                userVariant={"isAdmin" as const}
              />

              <MemberItem
                className={classNames("__wab_instance", sty.memberItem__uuiMa)}
                slot3={p.renderPlasmicSlot({
                  defaultContents: "example@email.com",
                  value: args.slot37,
                })}
                userName={p.renderPlasmicSlot({
                  defaultContents: "User Name",
                  value: args.slot47,
                })}
                userVariant={"isAdmin" as const}
              />

              <MemberItem
                className={classNames("__wab_instance", sty.memberItem___8Pg7I)}
                slot3={p.renderPlasmicSlot({
                  defaultContents: "example@email.com",
                  value: args.slot38,
                })}
                userName={p.renderPlasmicSlot({
                  defaultContents: "User Name",
                  value: args.slot48,
                })}
                userVariant={"isAdmin" as const}
              />
            </div>
          </div>
        ) : null}
      </div>

      {false ? (
        <div className={classNames(projectcss.all, sty.freeBox___1T51C)}>
          <Button
            buttonStyle={"primaryPurple" as const}
            count={"1"}
            slot={
              <IconPlusIcon
                className={classNames(projectcss.all, sty.svg___54CX6)}
                role={"img"}
              />
            }
            text2={
              <div
                data-plasmic-name={"text2"}
                data-plasmic-override={overrides.text2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text2
                )}
              >
                {"Done"}
              </div>
            }
          >
            <IconRightIcon
              className={classNames(projectcss.all, sty.svg__yA5Ka)}
              role={"img"}
            />
          </Button>
        </div>
      ) : null}
      {(
        hasVariant(variants, "type", "venture") &&
        hasVariant(variants, "isOwner", "isOwner")
          ? true
          : hasVariant(variants, "isOwner", "isOwner")
          ? true
          : true
      ) ? (
        <VisibilityState
          data-plasmic-name={"visibilityState"}
          data-plasmic-override={overrides.visibilityState}
          className={classNames("__wab_instance", sty.visibilityState, {
            [sty.visibilityStateisOwner]: hasVariant(
              variants,
              "isOwner",
              "isOwner"
            ),
            [sty.visibilityStatetype_venture_isOwner]:
              hasVariant(variants, "type", "venture") &&
              hasVariant(variants, "isOwner", "isOwner"),
            [sty.visibilityStatevisibilitySelect__public]: hasVariant(
              variants,
              "visibilitySelect",
              "_public"
            ),
            [sty.visibilityStatevisibilitySelect_members]: hasVariant(
              variants,
              "visibilitySelect",
              "members"
            ),
          })}
          slot2={p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lnKnZ
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Members"}
                  </span>
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            ),

            value: args.slot2,
          })}
          slot6={p.renderPlasmicSlot({
            defaultContents:
              "All members from this network can see this timeline.",
            value: args.slot6,
          })}
          slot7={p.renderPlasmicSlot({
            defaultContents: (
              <IconMemberIcon
                className={classNames(projectcss.all, sty.svg__u3Tfv)}
                role={"img"}
              />
            ),

            value: args.slot7,
          })}
          visibilityType={"_public" as const}
        />
      ) : null}
      {(hasVariant(variants, "isOwner", "isOwner") ? true : true) ? (
        <div
          data-plasmic-name={"copyLink"}
          data-plasmic-override={overrides.copyLink}
          className={classNames(projectcss.all, sty.copyLink, {
            [sty.copyLinkisOwner]: hasVariant(variants, "isOwner", "isOwner"),
            [sty.copyLinktype_venture_isOwner]:
              hasVariant(variants, "type", "venture") &&
              hasVariant(variants, "isOwner", "isOwner"),
          })}
        >
          {(hasVariant(variants, "isOwner", "isOwner") ? true : true) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__embnu, {
                [sty.freeBoxisOwner__embnu5R44R]: hasVariant(
                  variants,
                  "isOwner",
                  "isOwner"
                ),
                [sty.freeBoxtype_venture__embnu49PC9]: hasVariant(
                  variants,
                  "type",
                  "venture"
                ),
              })}
            >
              <IconLinkIcon
                className={classNames(projectcss.all, sty.svg__bmBbJ)}
                role={"img"}
              />

              <a
                className={classNames(
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__xvzZ8,
                  {
                    [sty.linktype_venture__xvzZ849PC9]: hasVariant(
                      variants,
                      "type",
                      "venture"
                    ),
                  }
                )}
              >
                {"Copy Share Link"}
              </a>
            </p.Stack>
          ) : null}
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "form",
    "email",
    "invite",
    "span",
    "email2",
    "membersContainer",
    "wrapper",
    "text2",
    "visibilityState",
    "copyLink",
  ],
  form: ["form", "email", "invite"],
  email: ["email"],
  invite: ["invite"],
  span: ["span"],
  email2: ["email2"],
  membersContainer: ["membersContainer", "wrapper"],
  wrapper: ["wrapper"],
  text2: ["text2"],
  visibilityState: ["visibilityState"],
  copyLink: ["copyLink"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  form: "form";
  email: typeof InputText;
  invite: typeof Button;
  span: "span";
  email2: typeof InputText;
  membersContainer: "div";
  wrapper: "div";
  text2: "div";
  visibilityState: typeof VisibilityState;
  copyLink: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShare__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShare__VariantsArgs;
    args?: PlasmicShare__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShare__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicShare__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicShare__ArgProps,
      internalVariantPropNames: PlasmicShare__VariantProps,
    });

    return PlasmicShare__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShare";
  } else {
    func.displayName = `PlasmicShare.${nodeName}`;
  }
  return func;
}

export const PlasmicShare = Object.assign(
  // Top-level PlasmicShare renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    email: makeNodeComponent("email"),
    invite: makeNodeComponent("invite"),
    span: makeNodeComponent("span"),
    email2: makeNodeComponent("email2"),
    membersContainer: makeNodeComponent("membersContainer"),
    wrapper: makeNodeComponent("wrapper"),
    text2: makeNodeComponent("text2"),
    visibilityState: makeNodeComponent("visibilityState"),
    copyLink: makeNodeComponent("copyLink"),

    // Metadata about props expected for PlasmicShare
    internalVariantProps: PlasmicShare__VariantProps,
    internalArgProps: PlasmicShare__ArgProps,
  }
);

export default PlasmicShare;
/* prettier-ignore-end */
