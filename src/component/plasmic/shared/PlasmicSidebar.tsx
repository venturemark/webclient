// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: FZWTu4L61t
import * as React from "react";
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  Stack
} from "@plasmicapp/react-web";
import SidebarItem from "../../sidebaritem/index"; // plasmic-import: KDElHbQmfd/component
import IconButton from "../../iconbutton/index"; // plasmic-import: odPjbfT2kyJgB_S/component

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicSidebar.module.css"; // plasmic-import: FZWTu4L61t/css

import IconHomeIcon from "./icons/PlasmicIcon__IconHome"; // plasmic-import: Z6YqF7wXr6/icon
import IconAddIcon from "./icons/PlasmicIcon__IconAdd"; // plasmic-import: gg_6iBfcsu/icon
import IconCheckIcon from "./icons/PlasmicIcon__IconCheck"; // plasmic-import: MwyR6vQxWa/icon
import IconSettingsIcon from "./icons/PlasmicIcon__IconSettings"; // plasmic-import: o3m824rpnQ/icon

export type PlasmicSidebar__VariantMembers = {
  hasValue: "hasValue";
};

export type PlasmicSidebar__VariantsArgs = {
  hasValue?: SingleBooleanChoiceArg<"hasValue">;
};

type VariantPropType = keyof PlasmicSidebar__VariantsArgs;
export const PlasmicSidebar__VariantProps = new Array<VariantPropType>(
  "hasValue"
);

export type PlasmicSidebar__ArgsType = {};
type ArgPropType = keyof PlasmicSidebar__ArgsType;
export const PlasmicSidebar__ArgProps = new Array<ArgPropType>();

export type PlasmicSidebar__OverridesType = {
  root?: Flex<"div">;
  topSidebar?: Flex<"div">;
  homeItem?: Flex<typeof SidebarItem>;
  timelinesContainer?: Flex<"div">;
  bottomSidebar?: Flex<"div">;
  sidebarForm?: Flex<"form">;
  addTimelineInput?: Flex<"input">;
  addTimeline?: Flex<typeof IconButton>;
  settingsContainer?: Flex<"div">;
  profileItem?: Flex<typeof SidebarItem>;
  settingsItem?: Flex<typeof SidebarItem>;
};

export interface DefaultSidebarProps {
  hasValue?: SingleBooleanChoiceArg<"hasValue">;
  className?: string;
}

function PlasmicSidebar__RenderFunc(props: {
  variants: PlasmicSidebar__VariantsArgs;
  args: PlasmicSidebar__ArgsType;
  overrides: PlasmicSidebar__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(sty.root, projectcss.root_reset, defaultcss.all, {
        [sty.root__hasValue]: hasVariant(variants, "hasValue", "hasValue")
      })}
    >
      <Stack
        as={"div"}
        data-plasmic-name={"topSidebar"}
        data-plasmic-override={overrides.topSidebar}
        hasGap={true}
        className={classNames(sty.topSidebar, defaultcss.all)}
      >
        <SidebarItem
          data-plasmic-name={"homeItem"}
          data-plasmic-override={overrides.homeItem}
          className={classNames(sty.homeItem, "__wab_instance", {
            [sty.homeItem__hasValue]: hasVariant(
              variants,
              "hasValue",
              "hasValue"
            )
          })}
          hasIcon={"hasIcon" as const}
          name={
            <div
              className={classNames(
                sty.box__kfUkZ,
                defaultcss.all,
                defaultcss.__wab_text,
                {
                  [sty.box__hasValue__kfUkZjgEIm]: hasVariant(
                    variants,
                    "hasValue",
                    "hasValue"
                  )
                }
              )}
            >
              {"HOME"}
            </div>
          }
          startIcon={
            <IconHomeIcon
              className={classNames(sty.svg__vBlK, defaultcss.all, {
                [sty.svg__hasValue__vBlKjgEIm]: hasVariant(
                  variants,
                  "hasValue",
                  "hasValue"
                )
              })}
              role={"img"}
            />
          }
        />

        <Stack
          as={"div"}
          data-plasmic-name={"timelinesContainer"}
          data-plasmic-override={overrides.timelinesContainer}
          hasGap={true}
          className={classNames(sty.timelinesContainer, defaultcss.all)}
        >
          <SidebarItem
            className={classNames(sty.sidebarItem__iKtWk, "__wab_instance")}
            name={
              <div
                className={classNames(
                  sty.box__pMluL,
                  defaultcss.all,
                  defaultcss.__wab_text
                )}
              >
                {"Features Shipped"}
              </div>
            }
          />

          <SidebarItem
            className={classNames(sty.sidebarItem__e6KpG, "__wab_instance")}
            name={
              <div
                className={classNames(
                  sty.box__jgsq,
                  defaultcss.all,
                  defaultcss.__wab_text
                )}
              >
                {"Revenue"}
              </div>
            }
          />

          <SidebarItem
            className={classNames(sty.sidebarItem__zGgf7, "__wab_instance")}
            name={
              <div
                className={classNames(
                  sty.box___7F5M7,
                  defaultcss.all,
                  defaultcss.__wab_text,
                  {
                    [sty.box__hasValue___7F5M7JgEIm]: hasVariant(
                      variants,
                      "hasValue",
                      "hasValue"
                    )
                  }
                )}
              >
                {"Active Users"}
              </div>
            }
          />

          <SidebarItem
            className={classNames(sty.sidebarItem__yHw7F, "__wab_instance")}
            name={
              <div
                className={classNames(
                  sty.box___7SQ2,
                  defaultcss.all,
                  defaultcss.__wab_text
                )}
              >
                {"Milestones"}
              </div>
            }
          />
        </Stack>
      </Stack>

      <Stack
        as={"div"}
        data-plasmic-name={"bottomSidebar"}
        data-plasmic-override={overrides.bottomSidebar}
        hasGap={true}
        className={classNames(sty.bottomSidebar, defaultcss.all, {
          [sty.bottomSidebar__hasValue]: hasVariant(
            variants,
            "hasValue",
            "hasValue"
          )
        })}
      >
        <Stack
          as={"form"}
          data-plasmic-name={"sidebarForm"}
          data-plasmic-override={overrides.sidebarForm}
          hasGap={true}
          className={classNames(sty.sidebarForm, defaultcss.all, {
            [sty.sidebarForm__hasValue]: hasVariant(
              variants,
              "hasValue",
              "hasValue"
            )
          })}
        >
          <input
            data-plasmic-name={"addTimelineInput"}
            data-plasmic-override={overrides.addTimelineInput}
            className={classNames(sty.addTimelineInput, defaultcss.input, {
              [sty.addTimelineInput__hasValue]: hasVariant(
                variants,
                "hasValue",
                "hasValue"
              )
            })}
            placeholder={"Add Timeline" as const}
            size={1 as const}
            type={"text" as const}
          />

          <IconButton
            data-plasmic-name={"addTimeline"}
            data-plasmic-override={overrides.addTimeline}
            className={classNames(sty.addTimeline, "__wab_instance", {
              [sty.addTimeline__hasValue]: hasVariant(
                variants,
                "hasValue",
                "hasValue"
              )
            })}
            startIcon={
              <PlasmicIcon
                PlasmicIconType={
                  hasVariant(variants, "hasValue", "hasValue")
                    ? IconCheckIcon
                    : IconAddIcon
                }
                className={classNames(sty.svg__hvSal, defaultcss.all, {
                  [sty.svg__hasValue__hvSaLjgEIm]: hasVariant(
                    variants,
                    "hasValue",
                    "hasValue"
                  )
                })}
                role={"img"}
              />
            }
            withIcons={["start"]}
          />
        </Stack>

        <Stack
          as={"div"}
          data-plasmic-name={"settingsContainer"}
          data-plasmic-override={overrides.settingsContainer}
          hasGap={true}
          className={classNames(sty.settingsContainer, defaultcss.all)}
        >
          <SidebarItem
            data-plasmic-name={"profileItem"}
            data-plasmic-override={overrides.profileItem}
            className={classNames(sty.profileItem, "__wab_instance", {
              [sty.profileItem__hasValue]: hasVariant(
                variants,
                "hasValue",
                "hasValue"
              )
            })}
            hasIcon={"hasIcon" as const}
            name={
              <div
                className={classNames(
                  sty.box__hfARo,
                  defaultcss.all,
                  defaultcss.__wab_text,
                  {
                    [sty.box__hasValue__hfARojgEIm]: hasVariant(
                      variants,
                      "hasValue",
                      "hasValue"
                    )
                  }
                )}
              >
                {"Profile"}
              </div>
            }
          />

          <SidebarItem
            data-plasmic-name={"settingsItem"}
            data-plasmic-override={overrides.settingsItem}
            className={classNames(sty.settingsItem, "__wab_instance")}
            hasIcon={"hasIcon" as const}
            name={
              <div
                className={classNames(
                  sty.box__lhM5N,
                  defaultcss.all,
                  defaultcss.__wab_text,
                  {
                    [sty.box__hasValue__lhM5NjgEIm]: hasVariant(
                      variants,
                      "hasValue",
                      "hasValue"
                    )
                  }
                )}
              >
                {"Settings"}
              </div>
            }
            startIcon={
              <IconSettingsIcon
                className={classNames(sty.svg__pblZo, defaultcss.all, {
                  [sty.svg__hasValue__pblZojgEIm]: hasVariant(
                    variants,
                    "hasValue",
                    "hasValue"
                  )
                })}
                role={"img"}
              />
            }
          />
        </Stack>
      </Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "topSidebar",
    "homeItem",
    "timelinesContainer",
    "bottomSidebar",
    "sidebarForm",
    "addTimelineInput",
    "addTimeline",
    "settingsContainer",
    "profileItem",
    "settingsItem"
  ],

  topSidebar: ["topSidebar", "homeItem", "timelinesContainer"],
  homeItem: ["homeItem"],
  timelinesContainer: ["timelinesContainer"],
  bottomSidebar: [
    "bottomSidebar",
    "sidebarForm",
    "addTimelineInput",
    "addTimeline",
    "settingsContainer",
    "profileItem",
    "settingsItem"
  ],

  sidebarForm: ["sidebarForm", "addTimelineInput", "addTimeline"],
  addTimelineInput: ["addTimelineInput"],
  addTimeline: ["addTimeline"],
  settingsContainer: ["settingsContainer", "profileItem", "settingsItem"],
  profileItem: ["profileItem"],
  settingsItem: ["settingsItem"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  topSidebar: "div";
  homeItem: typeof SidebarItem;
  timelinesContainer: "div";
  bottomSidebar: "div";
  sidebarForm: "form";
  addTimelineInput: "input";
  addTimeline: typeof IconButton;
  settingsContainer: "div";
  profileItem: typeof SidebarItem;
  settingsItem: typeof SidebarItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebar__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebar__VariantsArgs;
    args?: PlasmicSidebar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & // Specify variants directly as props
  Omit<PlasmicSidebar__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicSidebar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSidebar__ArgProps,
      internalVariantPropNames: PlasmicSidebar__VariantProps
    });

    return PlasmicSidebar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebar";
  } else {
    func.displayName = `PlasmicSidebar.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebar = Object.assign(
  // Top-level PlasmicSidebar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topSidebar: makeNodeComponent("topSidebar"),
    homeItem: makeNodeComponent("homeItem"),
    timelinesContainer: makeNodeComponent("timelinesContainer"),
    bottomSidebar: makeNodeComponent("bottomSidebar"),
    sidebarForm: makeNodeComponent("sidebarForm"),
    addTimelineInput: makeNodeComponent("addTimelineInput"),
    addTimeline: makeNodeComponent("addTimeline"),
    settingsContainer: makeNodeComponent("settingsContainer"),
    profileItem: makeNodeComponent("profileItem"),
    settingsItem: makeNodeComponent("settingsItem"),

    // Metadata about props expected for PlasmicSidebar
    internalVariantProps: PlasmicSidebar__VariantProps,
    internalArgProps: PlasmicSidebar__ArgProps
  }
);

export default PlasmicSidebar;
/* prettier-ignore-end */
