// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: FZWTu4L61t
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import SidebarItemGroup from "../../sidebaritemgroup/index"; // plasmic-import: JQWYItyW5A/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import * as sty from "./PlasmicSidebar.module.css"; // plasmic-import: FZWTu4L61t/css

export type PlasmicSidebar__VariantMembers = {
  hasInput: "hasInput";
};

export type PlasmicSidebar__VariantsArgs = {
  hasInput?: SingleBooleanChoiceArg<"hasInput">;
};

type VariantPropType = keyof PlasmicSidebar__VariantsArgs;
export const PlasmicSidebar__VariantProps = new Array<VariantPropType>(
  "hasInput"
);

export type PlasmicSidebar__ArgsType = {};
type ArgPropType = keyof PlasmicSidebar__ArgsType;
export const PlasmicSidebar__ArgProps = new Array<ArgPropType>();

export type PlasmicSidebar__OverridesType = {
  root?: p.Flex<"div">;
  topSidebar?: p.Flex<"div">;
  scrollContainer?: p.Flex<"div">;
  itemGroupContainer?: p.Flex<"div">;
  sidebarItemGroup?: p.Flex<typeof SidebarItemGroup>;
  box?: p.Flex<"div">;
  viewCreateVenture?: p.Flex<"a">;
};

export interface DefaultSidebarProps {
  hasInput?: SingleBooleanChoiceArg<"hasInput">;
  className?: string;
}

function PlasmicSidebar__RenderFunc(props: {
  variants: PlasmicSidebar__VariantsArgs;
  args: PlasmicSidebar__ArgsType;
  overrides: PlasmicSidebar__OverridesType;
  dataFetches?: PlasmicSidebar__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__hasInput]: hasVariant(variants, "hasInput", "hasInput"),
      })}
    >
      <div
        data-plasmic-name={"topSidebar"}
        data-plasmic-override={overrides.topSidebar}
        className={classNames(defaultcss.all, sty.topSidebar, {
          [sty.topSidebar__hasInput]: hasVariant(
            variants,
            "hasInput",
            "hasInput"
          ),
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"scrollContainer"}
          data-plasmic-override={overrides.scrollContainer}
          hasGap={true}
          className={classNames(defaultcss.all, sty.scrollContainer, {
            [sty.scrollContainer__hasInput]: hasVariant(
              variants,
              "hasInput",
              "hasInput"
            ),
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"itemGroupContainer"}
            data-plasmic-override={overrides.itemGroupContainer}
            hasGap={true}
            className={classNames(defaultcss.all, sty.itemGroupContainer)}
          >
            {(hasVariant(variants, "hasInput", "hasInput") ? true : false) ? (
              <SidebarItemGroup
                data-plasmic-name={"sidebarItemGroup"}
                data-plasmic-override={overrides.sidebarItemGroup}
                isOwner={"isOwner" as const}
              />
            ) : null}
          </p.Stack>

          <div
            data-plasmic-name={"box"}
            data-plasmic-override={overrides.box}
            className={classNames(defaultcss.all, sty.box)}
          >
            <a
              data-plasmic-name={"viewCreateVenture"}
              data-plasmic-override={overrides.viewCreateVenture}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.viewCreateVenture
              )}
            >
              {"Create New Venture"}
            </a>
          </div>
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "topSidebar",
    "scrollContainer",
    "itemGroupContainer",
    "sidebarItemGroup",
    "box",
    "viewCreateVenture",
  ],
  topSidebar: [
    "topSidebar",
    "scrollContainer",
    "itemGroupContainer",
    "sidebarItemGroup",
    "box",
    "viewCreateVenture",
  ],
  scrollContainer: [
    "scrollContainer",
    "itemGroupContainer",
    "sidebarItemGroup",
    "box",
    "viewCreateVenture",
  ],
  itemGroupContainer: ["itemGroupContainer", "sidebarItemGroup"],
  sidebarItemGroup: ["sidebarItemGroup"],
  box: ["box", "viewCreateVenture"],
  viewCreateVenture: ["viewCreateVenture"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  topSidebar: "div";
  scrollContainer: "div";
  itemGroupContainer: "div";
  sidebarItemGroup: typeof SidebarItemGroup;
  box: "div";
  viewCreateVenture: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicSidebar__VariantsArgs;
  args?: PlasmicSidebar__ArgsType;
  overrides?: NodeOverridesType<T>;
  dataFetches?: PlasmicSidebar__Fetches;
} & Omit<PlasmicSidebar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicSidebar__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSidebar__ArgProps,
      internalVariantPropNames: PlasmicSidebar__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicSidebar__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebar";
  } else {
    func.displayName = `PlasmicSidebar.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebar = Object.assign(
  // Top-level PlasmicSidebar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topSidebar: makeNodeComponent("topSidebar"),
    scrollContainer: makeNodeComponent("scrollContainer"),
    itemGroupContainer: makeNodeComponent("itemGroupContainer"),
    sidebarItemGroup: makeNodeComponent("sidebarItemGroup"),
    box: makeNodeComponent("box"),
    viewCreateVenture: makeNodeComponent("viewCreateVenture"),

    // Metadata about props expected for PlasmicSidebar
    internalVariantProps: PlasmicSidebar__VariantProps,
    internalArgProps: PlasmicSidebar__ArgProps,
  }
);

export default PlasmicSidebar;
/* prettier-ignore-end */
