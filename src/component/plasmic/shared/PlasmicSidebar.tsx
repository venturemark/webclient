// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: FZWTu4L61t
import * as React from "react";
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  Stack,
} from "@plasmicapp/react-web";
import SidebarItem from "../../sidebaritem/index"; // plasmic-import: KDElHbQmfd/component
import IconButton from "../../iconbutton/index"; // plasmic-import: odPjbfT2kyJgB_S/component

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicSidebar.module.css"; // plasmic-import: FZWTu4L61t/css

import IconHomeIcon from "./icons/PlasmicIcon__IconHome"; // plasmic-import: Z6YqF7wXr6/icon
import IconSettingsIcon from "./icons/PlasmicIcon__IconSettings"; // plasmic-import: o3m824rpnQ/icon
import IconAddIcon from "./icons/PlasmicIcon__IconAdd"; // plasmic-import: gg_6iBfcsu/icon
import IconCheckIcon from "./icons/PlasmicIcon__IconCheck"; // plasmic-import: MwyR6vQxWa/icon

export type PlasmicSidebar__VariantMembers = {
  hasValue: "hasValue";
};

export type PlasmicSidebar__VariantsArgs = {
  hasValue?: SingleBooleanChoiceArg<"hasValue">;
};

type VariantPropType = keyof PlasmicSidebar__VariantsArgs;
export const PlasmicSidebar__VariantProps = new Array<VariantPropType>(
  "hasValue"
);

export type PlasmicSidebar__ArgsType = {};
type ArgPropType = keyof PlasmicSidebar__ArgsType;
export const PlasmicSidebar__ArgProps = new Array<ArgPropType>();

export type PlasmicSidebar__OverridesType = {
  root?: Flex<"div">;
  topSidebar?: Flex<"div">;
  homeItem?: Flex<typeof SidebarItem>;
  scrollContainer?: Flex<"div">;
  settingsContainer?: Flex<"div">;
  settingsItem?: Flex<typeof SidebarItem>;
  startIcon3?: Flex<"svg">;
  timelinesContainer?: Flex<"div">;
  sidebarForm?: Flex<"form">;
  addTimelineInput?: Flex<"input">;
  addTimeline?: Flex<typeof IconButton>;
  startIcon2?: Flex<"svg">;
  endIcon?: Flex<"svg">;
};

export interface DefaultSidebarProps {
  hasValue?: SingleBooleanChoiceArg<"hasValue">;
  className?: string;
}

function PlasmicSidebar__RenderFunc(props: {
  variants: PlasmicSidebar__VariantsArgs;
  args: PlasmicSidebar__ArgsType;
  overrides: PlasmicSidebar__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(sty.root, projectcss.root_reset, defaultcss.all, {
        [sty.root__hasValue]: hasVariant(variants, "hasValue", "hasValue"),
      })}
    >
      <Stack
        as={"div"}
        data-plasmic-name={"topSidebar"}
        data-plasmic-override={overrides.topSidebar}
        hasGap={true}
        className={classNames(sty.topSidebar, defaultcss.all)}
      >
        <SidebarItem
          data-plasmic-name={"homeItem"}
          data-plasmic-override={overrides.homeItem}
          className={classNames(sty.homeItem, "__wab_instance", {
            [sty.homeItem__hasValue]: hasVariant(
              variants,
              "hasValue",
              "hasValue"
            ),
          })}
          hasIcon={"hasIcon" as const}
          name={
            <div
              className={classNames(
                sty.box__kfUkZ,
                defaultcss.all,
                defaultcss.__wab_text,
                {
                  [sty.box__hasValue__kfUkZjgEIm]: hasVariant(
                    variants,
                    "hasValue",
                    "hasValue"
                  ),
                }
              )}
            >
              {"HOME"}
            </div>
          }
          startIcon={
            <IconHomeIcon
              className={classNames(sty.svg__vBlK, defaultcss.all, {
                [sty.svg__hasValue__vBlKjgEIm]: hasVariant(
                  variants,
                  "hasValue",
                  "hasValue"
                ),
              })}
              role={"img"}
            />
          }
        />

        <div
          data-plasmic-name={"scrollContainer"}
          data-plasmic-override={overrides.scrollContainer}
          className={classNames(sty.scrollContainer, defaultcss.all)}
        >
          <Stack
            as={"div"}
            data-plasmic-name={"settingsContainer"}
            data-plasmic-override={overrides.settingsContainer}
            hasGap={true}
            className={classNames(sty.settingsContainer, defaultcss.all)}
          >
            <SidebarItem
              data-plasmic-name={"settingsItem"}
              data-plasmic-override={overrides.settingsItem}
              className={classNames(sty.settingsItem, "__wab_instance")}
              hasIcon={"hasIcon" as const}
              name={
                <div
                  className={classNames(
                    sty.box__lhM5N,
                    defaultcss.all,
                    defaultcss.__wab_text,
                    {
                      [sty.box__hasValue__lhM5NjgEIm]: hasVariant(
                        variants,
                        "hasValue",
                        "hasValue"
                      ),
                    }
                  )}
                >
                  {"Menu"}
                </div>
              }
              startIcon={
                <IconSettingsIcon
                  data-plasmic-name={"startIcon3"}
                  data-plasmic-override={overrides.startIcon3}
                  className={classNames(sty.startIcon3, defaultcss.all, {
                    [sty.startIcon3__hasValue]: hasVariant(
                      variants,
                      "hasValue",
                      "hasValue"
                    ),
                  })}
                  role={"img"}
                />
              }
            />
          </Stack>

          <Stack
            as={"div"}
            data-plasmic-name={"timelinesContainer"}
            data-plasmic-override={overrides.timelinesContainer}
            hasGap={true}
            className={classNames(sty.timelinesContainer, defaultcss.all)}
          >
            <SidebarItem
              className={classNames(sty.sidebarItem__iKtWk, "__wab_instance")}
              name={
                <div
                  className={classNames(
                    sty.box__pMluL,
                    defaultcss.all,
                    defaultcss.__wab_text
                  )}
                >
                  {"Features Shipped"}
                </div>
              }
              startIcon={
                <IconHomeIcon
                  className={classNames(sty.svg___0F7J, defaultcss.all)}
                  role={"img"}
                />
              }
            />

            <SidebarItem
              className={classNames(sty.sidebarItem__e6KpG, "__wab_instance")}
              name={
                <div
                  className={classNames(
                    sty.box__jgsq,
                    defaultcss.all,
                    defaultcss.__wab_text
                  )}
                >
                  {"Revenue"}
                </div>
              }
              startIcon={
                <IconHomeIcon
                  className={classNames(sty.svg__q648I, defaultcss.all)}
                  role={"img"}
                />
              }
            />

            <SidebarItem
              className={classNames(sty.sidebarItem__zGgf7, "__wab_instance")}
              name={
                <div
                  className={classNames(
                    sty.box___7F5M7,
                    defaultcss.all,
                    defaultcss.__wab_text,
                    {
                      [sty.box__hasValue___7F5M7JgEIm]: hasVariant(
                        variants,
                        "hasValue",
                        "hasValue"
                      ),
                    }
                  )}
                >
                  {"Active Users"}
                </div>
              }
              startIcon={
                <IconHomeIcon
                  className={classNames(sty.svg__tn3Q3, defaultcss.all)}
                  role={"img"}
                />
              }
            />

            <SidebarItem
              className={classNames(sty.sidebarItem__yHw7F, "__wab_instance")}
              name={
                <div
                  className={classNames(
                    sty.box___7SQ2,
                    defaultcss.all,
                    defaultcss.__wab_text
                  )}
                >
                  {"Milestones"}
                </div>
              }
              startIcon={
                <IconHomeIcon
                  className={classNames(sty.svg___7Ajv4, defaultcss.all)}
                  role={"img"}
                />
              }
            />
          </Stack>
        </div>
      </Stack>

      <Stack
        as={"form"}
        data-plasmic-name={"sidebarForm"}
        data-plasmic-override={overrides.sidebarForm}
        hasGap={true}
        className={classNames(sty.sidebarForm, defaultcss.all, {
          [sty.sidebarForm__hasValue]: hasVariant(
            variants,
            "hasValue",
            "hasValue"
          ),
        })}
      >
        <input
          data-plasmic-name={"addTimelineInput"}
          data-plasmic-override={overrides.addTimelineInput}
          className={classNames(sty.addTimelineInput, defaultcss.input, {
            [sty.addTimelineInput__hasValue]: hasVariant(
              variants,
              "hasValue",
              "hasValue"
            ),
          })}
          placeholder={"Create Timeline" as const}
          size={1 as const}
          tabIndex={1 as const}
          type={"text" as const}
        />

        <IconButton
          data-plasmic-name={"addTimeline"}
          data-plasmic-override={overrides.addTimeline}
          className={classNames(sty.addTimeline, "__wab_instance", {
            [sty.addTimeline__hasValue]: hasVariant(
              variants,
              "hasValue",
              "hasValue"
            ),
          })}
          content={""}
          endIcon={
            false ? (
              <svg
                data-plasmic-name={"endIcon"}
                data-plasmic-override={overrides.endIcon}
                className={classNames(sty.endIcon, defaultcss.all)}
                role={"img"}
              />
            ) : null
          }
          startIcon={
            <PlasmicIcon
              data-plasmic-name={"startIcon2"}
              data-plasmic-override={overrides.startIcon2}
              PlasmicIconType={
                hasVariant(variants, "hasValue", "hasValue")
                  ? IconCheckIcon
                  : IconAddIcon
              }
              className={classNames(sty.startIcon2, defaultcss.all, {
                [sty.startIcon2__hasValue]: hasVariant(
                  variants,
                  "hasValue",
                  "hasValue"
                ),
              })}
              role={"img"}
            />
          }
          withIcons={["start"]}
        />
      </Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "topSidebar",
    "homeItem",
    "scrollContainer",
    "settingsContainer",
    "settingsItem",
    "startIcon3",
    "timelinesContainer",
    "sidebarForm",
    "addTimelineInput",
    "addTimeline",
    "startIcon2",
    "endIcon",
  ],

  topSidebar: [
    "topSidebar",
    "homeItem",
    "scrollContainer",
    "settingsContainer",
    "settingsItem",
    "startIcon3",
    "timelinesContainer",
  ],

  homeItem: ["homeItem"],
  scrollContainer: [
    "scrollContainer",
    "settingsContainer",
    "settingsItem",
    "startIcon3",
    "timelinesContainer",
  ],

  settingsContainer: ["settingsContainer", "settingsItem", "startIcon3"],
  settingsItem: ["settingsItem", "startIcon3"],
  startIcon3: ["startIcon3"],
  timelinesContainer: ["timelinesContainer"],
  sidebarForm: [
    "sidebarForm",
    "addTimelineInput",
    "addTimeline",
    "startIcon2",
    "endIcon",
  ],

  addTimelineInput: ["addTimelineInput"],
  addTimeline: ["addTimeline", "startIcon2", "endIcon"],
  startIcon2: ["startIcon2"],
  endIcon: ["endIcon"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  topSidebar: "div";
  homeItem: typeof SidebarItem;
  scrollContainer: "div";
  settingsContainer: "div";
  settingsItem: typeof SidebarItem;
  startIcon3: "svg";
  timelinesContainer: "div";
  sidebarForm: "form";
  addTimelineInput: "input";
  addTimeline: typeof IconButton;
  startIcon2: "svg";
  endIcon: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebar__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebar__VariantsArgs;
    args?: PlasmicSidebar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSidebar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSidebar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSidebar__ArgProps,
      internalVariantPropNames: PlasmicSidebar__VariantProps,
    });

    return PlasmicSidebar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebar";
  } else {
    func.displayName = `PlasmicSidebar.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebar = Object.assign(
  // Top-level PlasmicSidebar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topSidebar: makeNodeComponent("topSidebar"),
    homeItem: makeNodeComponent("homeItem"),
    scrollContainer: makeNodeComponent("scrollContainer"),
    settingsContainer: makeNodeComponent("settingsContainer"),
    settingsItem: makeNodeComponent("settingsItem"),
    startIcon3: makeNodeComponent("startIcon3"),
    timelinesContainer: makeNodeComponent("timelinesContainer"),
    sidebarForm: makeNodeComponent("sidebarForm"),
    addTimelineInput: makeNodeComponent("addTimelineInput"),
    addTimeline: makeNodeComponent("addTimeline"),
    startIcon2: makeNodeComponent("startIcon2"),
    endIcon: makeNodeComponent("endIcon"),

    // Metadata about props expected for PlasmicSidebar
    internalVariantProps: PlasmicSidebar__VariantProps,
    internalArgProps: PlasmicSidebar__ArgProps,
  }
);

export default PlasmicSidebar;
/* prettier-ignore-end */
