// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: KDElHbQmfd
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import IconButton from "../../iconbutton/index"; // plasmic-import: UIpuE7M1YY/component
import Dropdown from "../../dropdown/index"; // plasmic-import: Umq3CDOCIR/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import * as sty from "./PlasmicSidebarItem.module.css"; // plasmic-import: KDElHbQmfd/css

import IconPlusIcon from "./icons/PlasmicIcon__IconPlus"; // plasmic-import: B5QLKmr2tW/icon
import IconAccordianIcon from "./icons/PlasmicIcon__IconAccordian"; // plasmic-import: UPgEusYgX/icon
import IconHashIcon from "./icons/PlasmicIcon__IconHash"; // plasmic-import: AVLV6uMr56/icon
import VectorsvgIcon from "./icons/PlasmicIcon__Vectorsvg"; // plasmic-import: kQoy0KbdjL/icon
import IconDotMenuIcon from "./icons/PlasmicIcon__IconDotMenu"; // plasmic-import: Dz069s-rE/icon

export type PlasmicSidebarItem__VariantMembers = {
  itemType: "timeline" | "createTimeline" | "ventureCollapsed";
  isActive: "isActive";
  isOwner: "isOwner";
  isVisible: "isVisible";
  isPublic: "isPublic";
  isDropdown: "isDropdown";
  hasNewActivity: "hasNewActivity";
};

export type PlasmicSidebarItem__VariantsArgs = {
  itemType?: SingleChoiceArg<
    "timeline" | "createTimeline" | "ventureCollapsed"
  >;
  isActive?: SingleBooleanChoiceArg<"isActive">;
  isOwner?: SingleBooleanChoiceArg<"isOwner">;
  isVisible?: SingleBooleanChoiceArg<"isVisible">;
  isPublic?: SingleBooleanChoiceArg<"isPublic">;
  isDropdown?: SingleBooleanChoiceArg<"isDropdown">;
  hasNewActivity?: SingleBooleanChoiceArg<"hasNewActivity">;
};

type VariantPropType = keyof PlasmicSidebarItem__VariantsArgs;
export const PlasmicSidebarItem__VariantProps = new Array<VariantPropType>(
  "itemType",
  "isActive",
  "isOwner",
  "isVisible",
  "isPublic",
  "isDropdown",
  "hasNewActivity"
);

export type PlasmicSidebarItem__ArgsType = {
  name?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSidebarItem__ArgsType;
export const PlasmicSidebarItem__ArgProps = new Array<ArgPropType>(
  "name",
  "children"
);

export type PlasmicSidebarItem__OverridesType = {
  root?: p.Flex<"div">;
  newActivityIndicator?: p.Flex<"div">;
  counterSlot?: p.Flex<"div">;
  itemContainer?: p.Flex<"div">;
  icon?: p.Flex<typeof IconButton>;
  iconButton?: p.Flex<typeof IconButton>;
  dropdown?: p.Flex<typeof Dropdown>;
};

export interface DefaultSidebarItemProps {
  name?: React.ReactNode;
  children?: React.ReactNode;
  itemType?: SingleChoiceArg<
    "timeline" | "createTimeline" | "ventureCollapsed"
  >;
  isActive?: SingleBooleanChoiceArg<"isActive">;
  isOwner?: SingleBooleanChoiceArg<"isOwner">;
  isVisible?: SingleBooleanChoiceArg<"isVisible">;
  isPublic?: SingleBooleanChoiceArg<"isPublic">;
  isDropdown?: SingleBooleanChoiceArg<"isDropdown">;
  hasNewActivity?: SingleBooleanChoiceArg<"hasNewActivity">;
  className?: string;
}

function PlasmicSidebarItem__RenderFunc(props: {
  variants: PlasmicSidebarItem__VariantsArgs;
  args: PlasmicSidebarItem__ArgsType;
  overrides: PlasmicSidebarItem__OverridesType;
  dataFetches?: PlasmicSidebarItem__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover,
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__hasNewActivity]: hasVariant(
            variants,
            "hasNewActivity",
            "hasNewActivity"
          ),
          [sty.root__isActive]: hasVariant(variants, "isActive", "isActive"),
          [sty.root__isOwner]: hasVariant(variants, "isOwner", "isOwner"),
          [sty.root__isOwner_itemType_timeline]:
            hasVariant(variants, "isOwner", "isOwner") &&
            hasVariant(variants, "itemType", "timeline"),
          [sty.root__isPublic]: hasVariant(variants, "isPublic", "isPublic"),
          [sty.root__itemType_createTimeline]: hasVariant(
            variants,
            "itemType",
            "createTimeline"
          ),
          [sty.root__itemType_timeline]: hasVariant(
            variants,
            "itemType",
            "timeline"
          ),
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      {(
        hasVariant(variants, "hasNewActivity", "hasNewActivity") ? true : true
      ) ? (
        <div
          data-plasmic-name={"newActivityIndicator"}
          data-plasmic-override={overrides.newActivityIndicator}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.newActivityIndicator,
            {
              [sty.newActivityIndicator__hasNewActivity]: hasVariant(
                variants,
                "hasNewActivity",
                "hasNewActivity"
              ),
            }
          )}
        >
          <div
            data-plasmic-name={"counterSlot"}
            data-plasmic-override={overrides.counterSlot}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.counterSlot
            )}
          >
            {p.renderPlasmicSlot({
              defaultContents: "3",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildren__hasNewActivity]: hasVariant(
                  variants,
                  "hasNewActivity",
                  "hasNewActivity"
                ),
              }),
            })}
          </div>
        </div>
      ) : null}
      {(
        hasVariant(variants, "itemType", "createTimeline") &&
        triggers.hover_root
          ? true
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"itemContainer"}
          data-plasmic-override={overrides.itemContainer}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.itemContainer,
            {
              [sty.itemContainer__hasNewActivity]: hasVariant(
                variants,
                "hasNewActivity",
                "hasNewActivity"
              ),
              [sty.itemContainer__isActive]: hasVariant(
                variants,
                "isActive",
                "isActive"
              ),
              [sty.itemContainer__isActive_itemType_createTimeline]:
                hasVariant(variants, "isActive", "isActive") &&
                hasVariant(variants, "itemType", "createTimeline"),
              [sty.itemContainer__isDropdown]: hasVariant(
                variants,
                "isDropdown",
                "isDropdown"
              ),
              [sty.itemContainer__isOwner]: hasVariant(
                variants,
                "isOwner",
                "isOwner"
              ),
              [sty.itemContainer__isOwner_isDropdown]:
                hasVariant(variants, "isOwner", "isOwner") &&
                hasVariant(variants, "isDropdown", "isDropdown"),
              [sty.itemContainer__isPublic]: hasVariant(
                variants,
                "isPublic",
                "isPublic"
              ),
              [sty.itemContainer__isPublic_isOwner]:
                hasVariant(variants, "isPublic", "isPublic") &&
                hasVariant(variants, "isOwner", "isOwner"),
              [sty.itemContainer__isPublic_isOwner_isDropdown]:
                hasVariant(variants, "isPublic", "isPublic") &&
                hasVariant(variants, "isOwner", "isOwner") &&
                hasVariant(variants, "isDropdown", "isDropdown"),
              [sty.itemContainer__isVisible]: hasVariant(
                variants,
                "isVisible",
                "isVisible"
              ),
              [sty.itemContainer__itemType_createTimeline]: hasVariant(
                variants,
                "itemType",
                "createTimeline"
              ),
              [sty.itemContainer__itemType_createTimeline_isVisible]:
                hasVariant(variants, "itemType", "createTimeline") &&
                hasVariant(variants, "isVisible", "isVisible"),
              [sty.itemContainer__itemType_timeline]: hasVariant(
                variants,
                "itemType",
                "timeline"
              ),
              [sty.itemContainer__itemType_ventureCollapsed]: hasVariant(
                variants,
                "itemType",
                "ventureCollapsed"
              ),
            }
          )}
        >
          {(
            hasVariant(variants, "isOwner", "isOwner")
              ? true
              : hasVariant(variants, "itemType", "createTimeline")
              ? true
              : true
          ) ? (
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.freeBox__lklH,
                {
                  [sty.freeBox__hasNewActivity__lklH0PiUm]: hasVariant(
                    variants,
                    "hasNewActivity",
                    "hasNewActivity"
                  ),
                  [sty.freeBox__isOwner__lklHXgVg8]: hasVariant(
                    variants,
                    "isOwner",
                    "isOwner"
                  ),
                  [sty.freeBox__itemType_createTimeline__lklHOuGst]: hasVariant(
                    variants,
                    "itemType",
                    "createTimeline"
                  ),
                }
              )}
            >
              {(
                hasVariant(variants, "itemType", "createTimeline")
                  ? true
                  : false
              ) ? (
                <IconPlusIcon
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    sty.svg__w77Z,
                    {
                      [sty.svg__itemType_createTimeline__w77ZOuGst]: hasVariant(
                        variants,
                        "itemType",
                        "createTimeline"
                      ),
                    }
                  )}
                  role={"img"}
                />
              ) : null}
            </div>
          ) : null}
          {(
            hasVariant(variants, "isPublic", "isPublic")
              ? false
              : hasVariant(variants, "itemType", "createTimeline")
              ? false
              : true
          ) ? (
            <IconButton
              data-plasmic-name={"icon"}
              data-plasmic-override={overrides.icon}
              className={classNames("__wab_instance", sty.icon, {
                [sty.icon__hasNewActivity]: hasVariant(
                  variants,
                  "hasNewActivity",
                  "hasNewActivity"
                ),
                [sty.icon__isActive]: hasVariant(
                  variants,
                  "isActive",
                  "isActive"
                ),
                [sty.icon__isActive_itemType_createTimeline]:
                  hasVariant(variants, "isActive", "isActive") &&
                  hasVariant(variants, "itemType", "createTimeline"),
                [sty.icon__isOwner]: hasVariant(variants, "isOwner", "isOwner"),
                [sty.icon__isPublic]: hasVariant(
                  variants,
                  "isPublic",
                  "isPublic"
                ),
                [sty.icon__itemType_createTimeline]: hasVariant(
                  variants,
                  "itemType",
                  "createTimeline"
                ),
                [sty.icon__itemType_timeline]: hasVariant(
                  variants,
                  "itemType",
                  "timeline"
                ),
                [sty.icon__itemType_ventureCollapsed]: hasVariant(
                  variants,
                  "itemType",
                  "ventureCollapsed"
                ),
              })}
              isDarkBgHover={
                hasVariant(variants, "isActive", "isActive") &&
                triggers.hover_root
                  ? ("isDarkBgHover" as const)
                  : hasVariant(variants, "isActive", "isActive") &&
                    hasVariant(variants, "itemType", "createTimeline")
                  ? ("isDarkBgHover" as const)
                  : ("isDarkBgHover" as const)
              }
              isDisabled={
                hasVariant(variants, "itemType", "timeline")
                  ? ("isDisabled" as const)
                  : undefined
              }
            >
              <p.PlasmicIcon
                PlasmicIconType={
                  hasVariant(variants, "itemType", "ventureCollapsed")
                    ? VectorsvgIcon
                    : hasVariant(variants, "itemType", "createTimeline")
                    ? IconPlusIcon
                    : hasVariant(variants, "itemType", "timeline")
                    ? IconHashIcon
                    : IconAccordianIcon
                }
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  sty.svg___6Fx5D,
                  {
                    [sty.svg__hasNewActivity___6Fx5D0PiUm]: hasVariant(
                      variants,
                      "hasNewActivity",
                      "hasNewActivity"
                    ),
                    [sty.svg__isActive___6Fx5Dw0Xu8]: hasVariant(
                      variants,
                      "isActive",
                      "isActive"
                    ),
                    [sty.svg__itemType_createTimeline___6Fx5DOuGst]: hasVariant(
                      variants,
                      "itemType",
                      "createTimeline"
                    ),
                    [sty.svg__itemType_timeline___6Fx5DoN3Wv]: hasVariant(
                      variants,
                      "itemType",
                      "timeline"
                    ),
                    [sty.svg__itemType_ventureCollapsed___6Fx5D4PCv]:
                      hasVariant(variants, "itemType", "ventureCollapsed"),
                  }
                )}
                role={"img"}
              />
            </IconButton>
          ) : null}
          {(
            hasVariant(variants, "itemType", "createTimeline") &&
            triggers.hover_root
              ? true
              : hasVariant(variants, "itemType", "createTimeline")
              ? false
              : true
          ) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.freeBox__zwdJs,
                {
                  [sty.freeBox__isPublic__zwdJsPZwt]: hasVariant(
                    variants,
                    "isPublic",
                    "isPublic"
                  ),
                  [sty.freeBox__isVisible__zwdJsb7AAs]: hasVariant(
                    variants,
                    "isVisible",
                    "isVisible"
                  ),
                  [sty.freeBox__itemType_createTimeline__zwdJsOuGst]:
                    hasVariant(variants, "itemType", "createTimeline"),
                  [sty.freeBox__itemType_timeline__zwdJSoN3Wv]: hasVariant(
                    variants,
                    "itemType",
                    "timeline"
                  ),
                  [sty.freeBox__itemType_ventureCollapsed__zwdJs4PCv]:
                    hasVariant(variants, "itemType", "ventureCollapsed"),
                }
              )}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <div
                      className={classNames(
                        defaultcss.all,
                        projectcss.all,
                        defaultcss.__wab_text,
                        sty.text__j6CkC
                      )}
                    >
                      {"Add Timeline"}
                    </div>

                    {false ? (
                      <input
                        className={classNames(
                          defaultcss.input,
                          projectcss.input,
                          sty.textInput__ogebi
                        )}
                        placeholder={"Enter name" as const}
                        size={1 as const}
                        type={"text" as const}
                        value={"" as const}
                      />
                    ) : null}
                  </React.Fragment>
                ),
                value: args.name,
                className: classNames(sty.slotTargetName, {
                  [sty.slotTargetName__isActive]: hasVariant(
                    variants,
                    "isActive",
                    "isActive"
                  ),
                  [sty.slotTargetName__isPublic]: hasVariant(
                    variants,
                    "isPublic",
                    "isPublic"
                  ),
                  [sty.slotTargetName__itemType_createTimeline]: hasVariant(
                    variants,
                    "itemType",
                    "createTimeline"
                  ),
                  [sty.slotTargetName__itemType_timeline]: hasVariant(
                    variants,
                    "itemType",
                    "timeline"
                  ),
                }),
              })}
            </p.Stack>
          ) : null}
          {(
            triggers.hover_root
              ? true
              : hasVariant(variants, "isOwner", "isOwner")
              ? true
              : true
          ) ? (
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.freeBox__xZeoS,
                {
                  [sty.freeBox__isOwner__xZeoSXgVg8]: hasVariant(
                    variants,
                    "isOwner",
                    "isOwner"
                  ),
                  [sty.freeBox__itemType_createTimeline__xZeoSOuGst]:
                    hasVariant(variants, "itemType", "createTimeline"),
                  [sty.freeBox__itemType_timeline__xZeoSoN3Wv]: hasVariant(
                    variants,
                    "itemType",
                    "timeline"
                  ),
                }
              )}
            >
              {(
                hasVariant(variants, "isOwner", "isOwner") &&
                triggers.hover_root
                  ? true
                  : hasVariant(variants, "itemType", "createTimeline") &&
                    triggers.hover_root
                  ? false
                  : triggers.hover_root
                  ? true
                  : hasVariant(variants, "isOwner", "isOwner")
                  ? true
                  : hasVariant(variants, "itemType", "createTimeline")
                  ? false
                  : true
              ) ? (
                <IconButton
                  data-plasmic-name={"iconButton"}
                  data-plasmic-override={overrides.iconButton}
                  className={classNames("__wab_instance", sty.iconButton, {
                    [sty.iconButton__hasNewActivity]: hasVariant(
                      variants,
                      "hasNewActivity",
                      "hasNewActivity"
                    ),
                    [sty.iconButton__isActive]: hasVariant(
                      variants,
                      "isActive",
                      "isActive"
                    ),
                    [sty.iconButton__isActive_itemType_createTimeline]:
                      hasVariant(variants, "isActive", "isActive") &&
                      hasVariant(variants, "itemType", "createTimeline"),
                    [sty.iconButton__isOwner]: hasVariant(
                      variants,
                      "isOwner",
                      "isOwner"
                    ),
                    [sty.iconButton__itemType_createTimeline]: hasVariant(
                      variants,
                      "itemType",
                      "createTimeline"
                    ),
                    [sty.iconButton__itemType_timeline]: hasVariant(
                      variants,
                      "itemType",
                      "timeline"
                    ),
                  })}
                  isDarkBgHover={
                    hasVariant(variants, "isActive", "isActive") &&
                    triggers.hover_root
                      ? ("isDarkBgHover" as const)
                      : hasVariant(variants, "isActive", "isActive") &&
                        hasVariant(variants, "itemType", "createTimeline")
                      ? ("isDarkBgHover" as const)
                      : ("isDarkBgHover" as const)
                  }
                >
                  <IconDotMenuIcon
                    className={classNames(
                      defaultcss.all,
                      projectcss.all,
                      sty.svg__zhtWc,
                      {
                        [sty.svg__isActive__zhtWcw0Xu8]: hasVariant(
                          variants,
                          "isActive",
                          "isActive"
                        ),
                        [sty.svg__isActive_isOwner__zhtWcw0Xu8XgVg8]:
                          hasVariant(variants, "isActive", "isActive") &&
                          hasVariant(variants, "isOwner", "isOwner"),
                        [sty.svg__isActive_itemType_createTimeline__zhtWcw0Xu8OuGst]:
                          hasVariant(variants, "isActive", "isActive") &&
                          hasVariant(variants, "itemType", "createTimeline"),
                        [sty.svg__isOwner__zhtWcXgVg8]: hasVariant(
                          variants,
                          "isOwner",
                          "isOwner"
                        ),
                      }
                    )}
                    role={"img"}
                  />
                </IconButton>
              ) : null}
            </div>
          ) : null}
          {(
            hasVariant(variants, "isOwner", "isOwner") && triggers.hover_root
              ? true
              : hasVariant(variants, "isDropdown", "isDropdown") &&
                hasVariant(variants, "isOwner", "isOwner")
              ? true
              : hasVariant(variants, "isOwner", "isOwner")
              ? true
              : true
          ) ? (
            <Dropdown
              data-plasmic-name={"dropdown"}
              data-plasmic-override={overrides.dropdown}
              className={classNames("__wab_instance", sty.dropdown, {
                [sty.dropdown__isDropdown]: hasVariant(
                  variants,
                  "isDropdown",
                  "isDropdown"
                ),
                [sty.dropdown__isDropdown_isOwner]:
                  hasVariant(variants, "isDropdown", "isDropdown") &&
                  hasVariant(variants, "isOwner", "isOwner"),
                [sty.dropdown__isOwner]: hasVariant(
                  variants,
                  "isOwner",
                  "isOwner"
                ),
                [sty.dropdown__isOwner_itemType_timeline]:
                  hasVariant(variants, "isOwner", "isOwner") &&
                  hasVariant(variants, "itemType", "timeline"),
                [sty.dropdown__itemType_createTimeline]: hasVariant(
                  variants,
                  "itemType",
                  "createTimeline"
                ),
              })}
              rename2={
                hasVariant(variants, "isOwner", "isOwner") &&
                hasVariant(variants, "itemType", "timeline") &&
                triggers.hover_root
                  ? "Edit Timeline"
                  : hasVariant(variants, "itemType", "timeline")
                  ? "Edit Timeline"
                  : "Edit Venture"
              }
            />
          ) : null}
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "newActivityIndicator",
    "counterSlot",
    "itemContainer",
    "icon",
    "iconButton",
    "dropdown",
  ],
  newActivityIndicator: ["newActivityIndicator", "counterSlot"],
  counterSlot: ["counterSlot"],
  itemContainer: ["itemContainer", "icon", "iconButton", "dropdown"],
  icon: ["icon"],
  iconButton: ["iconButton"],
  dropdown: ["dropdown"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  newActivityIndicator: "div";
  counterSlot: "div";
  itemContainer: "div";
  icon: typeof IconButton;
  iconButton: typeof IconButton;
  dropdown: typeof Dropdown;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebarItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebarItem__VariantsArgs;
    args?: PlasmicSidebarItem__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSidebarItem__Fetches;
  } & Omit<PlasmicSidebarItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSidebarItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSidebarItem__ArgProps,
      internalVariantPropNames: PlasmicSidebarItem__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicSidebarItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebarItem";
  } else {
    func.displayName = `PlasmicSidebarItem.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebarItem = Object.assign(
  // Top-level PlasmicSidebarItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    newActivityIndicator: makeNodeComponent("newActivityIndicator"),
    counterSlot: makeNodeComponent("counterSlot"),
    itemContainer: makeNodeComponent("itemContainer"),
    icon: makeNodeComponent("icon"),
    iconButton: makeNodeComponent("iconButton"),
    dropdown: makeNodeComponent("dropdown"),

    // Metadata about props expected for PlasmicSidebarItem
    internalVariantProps: PlasmicSidebarItem__VariantProps,
    internalArgProps: PlasmicSidebarItem__ArgProps,
  }
);

export default PlasmicSidebarItem;
/* prettier-ignore-end */
