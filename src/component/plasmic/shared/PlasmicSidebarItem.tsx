// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: KDElHbQmfd
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import IconButton from "../../iconbutton/index"; // plasmic-import: odPjbfT2kyJgB_S/component

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicSidebarItem.module.css"; // plasmic-import: KDElHbQmfd/css

import IconHomeOldIcon from "./icons/PlasmicIcon__IconHomeOld"; // plasmic-import: Z6YqF7wXr6/icon
import IconHashIcon from "./icons/PlasmicIcon__IconHash"; // plasmic-import: AVLV6uMr56/icon
import IconDotMenuIcon from "./icons/PlasmicIcon__IconDotMenu"; // plasmic-import: Dz069s-rE/icon

export type PlasmicSidebarItem__VariantMembers = {
  isCurrent: "isCurrent";
  hasIcon: "hasIcon";
  hasUpdates: "hasUpdates";
  isInput: "isInput";
};

export type PlasmicSidebarItem__VariantsArgs = {
  isCurrent?: SingleBooleanChoiceArg<"isCurrent">;
  hasIcon?: SingleBooleanChoiceArg<"hasIcon">;
  hasUpdates?: SingleBooleanChoiceArg<"hasUpdates">;
  isInput?: SingleBooleanChoiceArg<"isInput">;
};

type VariantPropType = keyof PlasmicSidebarItem__VariantsArgs;
export const PlasmicSidebarItem__VariantProps = new Array<VariantPropType>(
  "isCurrent",
  "hasIcon",
  "hasUpdates",
  "isInput"
);

export type PlasmicSidebarItem__ArgsType = {
  name?: React.ReactNode;
  startIcon?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSidebarItem__ArgsType;
export const PlasmicSidebarItem__ArgProps = new Array<ArgPropType>(
  "name",
  "startIcon",
  "children"
);

export type PlasmicSidebarItem__OverridesType = {
  root?: p.Flex<"div">;
  itemContainer?: p.Flex<"div">;
  itemButton?: p.Flex<typeof IconButton>;
  startIcon?: p.Flex<"svg">;
  endIcon?: p.Flex<"svg">;
  textbox?: p.Flex<"input">;
};

export interface DefaultSidebarItemProps {
  name?: React.ReactNode;
  startIcon?: React.ReactNode;
  children?: React.ReactNode;
  isCurrent?: SingleBooleanChoiceArg<"isCurrent">;
  hasIcon?: SingleBooleanChoiceArg<"hasIcon">;
  hasUpdates?: SingleBooleanChoiceArg<"hasUpdates">;
  isInput?: SingleBooleanChoiceArg<"isInput">;
  className?: string;
}

function PlasmicSidebarItem__RenderFunc(props: {
  variants: PlasmicSidebarItem__VariantsArgs;
  args: PlasmicSidebarItem__ArgsType;
  overrides: PlasmicSidebarItem__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover,
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__hasIcon]: hasVariant(variants, "hasIcon", "hasIcon"),
        [sty.root__hasUpdates]: hasVariant(
          variants,
          "hasUpdates",
          "hasUpdates"
        ),

        [sty.root__isCurrent]: hasVariant(variants, "isCurrent", "isCurrent"),
      })}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"itemContainer"}
        data-plasmic-override={overrides.itemContainer}
        hasGap={true}
        className={classNames(defaultcss.all, sty.itemContainer, {
          [sty.itemContainer__hasIcon]: hasVariant(
            variants,
            "hasIcon",
            "hasIcon"
          ),

          [sty.itemContainer__hasUpdates]: hasVariant(
            variants,
            "hasUpdates",
            "hasUpdates"
          ),

          [sty.itemContainer__isCurrent]: hasVariant(
            variants,
            "isCurrent",
            "isCurrent"
          ),

          [sty.itemContainer__isCurrent_hasUpdates]:
            hasVariant(variants, "isCurrent", "isCurrent") &&
            hasVariant(variants, "hasUpdates", "hasUpdates"),
          [sty.itemContainer__isCurrent_isInput]:
            hasVariant(variants, "isCurrent", "isCurrent") &&
            hasVariant(variants, "isInput", "isInput"),
          [sty.itemContainer__isInput]: hasVariant(
            variants,
            "isInput",
            "isInput"
          ),
        })}
      >
        {(hasVariant(variants, "isCurrent", "isCurrent") ? true : false) ? (
          <div
            className={classNames(defaultcss.all, sty.box__v0Fwk, {
              [sty.box__hasUpdates__v0FwkkXb7H]: hasVariant(
                variants,
                "hasUpdates",
                "hasUpdates"
              ),

              [sty.box__isCurrent__v0Fwk0Mgpk]: hasVariant(
                variants,
                "isCurrent",
                "isCurrent"
              ),
            })}
          />
        ) : null}
        {(hasVariant(variants, "hasIcon", "hasIcon") ? true : false) ? (
          <IconButton
            data-plasmic-name={"itemButton"}
            data-plasmic-override={overrides.itemButton}
            className={classNames("__wab_instance", sty.itemButton, {
              [sty.itemButton__hasIcon]: hasVariant(
                variants,
                "hasIcon",
                "hasIcon"
              ),
            })}
            content={""}
            endIcon={
              false ? (
                <svg
                  data-plasmic-name={"endIcon"}
                  data-plasmic-override={overrides.endIcon}
                  className={classNames(defaultcss.all, sty.endIcon)}
                  role={"img"}
                />
              ) : null
            }
            startIcon={
              <p.PlasmicSlot
                defaultContents={
                  <IconHomeOldIcon
                    data-plasmic-name={"startIcon"}
                    data-plasmic-override={overrides.startIcon}
                    className={classNames(defaultcss.all, sty.startIcon)}
                    role={"img"}
                  />
                }
                value={args.startIcon}
              />
            }
            withIcons={
              hasVariant(variants, "hasIcon", "hasIcon") ? ["start"] : undefined
            }
          />
        ) : null}
        {(hasVariant(variants, "hasUpdates", "hasUpdates") ? true : false) ? (
          <p.Stack
            as={"div"}
            hasGap={
              hasVariant(variants, "hasUpdates", "hasUpdates") ? true : false
            }
            className={classNames(defaultcss.all, sty.box__yCln2, {
              [sty.box__hasUpdates__yCln2KXb7H]: hasVariant(
                variants,
                "hasUpdates",
                "hasUpdates"
              ),
            })}
          />
        ) : null}
        <p.PlasmicSlot
          defaultContents={
            <IconHashIcon
              className={classNames(defaultcss.all, sty.svg__mVzHz)}
              role={"img"}
            />
          }
          value={args.children}
        />

        <div
          className={classNames(defaultcss.all, sty.box__zwdJs, {
            [sty.box__hasIcon__zwdJsHHCh]: hasVariant(
              variants,
              "hasIcon",
              "hasIcon"
            ),

            [sty.box__hasIcon_isCurrent__zwdJsHHCh0Mgpk]:
              hasVariant(variants, "hasIcon", "hasIcon") &&
              hasVariant(variants, "isCurrent", "isCurrent"),
            [sty.box__hasUpdates__zwdJSkXb7H]: hasVariant(
              variants,
              "hasUpdates",
              "hasUpdates"
            ),

            [sty.box__isCurrent__zwdJs0Mgpk]: hasVariant(
              variants,
              "isCurrent",
              "isCurrent"
            ),

            [sty.box__isInput__zwdJsrIr3V]: hasVariant(
              variants,
              "isInput",
              "isInput"
            ),
          })}
        >
          <p.PlasmicSlot
            defaultContents={
              <React.Fragment>
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__j6CkC
                  )}
                >
                  {"Wins"}
                </div>

                {false ? (
                  <input
                    data-plasmic-name={"textbox"}
                    data-plasmic-override={overrides.textbox}
                    className={classNames(defaultcss.input, sty.textbox, {
                      [sty.textbox__isInput]: hasVariant(
                        variants,
                        "isInput",
                        "isInput"
                      ),
                    })}
                    placeholder={"Enter name" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"" as const}
                  />
                ) : null}
              </React.Fragment>
            }
            value={args.name}
            className={classNames(sty.slotName, {
              [sty.slotName__hasIcon]: hasVariant(
                variants,
                "hasIcon",
                "hasIcon"
              ),

              [sty.slotName__hasUpdates]: hasVariant(
                variants,
                "hasUpdates",
                "hasUpdates"
              ),

              [sty.slotName__isCurrent]: hasVariant(
                variants,
                "isCurrent",
                "isCurrent"
              ),

              [sty.slotName__isInput]: hasVariant(
                variants,
                "isInput",
                "isInput"
              ),
            })}
          />
        </div>

        {(triggers.hover_root ? true : false) ? (
          <IconDotMenuIcon
            className={classNames(defaultcss.all, sty.svg___2Wfi2)}
            role={"img"}
          />
        ) : null}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "itemContainer",
    "itemButton",
    "startIcon",
    "endIcon",
    "textbox",
  ],

  itemContainer: [
    "itemContainer",
    "itemButton",
    "startIcon",
    "endIcon",
    "textbox",
  ],

  itemButton: ["itemButton", "startIcon", "endIcon"],
  startIcon: ["startIcon"],
  endIcon: ["endIcon"],
  textbox: ["textbox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  itemContainer: "div";
  itemButton: typeof IconButton;
  startIcon: "svg";
  endIcon: "svg";
  textbox: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebarItem__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebarItem__VariantsArgs;
    args?: PlasmicSidebarItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSidebarItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSidebarItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSidebarItem__ArgProps,
      internalVariantPropNames: PlasmicSidebarItem__VariantProps,
    });

    return PlasmicSidebarItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebarItem";
  } else {
    func.displayName = `PlasmicSidebarItem.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebarItem = Object.assign(
  // Top-level PlasmicSidebarItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    itemContainer: makeNodeComponent("itemContainer"),
    itemButton: makeNodeComponent("itemButton"),
    startIcon: makeNodeComponent("startIcon"),
    endIcon: makeNodeComponent("endIcon"),
    textbox: makeNodeComponent("textbox"),

    // Metadata about props expected for PlasmicSidebarItem
    internalVariantProps: PlasmicSidebarItem__VariantProps,
    internalArgProps: PlasmicSidebarItem__ArgProps,
  }
);

export default PlasmicSidebarItem;
/* prettier-ignore-end */
