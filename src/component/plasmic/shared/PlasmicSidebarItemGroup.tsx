// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: JQWYItyW5A
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import SidebarItem from "../../sidebaritem/index"; // plasmic-import: KDElHbQmfd/component

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicSidebarItemGroup.module.css"; // plasmic-import: JQWYItyW5A/css

export type PlasmicSidebarItemGroup__VariantMembers = {
  isCollapsed: "isCollapsed";
};

export type PlasmicSidebarItemGroup__VariantsArgs = {
  isCollapsed?: SingleBooleanChoiceArg<"isCollapsed">;
};

type VariantPropType = keyof PlasmicSidebarItemGroup__VariantsArgs;
export const PlasmicSidebarItemGroup__VariantProps = new Array<VariantPropType>(
  "isCollapsed"
);

export type PlasmicSidebarItemGroup__ArgsType = {};
type ArgPropType = keyof PlasmicSidebarItemGroup__ArgsType;
export const PlasmicSidebarItemGroup__ArgProps = new Array<ArgPropType>();

export type PlasmicSidebarItemGroup__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultSidebarItemGroupProps {
  isCollapsed?: SingleBooleanChoiceArg<"isCollapsed">;
  className?: string;
}

function PlasmicSidebarItemGroup__RenderFunc(props: {
  variants: PlasmicSidebarItemGroup__VariantsArgs;
  args: PlasmicSidebarItemGroup__ArgsType;
  overrides: PlasmicSidebarItemGroup__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <SidebarItem
        className={classNames("__wab_instance", sty.sidebarItem__fZxTp, {
          [sty.sidebarItem__isCollapsed__fZxTpR1V]: hasVariant(
            variants,
            "isCollapsed",
            "isCollapsed"
          ),
        })}
        itemType={
          hasVariant(variants, "isCollapsed", "isCollapsed")
            ? ("ventureCollapsed" as const)
            : undefined
        }
        name={
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__fqyEx,
              {
                [sty.box__isCollapsed__fqyExR1V]: hasVariant(
                  variants,
                  "isCollapsed",
                  "isCollapsed"
                ),
              }
            )}
          >
            {"Adbloom"}
          </div>
        }
      />

      {(hasVariant(variants, "isCollapsed", "isCollapsed") ? false : true) ? (
        <p.Stack
          as={"div"}
          hasGap={
            hasVariant(variants, "isCollapsed", "isCollapsed") ? true : false
          }
          className={classNames(defaultcss.all, sty.box__hBuxo, {
            [sty.box__isCollapsed__hBuxoR1V]: hasVariant(
              variants,
              "isCollapsed",
              "isCollapsed"
            ),
          })}
        >
          <SidebarItem
            className={classNames("__wab_instance", sty.sidebarItem__p6TUu, {
              [sty.sidebarItem__isCollapsed__p6TUuR1V]: hasVariant(
                variants,
                "isCollapsed",
                "isCollapsed"
              ),
            })}
            itemType={"timeline" as const}
            name={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__fPdD
                )}
              >
                {"Wins"}
              </div>
            }
          />

          <SidebarItem
            className={classNames("__wab_instance", sty.sidebarItem__nta2O, {
              [sty.sidebarItem__isCollapsed__nta2OR1V]: hasVariant(
                variants,
                "isCollapsed",
                "isCollapsed"
              ),
            })}
            itemType={"createTimeline" as const}
            name={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__wCgwl
                )}
              >
                {"New Timeline"}
              </div>
            }
          />
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebarItemGroup__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicSidebarItemGroup__VariantsArgs;
  args?: PlasmicSidebarItemGroup__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicSidebarItemGroup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicSidebarItemGroup__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSidebarItemGroup__ArgProps,
      internalVariantPropNames: PlasmicSidebarItemGroup__VariantProps,
    });

    return PlasmicSidebarItemGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebarItemGroup";
  } else {
    func.displayName = `PlasmicSidebarItemGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebarItemGroup = Object.assign(
  // Top-level PlasmicSidebarItemGroup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSidebarItemGroup
    internalVariantProps: PlasmicSidebarItemGroup__VariantProps,
    internalArgProps: PlasmicSidebarItemGroup__ArgProps,
  }
);

export default PlasmicSidebarItemGroup;
/* prettier-ignore-end */
