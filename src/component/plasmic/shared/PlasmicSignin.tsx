// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: VOXcGTkmP9
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Button from "../../button/index"; // plasmic-import: JU1t0P9pFY/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: szbTUtTUfDW81Pi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import * as sty from "./PlasmicSignin.module.css"; // plasmic-import: VOXcGTkmP9/css

import Logosvg3Icon from "./icons/PlasmicIcon__Logosvg3"; // plasmic-import: o58_ERQlgq/icon
import IconPlusIcon from "./icons/PlasmicIcon__IconPlus"; // plasmic-import: B5QLKmr2tW/icon
import IconRightIcon from "./icons/PlasmicIcon__IconRight"; // plasmic-import: v822ZhrBq/icon

export type PlasmicSignin__VariantMembers = {};

export type PlasmicSignin__VariantsArgs = {};
type VariantPropType = keyof PlasmicSignin__VariantsArgs;
export const PlasmicSignin__VariantProps = new Array<VariantPropType>();

export type PlasmicSignin__ArgsType = {};
type ArgPropType = keyof PlasmicSignin__ArgsType;
export const PlasmicSignin__ArgProps = new Array<ArgPropType>();

export type PlasmicSignin__OverridesType = {
  root?: p.Flex<"div">;
  googleButton?: p.Flex<typeof Button>;
  text2?: p.Flex<"div">;
  linkedinButton?: p.Flex<typeof Button>;
  text22?: p.Flex<"div">;
};

export interface DefaultSigninProps {
  className?: string;
}

function PlasmicSignin__RenderFunc(props: {
  variants: PlasmicSignin__VariantsArgs;
  args: PlasmicSignin__ArgsType;
  overrides: PlasmicSignin__OverridesType;
  dataFetches?: PlasmicSignin__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.freeBox__u3Fzv
            )}
          >
            <Logosvg3Icon
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.svg__b6TAn
              )}
              role={"img"}
            />

            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.freeBox__dwUyl
              )}
            >
              {(
                hasVariant(globalVariants, "screen", "mobile") ? false : true
              ) ? (
                <div
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    sty.freeBox__vpH1M
                  )}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      projectcss.all,
                      sty.freeBox__dpbjE
                    )}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        projectcss.all,
                        sty.freeBox__zq8W
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          defaultcss.all,
                          projectcss.all,
                          sty.freeBox__lIg4F
                        )}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            projectcss.all,
                            defaultcss.__wab_text,
                            sty.text__qnxd
                          )}
                        >
                          {"We help align \nteams and partners"}
                        </div>

                        <div
                          className={classNames(
                            defaultcss.all,
                            projectcss.all,
                            sty.freeBox__siRaS
                          )}
                        >
                          <div
                            className={classNames(
                              defaultcss.all,
                              projectcss.all,
                              defaultcss.__wab_text,
                              sty.text__x0Qaf
                            )}
                          >
                            {"venturemark is the "}
                          </div>

                          <div
                            className={classNames(
                              defaultcss.all,
                              projectcss.all,
                              defaultcss.__wab_text,
                              sty.text__yondJ
                            )}
                          >
                            {"easiest way "}
                          </div>

                          <div
                            className={classNames(
                              defaultcss.all,
                              projectcss.all,
                              defaultcss.__wab_text,
                              sty.text__i8IZq
                            )}
                          >
                            {"to track and share progress"}
                          </div>
                        </div>
                      </p.Stack>
                    </div>
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile") ? false : true
              ) ? (
                <div
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    sty.freeBox__n6NL9
                  )}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___2L10H)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? ("100%" as const)
                        : ("auto" as const)
                    }
                    src={{
                      src: "https://site-assets.plasmic.app/4431c97718040cb10921857e6f05e81b.svg",
                      fullWidth: 300,
                      fullHeight: 131,
                      aspectRatio: 2.293956,
                    }}
                  />
                </div>
              ) : null}
            </div>
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.freeBox___9M06
            )}
          >
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.freeBox___5GI8X
              )}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  sty.freeBox__trjAa
                )}
              >
                {true ? (
                  <div
                    className={classNames(
                      defaultcss.all,
                      projectcss.all,
                      defaultcss.__wab_text,
                      sty.text__wAaqV
                    )}
                  >
                    {"Sign In"}
                  </div>
                ) : null}

                <Button
                  data-plasmic-name={"googleButton"}
                  data-plasmic-override={overrides.googleButton}
                  buttonFeatures={[]}
                  buttonStyle={"whiteBlue" as const}
                  className={classNames("__wab_instance", sty.googleButton)}
                  count={"1"}
                  slot={
                    <IconPlusIcon
                      className={classNames(
                        defaultcss.all,
                        projectcss.all,
                        sty.svg__oGHqX
                      )}
                      role={"img"}
                    />
                  }
                  text2={
                    <React.Fragment>
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__a7LHy)}
                        displayHeight={"20px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"20px" as const}
                        src={{
                          src: "https://img.plasmic.app/img-optimizer/v1/img/c03831037101a49a6b75fc80fb4c8a78.png",
                          fullWidth: 1200,
                          fullHeight: 1222,
                        }}
                      />

                      <div
                        data-plasmic-name={"text2"}
                        data-plasmic-override={overrides.text2}
                        className={classNames(
                          defaultcss.all,
                          projectcss.all,
                          defaultcss.__wab_text,
                          sty.text2
                        )}
                      >
                        {"Sign in with Google"}
                      </div>
                    </React.Fragment>
                  }
                >
                  <IconRightIcon
                    className={classNames(
                      defaultcss.all,
                      projectcss.all,
                      sty.svg__j4Mei
                    )}
                    role={"img"}
                  />
                </Button>

                {false ? (
                  <Button
                    data-plasmic-name={"linkedinButton"}
                    data-plasmic-override={overrides.linkedinButton}
                    buttonFeatures={[]}
                    buttonStyle={"whiteBlue" as const}
                    className={classNames("__wab_instance", sty.linkedinButton)}
                    count={"1"}
                    slot={
                      <IconPlusIcon
                        className={classNames(
                          defaultcss.all,
                          projectcss.all,
                          sty.svg__ilBOe
                        )}
                        role={"img"}
                      />
                    }
                    text2={
                      <React.Fragment>
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__yPy9C)}
                          displayHeight={"20px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"20px" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/3aed1102f95dc3d0fa49243d935bc95e.png",
                            fullWidth: 512,
                            fullHeight: 512,
                          }}
                        />

                        <div
                          data-plasmic-name={"text22"}
                          data-plasmic-override={overrides.text22}
                          className={classNames(
                            defaultcss.all,
                            projectcss.all,
                            defaultcss.__wab_text,
                            sty.text22
                          )}
                        >
                          {"Sign up with LinkedIn"}
                        </div>
                      </React.Fragment>
                    }
                  >
                    <IconRightIcon
                      className={classNames(
                        defaultcss.all,
                        projectcss.all,
                        sty.svg__yi90R
                      )}
                      role={"img"}
                    />
                  </Button>
                ) : null}
              </p.Stack>
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "googleButton", "text2", "linkedinButton", "text22"],
  googleButton: ["googleButton", "text2"],
  text2: ["text2"],
  linkedinButton: ["linkedinButton", "text22"],
  text22: ["text22"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  googleButton: typeof Button;
  text2: "div";
  linkedinButton: typeof Button;
  text22: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignin__VariantsArgs;
    args?: PlasmicSignin__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSignin__Fetches;
  } & Omit<PlasmicSignin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSignin__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSignin__ArgProps,
      internalVariantPropNames: PlasmicSignin__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicSignin__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignin";
  } else {
    func.displayName = `PlasmicSignin.${nodeName}`;
  }
  return func;
}

export const PlasmicSignin = Object.assign(
  // Top-level PlasmicSignin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    googleButton: makeNodeComponent("googleButton"),
    text2: makeNodeComponent("text2"),
    linkedinButton: makeNodeComponent("linkedinButton"),
    text22: makeNodeComponent("text22"),

    // Metadata about props expected for PlasmicSignin
    internalVariantProps: PlasmicSignin__VariantProps,
    internalArgProps: PlasmicSignin__ArgProps,
  }
);

export default PlasmicSignin;
/* prettier-ignore-end */
