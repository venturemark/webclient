// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: Fs8bTUrvZrvfhCr
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import IconButton from "../../iconbutton/index"; // plasmic-import: odPjbfT2kyJgB_S/component
import UpdateContent from "../../updatecontent/index"; // plasmic-import: A1UjtYt6k0/component

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicUpdate.module.css"; // plasmic-import: Fs8bTUrvZrvfhCr/css

import IconWriteIcon from "./icons/PlasmicIcon__IconWrite"; // plasmic-import: zCNIMAkbig/icon
import IconClockIcon from "./icons/PlasmicIcon__IconClock"; // plasmic-import: M_91_FWOwwP63LN/icon
import IconBarChartIcon from "./icons/PlasmicIcon__IconBarChart"; // plasmic-import: Y3JBiNHxmK/icon

export type PlasmicUpdate__VariantMembers = {};

export type PlasmicUpdate__VariantsArgs = {};
type VariantPropType = keyof PlasmicUpdate__VariantsArgs;
export const PlasmicUpdate__VariantProps = new Array<VariantPropType>();

export type PlasmicUpdate__ArgsType = {};
type ArgPropType = keyof PlasmicUpdate__ArgsType;
export const PlasmicUpdate__ArgProps = new Array<ArgPropType>();

export type PlasmicUpdate__OverridesType = {
  root?: p.Flex<"div">;
  updateActionContainer?: p.Flex<"div">;
  startIcon?: p.Flex<"svg">;
  startIcon2?: p.Flex<"svg">;
  toggleUpdateView?: p.Flex<typeof IconButton>;
  startIcon22?: p.Flex<"svg">;
  updateContent?: p.Flex<typeof UpdateContent>;
  organizationName?: p.Flex<"span">;
};

export interface DefaultUpdateProps {
  className?: string;
}

function PlasmicUpdate__RenderFunc(props: {
  variants: PlasmicUpdate__VariantsArgs;
  args: PlasmicUpdate__ArgsType;
  overrides: PlasmicUpdate__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {false ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"updateActionContainer"}
          data-plasmic-override={overrides.updateActionContainer}
          hasGap={true}
          className={classNames(defaultcss.all, sty.updateActionContainer)}
        >
          <IconButton
            className={classNames("__wab_instance", sty.iconButton__i1WjS)}
            startIcon={
              <IconWriteIcon
                data-plasmic-name={"startIcon"}
                data-plasmic-override={overrides.startIcon}
                className={classNames(defaultcss.all, sty.startIcon)}
                role={"img"}
              />
            }
            withIcons={["start"]}
          />

          <IconButton
            className={classNames("__wab_instance", sty.iconButton__zHnWq)}
            startIcon={
              <IconClockIcon
                data-plasmic-name={"startIcon2"}
                data-plasmic-override={overrides.startIcon2}
                className={classNames(defaultcss.all, sty.startIcon2)}
                role={"img"}
              />
            }
            withIcons={["start"]}
          />

          <IconButton
            data-plasmic-name={"toggleUpdateView"}
            data-plasmic-override={overrides.toggleUpdateView}
            className={classNames("__wab_instance", sty.toggleUpdateView)}
            startIcon={
              <IconBarChartIcon
                data-plasmic-name={"startIcon22"}
                data-plasmic-override={overrides.startIcon22}
                className={classNames(defaultcss.all, sty.startIcon22)}
                role={"img"}
              />
            }
            withIcons={["start"]}
          />
        </p.Stack>
      ) : null}

      <UpdateContent
        data-plasmic-name={"updateContent"}
        data-plasmic-override={overrides.updateContent}
        className={classNames("__wab_instance", sty.updateContent)}
        organizationName={
          <span
            data-plasmic-name={"organizationName"}
            data-plasmic-override={overrides.organizationName}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.organizationName
            )}
          >
            <span>
              <span style={{ fontWeight: 700 }}>{"Venturemark"}</span>
            </span>
          </span>
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "updateActionContainer",
    "startIcon",
    "startIcon2",
    "toggleUpdateView",
    "startIcon22",
    "updateContent",
    "organizationName",
  ],
  updateActionContainer: [
    "updateActionContainer",
    "startIcon",
    "startIcon2",
    "toggleUpdateView",
    "startIcon22",
  ],
  startIcon: ["startIcon"],
  startIcon2: ["startIcon2"],
  toggleUpdateView: ["toggleUpdateView", "startIcon22"],
  startIcon22: ["startIcon22"],
  updateContent: ["updateContent", "organizationName"],
  organizationName: ["organizationName"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  updateActionContainer: "div";
  startIcon: "svg";
  startIcon2: "svg";
  toggleUpdateView: typeof IconButton;
  startIcon22: "svg";
  updateContent: typeof UpdateContent;
  organizationName: "span";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUpdate__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicUpdate__VariantsArgs;
  args?: PlasmicUpdate__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicUpdate__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicUpdate__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicUpdate__ArgProps,
      internalVariantPropNames: PlasmicUpdate__VariantProps,
    });

    return PlasmicUpdate__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUpdate";
  } else {
    func.displayName = `PlasmicUpdate.${nodeName}`;
  }
  return func;
}

export const PlasmicUpdate = Object.assign(
  // Top-level PlasmicUpdate renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    updateActionContainer: makeNodeComponent("updateActionContainer"),
    startIcon: makeNodeComponent("startIcon"),
    startIcon2: makeNodeComponent("startIcon2"),
    toggleUpdateView: makeNodeComponent("toggleUpdateView"),
    startIcon22: makeNodeComponent("startIcon22"),
    updateContent: makeNodeComponent("updateContent"),
    organizationName: makeNodeComponent("organizationName"),

    // Metadata about props expected for PlasmicUpdate
    internalVariantProps: PlasmicUpdate__VariantProps,
    internalArgProps: PlasmicUpdate__ArgProps,
  }
);

export default PlasmicUpdate;
/* prettier-ignore-end */
