/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: Fs8bTUrvZrvfhCr
import * as React from "react";
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Metric from "../../metric/index"; // plasmic-import: _i6uD1XPzdbux6R/component

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_shared.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import "./PlasmicUpdate.css"; // plasmic-import: Fs8bTUrvZrvfhCr/css

export type PlasmicUpdate__VariantMembers = {
  state: "text" | "graph";
};

export type PlasmicUpdate__VariantsArgs = {
  state?: SingleChoiceArg<"text" | "graph">;
};

type VariantPropType = keyof PlasmicUpdate__VariantsArgs;
export const PlasmicUpdate__VariantProps = new Array<VariantPropType>("state");

export type PlasmicUpdate__ArgsType = {};
type ArgPropType = keyof PlasmicUpdate__ArgsType;
export const PlasmicUpdate__ArgProps = new Array<ArgPropType>();

export type PlasmicUpdate__OverridesType = {
  root?: Flex<"div">;
  textContainer?: Flex<"div">;
  metric?: Flex<typeof Metric>;
};

export interface DefaultUpdateProps {
  state?: SingleChoiceArg<"text" | "graph">;
  className?: string;
}

function PlasmicUpdate__RenderFunc(props: {
  variants: PlasmicUpdate__VariantsArgs;
  args: PlasmicUpdate__ArgsType;
  overrides: PlasmicUpdate__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      data-plasmic-wrap-flex-child={true}
      className={classNames({
        Update__root: true,
        Update__root__graph: hasVariant(variants, "state", "graph"),
        Update__root__text: hasVariant(variants, "state", "text"),
        plasmic_default__all: true,
        plasmic_default__div: true,
        root_reset_mTVXT6w3HHjZ4d74q3gB76: true
      })}
    >
      <div
        className={classNames({
          Update__box__cT4Ab: true,
          Update__box__cT4Ab9Dd__text: hasVariant(variants, "state", "text"),
          Update__box__cT4AbVlb85__graph: hasVariant(
            variants,
            "state",
            "graph"
          ),

          plasmic_default__all: true,
          plasmic_default__div: true
        })}
      >
        <div
          className={classNames({
            Update__box__aQbk3: true,
            Update__box__aQbk39Dd__text: hasVariant(variants, "state", "text"),
            Update__box__aQbk3Vlb85__graph: hasVariant(
              variants,
              "state",
              "graph"
            ),

            plasmic_default__all: true,
            plasmic_default__div: true
          })}
        >
          {(hasVariant(variants, "state", "graph") ? false : true) ? (
            <div
              data-plasmic-name={"textContainer"}
              data-plasmic-override={overrides.textContainer}
              className={
                classNames({
                  Update__textContainer: true,
                  Update__textContainer__graph: hasVariant(
                    variants,
                    "state",
                    "graph"
                  ),

                  Update__textContainer__text: hasVariant(
                    variants,
                    "state",
                    "text"
                  ),

                  plasmic_default__all: true,
                  plasmic_default__div: true
                }) +
                " " +
                "__wab_text"
              }
            >
              {hasVariant(variants, "state", "text")
                ? "Lorem ipsum #dolor sit amet, consectetur adipiscing elit. Nam mollis varius ex. In ornare #scelerisque ex, ut 35 ullamcorper dui suscipit id. Mauris #maximus congue ante, sed varius sapien lobortis eu."
                : "Lorem ipsum #dolor sit amet, consectetur adipiscing elit. Nam mollis varius ex. In ornare #scelerisque ex, ut 35 ullamcorper dui suscipit id. Mauris #maximus congue ante, sed varius sapien lobortis eu.\n\n\n"}
            </div>
          ) : null}
          {(hasVariant(variants, "state", "graph") ? true : false) ? (
            <Metric
              data-plasmic-name={"metric"}
              data-plasmic-override={overrides.metric}
              className={classNames({
                Update__metric: true,
                Update__metric__graph: hasVariant(variants, "state", "graph"),
                __wab_instance: true
              })}
              {...({} as any)}
            ></Metric>
          ) : null}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "textContainer", "metric"],
  textContainer: ["textContainer"],
  metric: ["metric"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  textContainer: "div";
  metric: typeof Metric;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUpdate__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUpdate__VariantsArgs;
    args?: PlasmicUpdate__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & // Specify variants directly as props
  Omit<PlasmicUpdate__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicUpdate__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName>;
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicUpdate__ArgProps,
      internalVariantPropNames: PlasmicUpdate__VariantProps
    });

    return PlasmicUpdate__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUpdate";
  } else {
    func.displayName = `PlasmicUpdate.${nodeName}`;
  }
  return func;
}

export const PlasmicUpdate = Object.assign(
  // Top-level PlasmicUpdate renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textContainer: makeNodeComponent("textContainer"),
    metric: makeNodeComponent("metric"),

    // Helper for creating a Renderer
    createRenderer: () => new PlasmicUpdate__Renderer({}, {}),

    // Metadata about props expected for PlasmicUpdate
    internalVariantProps: PlasmicUpdate__VariantProps,
    internalArgProps: PlasmicUpdate__ArgProps
  }
);

type ForNodeRenderer<NodeName extends NodeNameType> = NodeRenderer<
  PlasmicUpdate__VariantsArgs,
  PlasmicUpdate__ArgsType,
  NodeOverridesType<NodeName>
>;

class PlasmicUpdate__Renderer extends Renderer<
  PlasmicUpdate__VariantsArgs,
  PlasmicUpdate__ArgsType,
  PlasmicUpdate__OverridesType,
  "root"
> {
  constructor(
    variants: PlasmicUpdate__VariantsArgs,
    args: PlasmicUpdate__ArgsType
  ) {
    super(variants, args, PlasmicUpdate__RenderFunc, "root");
  }

  protected create(
    variants: PlasmicUpdate__VariantsArgs,
    args: PlasmicUpdate__ArgsType
  ) {
    return new PlasmicUpdate__Renderer(variants, args);
  }

  getInternalVariantProps(): VariantPropType[] {
    return PlasmicUpdate__VariantProps;
  }

  getInternalArgProps(): ArgPropType[] {
    return PlasmicUpdate__ArgProps;
  }

  forNode(name: "metric"): ForNodeRenderer<"metric">;
  forNode(name: "textContainer"): ForNodeRenderer<"textContainer">;
  forNode(name: "root"): ForNodeRenderer<"root">;
  forNode(name: NodeNameType) {
    return super.forNode(name);
  }
}

export default PlasmicUpdate;
/* prettier-ignore-end */
