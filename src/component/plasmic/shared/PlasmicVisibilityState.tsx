// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: pG3eTcOvTW0
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Button from "../../button/index"; // plasmic-import: JU1t0P9pFY/component
import ListItem from "../../listitem/index"; // plasmic-import: q8aEgDsN8_/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: szbTUtTUfDW81Pi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import * as sty from "./PlasmicVisibilityState.module.css"; // plasmic-import: pG3eTcOvTW0/css

import IconMemberIcon from "./icons/PlasmicIcon__IconMember"; // plasmic-import: Vx3fG4Fxc/icon
import LockIconsvgIcon from "./icons/PlasmicIcon__LockIconsvg"; // plasmic-import: 1tBTTGMGvG/icon
import IconPublicsvgIcon from "./icons/PlasmicIcon__IconPublicsvg"; // plasmic-import: DkUt8Ihq_s/icon
import IconPlusIcon from "./icons/PlasmicIcon__IconPlus"; // plasmic-import: B5QLKmr2tW/icon
import IconAccordianIcon from "./icons/PlasmicIcon__IconAccordian"; // plasmic-import: UPgEusYgX/icon

export type PlasmicVisibilityState__VariantMembers = {
  isDropdown: "isDropdown";
  visibilityType: "_public" | "members" | "_private";
};

export type PlasmicVisibilityState__VariantsArgs = {
  isDropdown?: SingleBooleanChoiceArg<"isDropdown">;
  visibilityType?: SingleChoiceArg<"_public" | "members" | "_private">;
};

type VariantPropType = keyof PlasmicVisibilityState__VariantsArgs;
export const PlasmicVisibilityState__VariantProps = new Array<VariantPropType>(
  "isDropdown",
  "visibilityType"
);

export type PlasmicVisibilityState__ArgsType = {
  slot7?: React.ReactNode;
  slot2?: React.ReactNode;
  slot6?: React.ReactNode;
  rename2?: React.ReactNode;
  rename3?: React.ReactNode;
  rename4?: React.ReactNode;
  slot8?: React.ReactNode;
  slot3?: React.ReactNode;
  slot9?: React.ReactNode;
  slot10?: React.ReactNode;
  slot4?: React.ReactNode;
  slot11?: React.ReactNode;
};

type ArgPropType = keyof PlasmicVisibilityState__ArgsType;
export const PlasmicVisibilityState__ArgProps = new Array<ArgPropType>(
  "slot7",
  "slot2",
  "slot6",
  "rename2",
  "rename3",
  "rename4",
  "slot8",
  "slot3",
  "slot9",
  "slot10",
  "slot4",
  "slot11"
);

export type PlasmicVisibilityState__OverridesType = {
  root?: p.Flex<"div">;
  members?: p.Flex<"div">;
  _private?: p.Flex<"div">;
  _public?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  dropdown?: p.Flex<"div">;
  ul?: p.Flex<"ul">;
};

export interface DefaultVisibilityStateProps {
  slot7?: React.ReactNode;
  slot2?: React.ReactNode;
  slot6?: React.ReactNode;
  rename2?: React.ReactNode;
  rename3?: React.ReactNode;
  rename4?: React.ReactNode;
  slot8?: React.ReactNode;
  slot3?: React.ReactNode;
  slot9?: React.ReactNode;
  slot10?: React.ReactNode;
  slot4?: React.ReactNode;
  slot11?: React.ReactNode;
  isDropdown?: SingleBooleanChoiceArg<"isDropdown">;
  visibilityType?: SingleChoiceArg<"_public" | "members" | "_private">;
  className?: string;
}

function PlasmicVisibilityState__RenderFunc(props: {
  variants: PlasmicVisibilityState__VariantsArgs;
  args: PlasmicVisibilityState__ArgsType;
  overrides: PlasmicVisibilityState__OverridesType;
  dataFetches?: PlasmicVisibilityState__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      {(hasVariant(variants, "visibilityType", "members") ? true : true) ? (
        <div
          data-plasmic-name={"members"}
          data-plasmic-override={overrides.members}
          className={classNames(projectcss.all, sty.members, {
            [sty.members__visibilityType__private]: hasVariant(
              variants,
              "visibilityType",
              "_private"
            ),
            [sty.members__visibilityType_members]: hasVariant(
              variants,
              "visibilityType",
              "members"
            ),
          })}
        >
          {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
            <div className={classNames(projectcss.all, sty.freeBox__kyiVc)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <IconMemberIcon
                    className={classNames(projectcss.all, sty.svg___9CuS)}
                    role={"img"}
                  />
                ),

                value: args.slot7,
              })}
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__dFstR)}>
            <div className={classNames(projectcss.all, sty.freeBox__jKZx)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zcRrp
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Members"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                ),

                value: args.slot2,
                className: classNames(sty.slotTargetSlot2),
              })}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__pKszk)}>
              {p.renderPlasmicSlot({
                defaultContents:
                  "All members from this network can see this timeline.",
                value: args.slot6,
              })}
            </div>
          </div>
        </div>
      ) : null}
      {(hasVariant(variants, "visibilityType", "_private") ? true : true) ? (
        <div
          data-plasmic-name={"_private"}
          data-plasmic-override={overrides._private}
          className={classNames(projectcss.all, sty._private, {
            [sty._private__visibilityType__private]: hasVariant(
              variants,
              "visibilityType",
              "_private"
            ),
          })}
        >
          {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
            <div className={classNames(projectcss.all, sty.freeBox__uHr1P)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <LockIconsvgIcon
                    className={classNames(projectcss.all, sty.svg__rTnCb)}
                    role={"img"}
                  />
                ),

                value: args.slot8,
              })}
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__bwnan)}>
            <div className={classNames(projectcss.all, sty.freeBox__dLbL0)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iXaUk
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Private"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                ),

                value: args.slot3,
                className: classNames(sty.slotTargetSlot3),
              })}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox___2DDls)}>
              {p.renderPlasmicSlot({
                defaultContents: "Only people added can see this timeline",
                value: args.slot9,
              })}
            </div>
          </div>
        </div>
      ) : null}
      {(
        hasVariant(variants, "visibilityType", "_private")
          ? true
          : hasVariant(variants, "visibilityType", "members")
          ? true
          : true
      ) ? (
        <div
          data-plasmic-name={"_public"}
          data-plasmic-override={overrides._public}
          className={classNames(projectcss.all, sty._public, {
            [sty._public__visibilityType__private]: hasVariant(
              variants,
              "visibilityType",
              "_private"
            ),
            [sty._public__visibilityType_members]: hasVariant(
              variants,
              "visibilityType",
              "members"
            ),
          })}
        >
          {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
            <div className={classNames(projectcss.all, sty.freeBox__foune)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <IconPublicsvgIcon
                    className={classNames(projectcss.all, sty.svg___30WZw)}
                    role={"img"}
                  />
                ),

                value: args.slot10,
              })}
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__r3IbM)}>
            <div className={classNames(projectcss.all, sty.freeBox___52Vad)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k8Blq
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Public"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                ),

                value: args.slot4,
                className: classNames(sty.slotTargetSlot4),
              })}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__ho20O)}>
              {p.renderPlasmicSlot({
                defaultContents: "Anyone with this link can see the timeline",
                value: args.slot11,
              })}
            </div>
          </div>
        </div>
      ) : null}

      <div className={classNames(projectcss.all, sty.freeBox__jq2M)}>
        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          buttonFeatures={["showEndIcon"]}
          buttonStyle={"white" as const}
          className={classNames("__wab_instance", sty.button)}
          count={"1"}
          text2={"Edit"}
        >
          <IconAccordianIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </Button>

        {(hasVariant(variants, "isDropdown", "isDropdown") ? true : true) ? (
          <div
            data-plasmic-name={"dropdown"}
            data-plasmic-override={overrides.dropdown}
            className={classNames(projectcss.all, sty.dropdown, {
              [sty.dropdown__isDropdown]: hasVariant(
                variants,
                "isDropdown",
                "isDropdown"
              ),
            })}
          >
            <p.Stack
              as={"ul"}
              data-plasmic-name={"ul"}
              data-plasmic-override={overrides.ul}
              hasGap={true}
              className={classNames(projectcss.ul, sty.ul)}
            >
              <ListItem
                className={classNames("__wab_instance", sty.listItem__v40Od)}
                rename={p.renderPlasmicSlot({
                  defaultContents: "Private",
                  value: args.rename2,
                })}
              />

              <ListItem
                className={classNames("__wab_instance", sty.listItem__tnBd)}
                rename={p.renderPlasmicSlot({
                  defaultContents: "Members",
                  value: args.rename3,
                })}
              />

              <ListItem
                className={classNames("__wab_instance", sty.listItem__uJu6U)}
                rename={p.renderPlasmicSlot({
                  defaultContents: "Public",
                  value: args.rename4,
                })}
              />
            </p.Stack>
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "members",
    "_private",
    "_public",
    "button",
    "svg",
    "dropdown",
    "ul",
  ],
  members: ["members"],
  _private: ["_private"],
  _public: ["_public"],
  button: ["button", "svg"],
  svg: ["svg"],
  dropdown: ["dropdown", "ul"],
  ul: ["ul"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  members: "div";
  _private: "div";
  _public: "div";
  button: typeof Button;
  svg: "svg";
  dropdown: "div";
  ul: "ul";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVisibilityState__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVisibilityState__VariantsArgs;
    args?: PlasmicVisibilityState__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicVisibilityState__Fetches;
  } & Omit<PlasmicVisibilityState__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicVisibilityState__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicVisibilityState__ArgProps,
      internalVariantPropNames: PlasmicVisibilityState__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicVisibilityState__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVisibilityState";
  } else {
    func.displayName = `PlasmicVisibilityState.${nodeName}`;
  }
  return func;
}

export const PlasmicVisibilityState = Object.assign(
  // Top-level PlasmicVisibilityState renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    members: makeNodeComponent("members"),
    _private: makeNodeComponent("_private"),
    _public: makeNodeComponent("_public"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    dropdown: makeNodeComponent("dropdown"),
    ul: makeNodeComponent("ul"),

    // Metadata about props expected for PlasmicVisibilityState
    internalVariantProps: PlasmicVisibilityState__VariantProps,
    internalArgProps: PlasmicVisibilityState__ArgProps,
  }
);

export default PlasmicVisibilityState;
/* prettier-ignore-end */
