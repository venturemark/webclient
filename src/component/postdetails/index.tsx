// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React from "react";
import {
  PlasmicPostDetails,
  DefaultPostDetailsProps,
} from "component/plasmic/shared/PlasmicPostDetails";
import ReplyContent from "component/replycontent";
import { IMessage, ISearchMessage } from "module/interface/message";
import { ISearchAllUser, IUser } from "module/interface/user";
import { useMessages } from "module/hook/message";
import { useAllUser } from "module/hook/user";
import { IUpdate } from "module/interface/update";
import { useGetToken } from "module/auth";

interface PostDetailsProps extends DefaultPostDetailsProps {
  setIsVisible: any;
  post: IUpdate;
}

function PostDetails(props: PostDetailsProps) {
  const { setIsVisible, post, ...rest } = props;
  const token = useGetToken();

  const timelineId = post?.timelineId ?? "";
  const updateId = post?.id ?? "";
  const ventureId = post?.ventureId ?? "";

  const messageSearch: ISearchMessage = {
    updateId,
    timelineId,
    ventureId,
    token,
  };

  const { data: messagesData } = useMessages(messageSearch);
  const messages = messagesData ?? [];

  const subjectIds = messages.map((message: IMessage) => message.userId);

  const userAllSearch: ISearchAllUser = {
    subjectIds,
    token,
  };

  const { data: userData, isSuccess: userSuccess } = useAllUser(userAllSearch);

  return (
    <PlasmicPostDetails
      {...rest}
      close={{
        onClick: () => setIsVisible(undefined),
      }}
      post={{
        state: "isPostDetails",
        title: post?.title ?? "",
        description: post?.text ?? "",
        id: updateId,
        timelineId: timelineId,
        userName: post.userName,
        user: post.user,
        date: post?.date ?? "",
      }}
      repliesContainer={{
        children: messages.map((message: IMessage) => (
          <ReplyContent
            userName={
              userSuccess
                ? userData?.filter(
                    (user: IUser) => user.id === message.userId
                  )[0].name
                : ""
            }
            user={
              userSuccess
                ? userData?.filter(
                    (user: IUser) => user.id === message.userId
                  )[0]
                : { name: "" }
            }
            date={message.date}
            key={message.id}
            text={message.text}
          />
        )),
      }}
      replyInput={{
        ventureId,
        timelineId,
        updateId,
      }}
    />
  );
}

export default PostDetails;
