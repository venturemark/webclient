// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useState, useEffect } from "react";
import {
  PlasmicPostDetails,
  DefaultPostDetailsProps,
} from "component/plasmic/shared/PlasmicPostDetails";
import ReplyContent from "component/replycontent";
import { IMessageQuery } from "module/interface/message";
import { useMessages } from "module/hook/message";
import { IUpdate } from "module/interface/update";
import { getUser, getVenture } from "module/store";
import { useAuth0 } from "@auth0/auth0-react";

interface PostDetailsProps extends DefaultPostDetailsProps {
  setIsVisible: any;
  post: IUpdate;
  setPost: any;
}

function PostDetails(props: PostDetailsProps) {
  const { setIsVisible, post } = props;
  const { getAccessTokenSilently } = useAuth0();
  const [token, setToken] = useState<string>("");
  const userId = getUser()?.id ?? "";
  const ventureId = getVenture()?.id ?? "";

  const timelineId = post.timelineId;
  const updateId = post.id;

  const messageSearch: IMessageQuery = {
    updateId,
    timelineId,
    userId,
    ventureId,
    token,
  };

  console.log("message:", messageSearch);

  const { data: messagesData } = useMessages(messageSearch);
  const messages = messagesData?.filter((message: any) => !message.reid) ?? [];

  useEffect(() => {
    const getToken = async () => {
      try {
        const token = await getAccessTokenSilently();
        setToken(token);
      } catch (error) {
        console.log(error.error);
      }
    };
    if (token === "") {
      getToken();
    }
  }, [getAccessTokenSilently, token]);

  return (
    <PlasmicPostDetails
      close={{
        onClick: () => setIsVisible(undefined),
      }}
      post={{
        state: "isPostDetails",
        title: post.title || "no title",
        description: post.description || post.text,
        id: updateId,
        ventureName: post.ventureId,
        timelineId: timelineId,
        userName: post.userId,
        userInitials:
          post.userId
            .split(" ")
            .map((n: string) => n[0])
            .join("") ?? "",
        date: post.date,
      }}
      repliesContainer={{
        children: messages.map((message: any) => (
          <ReplyContent
            userName={message.userId}
            date={message.date}
            key={message.id}
            text={message.text}
          />
        )),
      }}
      replyInput={{
        ventureId,
        timelineId,
        updateId,
        userId,
      }}
    />
  );
}

export default PostDetails;
