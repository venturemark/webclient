// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useContext } from "react";
import { useNavigate } from "react-router-dom";

import { TimelineContext, UserContext, VentureContext } from "component/app";
import {
  DefaultSidebarProps,
  PlasmicSidebar,
} from "component/plasmic/shared/PlasmicSidebar";
import SidebarItemGroup from "component/sidebaritemgroup";
import { useGetToken } from "module/auth";
import { useTimelinesByUserId } from "module/hook/timeline";
import { useVentureByTimeline } from "module/hook/venture";
import { ISearchTimelinesbyUserId, ITimeline } from "module/interface/timeline";
import { ISearchVenturesByTimeline, IVenture } from "module/interface/venture";

interface SidebarProps extends DefaultSidebarProps {}

function Sidebar(props: SidebarProps) {
  const navigate = useNavigate();
  const userContext = useContext(UserContext);
  const timelineContext = useContext(TimelineContext);
  const ventureContext = useContext(VentureContext);
  const token = useGetToken();

  const timelineByUserIdSearch: ISearchTimelinesbyUserId = {
    userId: userContext?.user?.id ?? "",
    token,
  };

  const { data: timelinesData } = useTimelinesByUserId(timelineByUserIdSearch);

  const ventureIds: string[] = timelinesData?.map(
    (timeline: ITimeline) => timeline.ventureId
  );
  const uniqueTimelineVentureIds = [...new Set(ventureIds)];

  const ventureSearch: ISearchVenturesByTimeline = {
    ventureIds: uniqueTimelineVentureIds,
    token,
  };

  const { data: venturesData } = useVentureByTimeline(ventureSearch);

  const timelines = timelineContext?.allTimelines ?? timelinesData ?? [];
  const ventures = ventureContext?.ventures ?? venturesData ?? [];

  const sortedVentures = ventures?.sort(
    (a: IVenture, b: IVenture) => a.name.localeCompare(b.name) ?? []
  );

  return (
    <PlasmicSidebar
      {...props}
      hasInput={sortedVentures?.length > 0 ? true : false}
      itemGroupContainer={{
        children: sortedVentures?.map((venture: IVenture) => (
          <SidebarItemGroup
            timelines={timelines}
            ventureName={venture.name}
            key={venture.id}
            ventureId={venture.id}
            userRole={venture.userRole}
          />
        )),
      }}
      viewCreateVenture={{
        href: "/newventure",
        onClick: (e) => {
          e.preventDefault();
          navigate("/newventure");
        },
      }}
    />
  );
}

export default Sidebar;
