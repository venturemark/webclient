// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useRef, useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import {
  PlasmicSidebar,
  DefaultSidebarProps,
} from 'component/plasmic/shared/PlasmicSidebar';
import SidebarItem from 'component/sidebaritem';
import {
  ITimeline,
  INewTimeline,
  ITimelineQuery,
} from 'module/interface/timeline';
import {
  useTimelines,
  useCreateTimeline,
} from 'module/hook/timeline';

interface SidebarProps extends DefaultSidebarProps {
  setTimelines: React.Dispatch<React.SetStateAction<ITimeline[]>>;
  setCurrentTimeline: React.Dispatch<React.SetStateAction<ITimeline>>;
  addTimelineFocused: boolean;
  userId: string;
  organizationId: string;
}

type FormInputs = {
  name: string;
};

function Sidebar(props: SidebarProps) {
  const {
    setTimelines,
    addTimelineFocused,
    setCurrentTimeline,
    userId,
    organizationId,
  } = props;

  const {
    register,
    handleSubmit,
    reset,
    watch,
  } = useForm<FormInputs>();

  const audienceId = '1';
  const timelineSearch: ITimelineQuery = {
    audienceId,
    userId,
    organizationId,
  };

  const { data: timelinesData } = useTimelines(timelineSearch);
  const nameRef = useRef<HTMLInputElement | null>(null);
  const hasValue = watch('name') ? true : false;
  const [hasInput, setHasInput] = useState(false);
  const timelines = timelinesData ?? [];
  const sortedTimelines = timelines.sort((a: any, b: any) =>
    a.name.localeCompare(b.name),
  );

  const { mutate: createTimeline } = useCreateTimeline();

  const handleAddTimeline = (data: FormInputs) => {
    if (!data.name) {
      return;
    }

    const newTimeline: INewTimeline = {
      name: data.name,
      desc: 'Lorem Ipsum...',
      userId,
      audienceId: '1',
      organizationId,
    };

    // audienceMutation(timelineId)
    createTimeline(newTimeline);

    //reset form
    reset({
      name: '',
    });
  };

  useEffect(() => {
    if (addTimelineFocused) {
      nameRef?.current?.focus();
    }
  }, [addTimelineFocused]);

  return (
    <PlasmicSidebar
      hasValue={hasValue}
      organizationName={{
        hasInput: hasInput,
        setHasInput: setHasInput,
      }}
      hasInput={hasInput}
      sidebarForm={{
        onSubmit: handleSubmit(handleAddTimeline),
      }}
      timelinesContainer={{
        children: sortedTimelines.map((timeline: any) => (
          <SidebarItem
            name={timeline.name}
            isCurrent={timeline.isCurrent}
            onClick={() => {
              const name = timeline.name;

              const thisTimeline = timelines.filter(
                (clickedTimeline: any) =>
                  timeline.id === clickedTimeline.id,
              )[0];

              const currentTimelines = timelines.map(
                (timeline: any) => {
                  const isCurrent =
                    name === timeline.name
                      ? !timeline.isCurrent
                      : false;

                  return { ...timeline, isCurrent: isCurrent };
                },
              );
              setTimelines(currentTimelines);
              setCurrentTimeline(thisTimeline);
            }}
          />
        )),
      }}
      addTimelineInput={{
        name: 'name',
        ref: (e) => {
          register(e);
          nameRef.current = e;
        },
      }}
    />
  );
}

export default Sidebar;
