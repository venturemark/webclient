// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useEffect, useState } from "react";
import {
  PlasmicSidebar,
  DefaultSidebarProps,
} from "component/plasmic/shared/PlasmicSidebar";
import SidebarItemGroup from "component/sidebaritemgroup";
import { ITimeline, ITimelineQuery } from "module/interface/timeline";
import { useTimelines } from "module/hook/timeline";
import { useAuth0 } from "@auth0/auth0-react";
import { useHistory } from "react-router-dom";
import { getVenture, getUser } from "module/store";

interface SidebarProps extends DefaultSidebarProps {
  isHome: boolean;
  setIsHome: React.Dispatch<React.SetStateAction<boolean>>;
  currentTimeline: any;
  setCurrentTimeline: React.Dispatch<
    React.SetStateAction<ITimeline | undefined>
  >;
}

function Sidebar(props: SidebarProps) {
  const { getAccessTokenSilently } = useAuth0();
  const history = useHistory();
  const [token, setToken] = useState<string>("");

  const timelineSearch: ITimelineQuery = {
    userId: getUser()?.id ?? "",
    ventureId: getVenture()?.id ?? "",
    token,
  };

  const venture = getVenture();
  // const ventures = [];

  const { data: timelinesData } = useTimelines(timelineSearch);
  const timelines = timelinesData ?? [];

  const sortedCurrentTimelines = timelines.sort((a: any, b: any) =>
    a.name.localeCompare(b.name)
  );

  useEffect(() => {
    const getToken = async () => {
      try {
        const token = await getAccessTokenSilently();
        setToken(token);
      } catch (error) {
        console.log(error.error);
      }
    };
    if (token === "") {
      getToken();
    }
  }, [getAccessTokenSilently, token]);

  return (
    <PlasmicSidebar
      hasInput={true}
      itemGroupContainer={{
        children: (
          <SidebarItemGroup
            name={venture?.name ?? ""}
            timelines={sortedCurrentTimelines}
          />
        ),
        // children: ventures.map((venture: any) => (
        //   <SidebarItemGroup name={venture.name} timelines={venture.timelines} />
        // )),
      }}
      viewCreateVenture={{ onClick: () => history.push("/newventure") }}
      // timelinesContainer={{
      //   children: sortedCurrentTimelines.map((timeline: ITimeline) => (
      //     <SidebarItem
      //       name={timeline.name}
      //       key={timeline.id}
      //       isCurrent={timeline.isCurrent}
      //       onClick={() => {
      //         setCurrentTimeline(timeline);
      //       }}
      //       userId={userId}
      //       organizationId={organizationId}
      //     />
      //   )),
      // }}
    />
  );
}

export default Sidebar;
