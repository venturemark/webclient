// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useRef, useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { format } from "date-fns";
import {
  PlasmicSidebar,
  DefaultSidebarProps,
} from "component/plasmic/shared/PlasmicSidebar";
// import SidebarItem from "component/sidebaritem";
import { options } from "component/editor/config/initialValues";
import { Node } from "slate";
import { ITimeline } from "module/interface/timeline";
import { IUpdate } from "module/interface/update";
import * as api from "module/api";

interface SidebarProps extends DefaultSidebarProps {
  timelines: ITimeline[];
  setTimelines: React.Dispatch<React.SetStateAction<ITimeline[]>>;
  setCurrentTimeline: React.Dispatch<React.SetStateAction<ITimeline>>;
  addTimelineFocused: boolean;
  refresh: boolean;
  setRefresh: React.Dispatch<React.SetStateAction<boolean>>;
  userId: string;
  organizationId: string;
}

type FormInputs = {
  name: string;
};

const defaultText: Node[] = [
  {
    children: [
      {
        type: options.p.type,
        children: [
          {
            text: "Be Better Tomorrow",
          },
        ],
      },
    ],
  },
];

const defaultUpdates: IUpdate[] = [
  {
    updateId: "now",
    userId: "now",
    timelineId: "now",
    numberValue: 23,
    isFlipped: false,
    isContext: false,
    text: defaultText,
  },
];

function Sidebar(props: SidebarProps) {
  const {
    timelines,
    setTimelines,
    addTimelineFocused,
    setRefresh,
    setCurrentTimeline,
    userId,
    organizationId,
  } = props;
  const { register, handleSubmit, reset, watch } = useForm<FormInputs>();
  const nameRef = useRef<HTMLInputElement | null>(null);
  const hasValue = watch("name") ? true : false;
  const [hasInput, setHasInput] = useState(false);
  // const sortedTimelines = timelines.sort((a, b) =>
  //   a.name.localeCompare(b.name)
  // );

  const handleAddTimeline = (data: FormInputs) => {
    alert("clicked");
    if (!data.name) {
      return;
    }
    const name = data.name;
    const desc = "Lorem ipsum ...";

    const duplicates = timelines.filter((timeline) => name === timeline.name);

    if (duplicates.length > 0) {
      return;
    }

    const date = format(new Date(), "PP");
    const timelineId = "user.venturemark.co/id";

    const defaultData = [
      {
        date: date,
        [data.name]: 0,
        updateId: date,
        timelineId: timelineId,
        metricId: date,
      },
    ];

    const audienceId = "";
    // this is temporary until we add create audience code

    const timeline = {
      name: name,
      date: date,
      stat: "active",
      desc: desc,
      audienceId: audienceId,
      organizationId: organizationId,
      userId: userId,
      timelineId: date,
      dataKey: name,
      updates: defaultUpdates,
      data: defaultData,
      isCurrent: true,
    };

    async function createTimeline() {
      let thisTimelineId = await api.API.Timeline.Create(
        name,
        desc,
        userId,
        audienceId,
        organizationId
      );
      if (thisTimelineId) {
        const thisTimeline = { ...timeline, timelineId: thisTimelineId };
        setCurrentTimeline(thisTimeline);
        setRefresh(true);
      }
    }
    createTimeline();

    const updatedTimelines = [timeline, ...timelines];
    setTimelines(updatedTimelines);

    //reset form
    reset({
      name: "",
    });
  };

  useEffect(() => {
    if (addTimelineFocused) {
      nameRef?.current?.focus();
    }
  }, [addTimelineFocused]);

  return (
    <PlasmicSidebar
      hasValue={hasValue}
      organizationName={{
        hasInput: hasInput,
        setHasInput: setHasInput,
      }}
      hasInput={hasInput}
      sidebarForm={{
        onSubmit: handleSubmit(handleAddTimeline),
      }}
      // timelinesContainer={{
      //   children: sortedTimelines.map((timeline) => (
      //     <SidebarItem
      //       name={timeline.name}
      //       isCurrent={timeline.isCurrent}
      //       onClick={() => {
      //         const name = timeline.name;
      //
      //         const thisTimeline = timelines.filter(
      //           (clickedTimeline) =>
      //             timeline.timelineId === clickedTimeline.timelineId
      //         )[0];
      //
      //         const currentTimelines = timelines.map((timeline) => {
      //           const isCurrent =
      //             name === timeline.name ? !timeline.isCurrent : false;
      //
      //           return { ...timeline, isCurrent: isCurrent };
      //         });
      //         setTimelines(currentTimelines);
      //         setCurrentTimeline(thisTimeline);
      //         setRefresh(true);
      //       }}
      //     />
      //   )),
      // }}
      addTimelineInput={{
        name: "name",
        ref: (e) => {
          register(e);
          nameRef.current = e;
        },
      }}
    />
  );
}

export default Sidebar;
