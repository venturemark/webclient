// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useState } from "react";
// import { PressEvent } from "@react-types/shared";
import {
  PlasmicSidebarItem,
  DefaultSidebarItemProps,
} from "component/plasmic/shared/PlasmicSidebarItem";
// import { AntDropdown } from "component/ant/dropdown";
// import { useForm } from "react-hook-form";
// import { INewTimeline } from "module/interface/timeline";
// import { useCreateTimeline } from "module/hook/timeline";
import { useHistory } from "react-router-dom";
import { getVenture } from "module/store";

interface SidebarItemProps extends DefaultSidebarItemProps {
  name: string;
  userId: string;
  organizationId: string;
  // onClick?: (e: React.MouseEvent) => void;
  // onPress?: (e: PressEvent) => void;
  // isCurrent?: boolean;
  setHasInput?: any;
  itemType?: "timeline" | "createTimeline" | "ventureCollapsed";
}

// type FormInputs = {
//   name: string;
// };

function SidebarItem(props: SidebarItemProps) {
  const {
    name,
    userId,
    organizationId,
    itemType,
    // onClick,
    // isCurrent,
    setHasInput,
    ...rest
  } = props;
  const [isUserOnClick, setIsUserOnClick] = useState(false);
  const history = useHistory();
  const venture = getVenture();
  const timelineSlug = name.toLowerCase().replace(/\s/g, "");

  const link =
    itemType === "timeline"
      ? `/${venture?.id}/${timelineSlug}`
      : `/${venture?.id}`;
  // const { register, handleSubmit, reset } = useForm<FormInputs>();

  // const { mutate: createTimeline } = useCreateTimeline();

  // const handleAddTimeline = (data: FormInputs) => {
  //   if (!data.name) {
  //     return;
  //   }

  //   const token = "";
  //   const newTimeline: INewTimeline = {
  //     name: data.name,
  //     desc: "edit timeline description",
  //     userId,
  //     organizationId,
  //     token,
  //   };

  //   // audienceMutation(timelineId)
  //   createTimeline(newTimeline);

  //   //reset form
  //   reset({
  //     name: "",
  //   });

  //   //hide sidebar
  //   setHasInput(false);
  // };

  return (
    <PlasmicSidebarItem
      // isInput={isInput}
      // isOrganization={isOrganization}
      // orgHoverIcon={{
      //   onClick: () => {
      //     setHasInput(true);
      //   } }}
      // itemHoverIcon={{
      //   render: () => {
      //     return <AntDropdown />;
      //   } }}
      isUserOnClick={isUserOnClick}
      iconButton={{
        onClick: () => setIsUserOnClick(!isUserOnClick),
      }}
      onClick={() => history.push(link)}
      itemType={itemType}
      name={name}
      // isActive={isCurrent}
      // onClick={onClick}
      // sidebarForm={{
      //   onSubmit: handleSubmit(handleAddTimeline) }}

      // addTimelineInput={{
      //   name: "name",
      //   ref: register(),
      //   maxLength: 15 }}
      {...rest}
    />
  );
}

export default SidebarItem;
