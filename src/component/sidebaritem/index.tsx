// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import React, { useState, useEffect } from "react";
import {
  PlasmicSidebarItem,
  DefaultSidebarItemProps,
} from "component/plasmic/shared/PlasmicSidebarItem";
import { useHistory } from "react-router-dom";

interface SidebarItemProps extends DefaultSidebarItemProps {
  name: string;
  ventureName: string;
  ventureId: string;
  setHasInput?: any;
  setIsCollapsed?: any;
  isCollapsed?: boolean;
  itemType?: "timeline" | "createTimeline" | "ventureCollapsed";
}
function SidebarItem(props: SidebarItemProps) {
  const {
    name,
    ventureId,
    ventureName,
    itemType,
    setHasInput,
    setIsCollapsed,
    isCollapsed,
    ...rest
  } = props;
  const [isUserOnClick, setIsUserOnClick] = useState(false);
  const history = useHistory();
  const ventureHandle =
    itemType === "timeline"
      ? ventureName?.toLowerCase().replace(/\s/g, "")
      : typeof name === "string"
      ? name?.toLowerCase().replace(/\s/g, "")
      : "";
  const timelineHandle =
    itemType !== "createTimeline" ? name?.toLowerCase().replace(/\s/g, "") : "";

  const link =
    itemType === "timeline"
      ? `/${ventureHandle}/${timelineHandle}/feed`
      : `/${ventureHandle}/feed`;

  useEffect(() => {
    const handleWindowClick = () => setIsUserOnClick(false);
    if (isUserOnClick) {
      window.addEventListener("click", handleWindowClick);
      window.addEventListener("keydown", handleWindowClick);
    } else {
      window.removeEventListener("click", handleWindowClick);
      window.removeEventListener("keydown", handleWindowClick);
    }
    return () => {
      window.removeEventListener("click", handleWindowClick);
      window.removeEventListener("keydown", handleWindowClick);
    };
  }, [isUserOnClick, setIsUserOnClick]);

  return (
    <PlasmicSidebarItem
      {...rest}
      isUserOnClick={isUserOnClick}
      icon={{
        onClick: (e) => {
          e.stopPropagation();
          itemType !== "createTimeline" &&
            itemType !== "timeline" &&
            setIsCollapsed(!isCollapsed);
        },
      }}
      iconButton={{
        onClick: (e) => {
          e.stopPropagation();
          setIsUserOnClick(!isUserOnClick);
        },
      }}
      onClick={() => {
        console.log(name);
        console.log(link);
        itemType !== "createTimeline"
          ? history.push(link)
          : history.push(`/${ventureHandle}/newtimeline`);
      }}
      itemType={itemType}
      name={name}
      dropdown={{
        timelineHandle,
        ventureHandle,
        isTimeline: itemType === "timeline" ? true : false,
        setIsUserOnClick,
      }}
    />
  );
}

export default SidebarItem;
