/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mSMs7FqGjFMPgGjdzmbmrV
// Component: xr8buS_I4PE
import * as React from "react";
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts
} from "@plasmicapp/react-web";

import { ScreenContext, ScreenValue } from "../PlasmicGlobalVariant__Screen"; // plasmic-import: 56c3647f-e651-4dbb-a83a-6988a6e19d16/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_venturemark.css"; // plasmic-import: mSMs7FqGjFMPgGjdzmbmrV/projectcss
import "./PlasmicAcceptInvite.css"; // plasmic-import: xr8buS_I4PE/css

export type PlasmicAcceptInvite__VariantMembers = {
  loading: "isLoading";
};

export type PlasmicAcceptInvite__VariantsArgs = {
  loading?: SingleChoiceArg<"isLoading">;
};

type VariantPropType = keyof PlasmicAcceptInvite__VariantsArgs;
export const PlasmicAcceptInvite__VariantProps = new Array<VariantPropType>(
  "loading"
);

export type PlasmicAcceptInvite__ArgsType = {
  firstName?: React.ReactNode;
  companyName?: React.ReactNode;
  companyAvatar?: string;
  companyName2?: React.ReactNode;
  companyDescription?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAcceptInvite__ArgsType;
export const PlasmicAcceptInvite__ArgProps = new Array<ArgPropType>(
  "firstName",
  "companyName",
  "companyAvatar",
  "companyName2",
  "companyDescription"
);

export type PlasmicAcceptInvite__OverridesType = {
  root?: Flex<"div">;
  companyAvatar?: Flex<"img">;
  link?: Flex<"a">;
};

export interface DefaultAcceptInviteProps {
  firstName?: React.ReactNode;
  companyName?: React.ReactNode;
  companyAvatar?: string;
  companyName2?: React.ReactNode;
  companyDescription?: React.ReactNode;
  loading?: SingleChoiceArg<"isLoading">;
  className?: string;
}

function PlasmicAcceptInvite__RenderFunc(props: {
  variants: PlasmicAcceptInvite__VariantsArgs;
  args: PlasmicAcceptInvite__ArgsType;
  overrides: PlasmicAcceptInvite__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = {
    screen: React.useContext(ScreenContext)
  };

  Object.entries(globalVariants).forEach(([key, value]) => {
    if (value === ("PLEASE_RENDER_INSIDE_PROVIDER" as any)) {
      throw new Error(
        `Context value for ${key} was not defined. Did you render the required provider for this component? Learn More: https://www.plasmic.app/learn/other-assets/#global-variants`
      );
    }
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames({
        "AcceptInvite__root--desktop__nqJZwU__2W": true,
        "AcceptInvite__root--isLoadingDesktop__nqJZw9WKv-_U__2W": hasVariant(
          variants,
          "loading",
          "isLoading"
        ),

        "AcceptInvite__root--isLoading__nqJZw9WKv-": hasVariant(
          variants,
          "loading",
          "isLoading"
        ),

        AcceptInvite__root__nqJZw: true,
        "plasmic-default__all": true,
        "plasmic-default__div": true,
        root_reset_mSMs7FqGjFMPgGjdzmbmrV: true
      })}
    >
      <div
        className={classNames({
          "AcceptInvite__box--desktop__x5KguU__2W": true,
          "AcceptInvite__box--isLoadingDesktop__x5Kgu9WKv-_U__2W": hasVariant(
            variants,
            "loading",
            "isLoading"
          ),

          AcceptInvite__box__x5Kgu: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        <div
          className={classNames({
            "AcceptInvite__box--isLoadingDesktop__1ZvFa9WKv-_U__2W": hasVariant(
              variants,
              "loading",
              "isLoading"
            ),

            "AcceptInvite__box--isLoading__1ZvFa9WKv-": hasVariant(
              variants,
              "loading",
              "isLoading"
            ),

            AcceptInvite__box__1ZvFa: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          })}
        >
          <div
            className={
              classNames({
                "AcceptInvite__box--desktop__X13vJU__2W": true,
                "AcceptInvite__box--isLoadingDesktop__X13vJ9WKv-_U__2W": hasVariant(
                  variants,
                  "loading",
                  "isLoading"
                ),

                "AcceptInvite__box--isLoading__X13vJ9WKv-": hasVariant(
                  variants,
                  "loading",
                  "isLoading"
                ),

                AcceptInvite__box__X13vJ: true,
                "plasmic-default__all": true,
                "plasmic-default__div": true
              }) + " __wab_text"
            }
          >
            {hasVariant(variants, "loading", "isLoading")
              ? "We're Finding Your Invite"
              : hasVariant(globalVariants, "screen", "desktop")
              ? "Congratulations "
              : "Congratulations "}
          </div>

          <PlasmicSlot
            defaultContents={""}
            value={args.firstName}
            className={classNames({
              "AcceptInvite__slotFirstName--desktop__jciICU__2W": true,
              AcceptInvite__slotFirstName__jciIC: true
            })}
          />

          {(hasVariant(variants, "loading", "isLoading") ? false : true) ? (
            <div
              className={
                classNames({
                  "AcceptInvite__box--desktop___l7ZfU__2W": true,
                  "AcceptInvite__box--isLoading___l7Zf9WKv-": hasVariant(
                    variants,
                    "loading",
                    "isLoading"
                  ),

                  AcceptInvite__box___l7Zf: true,
                  "plasmic-default__all": true,
                  "plasmic-default__div": true
                }) + " __wab_text"
              }
            >
              {"!"}
            </div>
          ) : null}
        </div>

        <div
          data-plasmic-wrap-flex-child={true}
          className={classNames({
            "AcceptInvite__box--isLoading__2nr5f9WKv-": hasVariant(
              variants,
              "loading",
              "isLoading"
            ),

            AcceptInvite__box__2nr5f: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          })}
        >
          <div
            className={
              classNames({
                "AcceptInvite__box--desktop__llSMmU__2W": true,
                "AcceptInvite__box--isLoading__llSMm9WKv-": hasVariant(
                  variants,
                  "loading",
                  "isLoading"
                ),

                AcceptInvite__box__llSMm: true,
                "plasmic-default__all": true,
                "plasmic-default__div": true
              }) + " __wab_text"
            }
          >
            {hasVariant(variants, "loading", "isLoading")
              ? "Please be patient. ðŸ™‚ "
              : "You're confirmed to receive updates from "}
          </div>

          {(hasVariant(variants, "loading", "isLoading") ? false : true) ? (
            <div
              className={classNames({
                "AcceptInvite__box--isLoading__gNROk9WKv-": hasVariant(
                  variants,
                  "loading",
                  "isLoading"
                ),

                AcceptInvite__box__gNROk: true,
                "plasmic-default__all": true,
                "plasmic-default__div": true
              })}
            >
              <PlasmicSlot
                defaultContents={"TrueHoop"}
                value={args.companyName}
                className={classNames({
                  "AcceptInvite__slotCompanyName--isLoading__ToYFg9WKv-": hasVariant(
                    variants,
                    "loading",
                    "isLoading"
                  ),

                  AcceptInvite__slotCompanyName__ToYFg: true
                })}
              />
            </div>
          ) : null}
          {(hasVariant(variants, "loading", "isLoading") ? false : true) ? (
            <div
              className={
                classNames({
                  "AcceptInvite__box--isLoading__pNbqH9WKv-": hasVariant(
                    variants,
                    "loading",
                    "isLoading"
                  ),

                  AcceptInvite__box__pNbqH: true,
                  "plasmic-default__all": true,
                  "plasmic-default__div": true
                }) + " __wab_text"
              }
            >
              {"."}
            </div>
          ) : null}
        </div>

        {(hasVariant(variants, "loading", "isLoading") ? false : true) ? (
          <img
            data-plasmic-name={"companyAvatar"}
            data-plasmic-override={overrides.companyAvatar}
            alt={""}
            className={classNames({
              "AcceptInvite__companyAvatar--desktop__UBTVBU__2W": true,
              "AcceptInvite__companyAvatar--isLoading__UBTVB9WKv-": hasVariant(
                variants,
                "loading",
                "isLoading"
              ),

              AcceptInvite__companyAvatar__UBTVB: true,
              "plasmic-default__all": true,
              "plasmic-default__img": true
            })}
            role={"img"}
            src={args.companyAvatar !== undefined ? args.companyAvatar : ""}
          ></img>
        ) : null}
        {(hasVariant(variants, "loading", "isLoading") ? false : true) ? (
          <div
            className={classNames({
              "AcceptInvite__box--isLoading__tXcIK9WKv-": hasVariant(
                variants,
                "loading",
                "isLoading"
              ),

              AcceptInvite__box__tXcIK: true,
              "plasmic-default__all": true,
              "plasmic-default__div": true
            })}
          >
            <PlasmicSlot
              defaultContents={"TrueHoop"}
              value={args.companyName2}
              className={classNames({
                "AcceptInvite__slotCompanyName2--desktop__OPJb7U__2W": true,
                "AcceptInvite__slotCompanyName2--isLoading__OPJb79WKv-": hasVariant(
                  variants,
                  "loading",
                  "isLoading"
                ),

                AcceptInvite__slotCompanyName2__OPJb7: true
              })}
            />
          </div>
        ) : null}
        {(hasVariant(variants, "loading", "isLoading") ? false : true) ? (
          <div
            className={classNames({
              "AcceptInvite__box--desktop__mO7teU__2W": true,
              "AcceptInvite__box--isLoading__mO7te9WKv-": hasVariant(
                variants,
                "loading",
                "isLoading"
              ),

              AcceptInvite__box__mO7te: true,
              "plasmic-default__all": true,
              "plasmic-default__div": true
            })}
          >
            <PlasmicSlot
              defaultContents={
                "Award-winning hard truths about the NBA since 2005"
              }
              value={args.companyDescription}
              className={classNames({
                "AcceptInvite__slotCompanyDescription--desktop__KYPs-U__2W": true,
                "AcceptInvite__slotCompanyDescription__KYPs-": true
              })}
            />
          </div>
        ) : null}
      </div>

      <div
        data-plasmic-wrap-flex-child={true}
        className={classNames({
          AcceptInvite__box__fTZD5: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        <div
          className={
            classNames({
              AcceptInvite__box__q6VGC: true,
              "plasmic-default__all": true,
              "plasmic-default__div": true
            }) + " __wab_text"
          }
        >
          {"Powered by"}
        </div>

        <a
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={
            classNames({
              AcceptInvite__link__nbDsx: true,
              "plasmic-default__a": true,
              "plasmic-default__all": true
            }) + " __wab_text"
          }
          href={"https://venturemark.co/" as const}
        >
          {"Venturemark"}
        </a>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "companyAvatar", "link"],
  companyAvatar: ["companyAvatar"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  companyAvatar: "img";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAcceptInvite__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAcceptInvite__VariantsArgs;
    args?: PlasmicAcceptInvite__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & // Specify variants directly as props
  Omit<PlasmicAcceptInvite__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicAcceptInvite__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName>;
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAcceptInvite__ArgProps,
      internalVariantPropNames: PlasmicAcceptInvite__VariantProps
    });

    return PlasmicAcceptInvite__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAcceptInvite";
  } else {
    func.displayName = `PlasmicAcceptInvite.${nodeName}`;
  }
  return func;
}

export const PlasmicAcceptInvite = Object.assign(
  // Top-level PlasmicAcceptInvite renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    companyAvatar: makeNodeComponent("companyAvatar"),
    link: makeNodeComponent("link"),

    // Helper for creating a Renderer
    createRenderer: () => new PlasmicAcceptInvite__Renderer({}, {}),

    // Metadata about props expected for PlasmicAcceptInvite
    internalVariantProps: PlasmicAcceptInvite__VariantProps,
    internalArgProps: PlasmicAcceptInvite__ArgProps
  }
);

type ForNodeRenderer<NodeName extends NodeNameType> = NodeRenderer<
  PlasmicAcceptInvite__VariantsArgs,
  PlasmicAcceptInvite__ArgsType,
  NodeOverridesType<NodeName>
>;

class PlasmicAcceptInvite__Renderer extends Renderer<
  PlasmicAcceptInvite__VariantsArgs,
  PlasmicAcceptInvite__ArgsType,
  PlasmicAcceptInvite__OverridesType,
  "root"
> {
  constructor(
    variants: PlasmicAcceptInvite__VariantsArgs,
    args: PlasmicAcceptInvite__ArgsType
  ) {
    super(variants, args, PlasmicAcceptInvite__RenderFunc, "root");
  }

  protected create(
    variants: PlasmicAcceptInvite__VariantsArgs,
    args: PlasmicAcceptInvite__ArgsType
  ) {
    return new PlasmicAcceptInvite__Renderer(variants, args);
  }

  getInternalVariantProps(): VariantPropType[] {
    return PlasmicAcceptInvite__VariantProps;
  }

  getInternalArgProps(): ArgPropType[] {
    return PlasmicAcceptInvite__ArgProps;
  }

  forNode(name: "link"): ForNodeRenderer<"link">;
  forNode(name: "companyAvatar"): ForNodeRenderer<"companyAvatar">;
  forNode(name: "root"): ForNodeRenderer<"root">;
  forNode(name: NodeNameType) {
    return super.forNode(name);
  }
}

export default PlasmicAcceptInvite;
/* prettier-ignore-end */
