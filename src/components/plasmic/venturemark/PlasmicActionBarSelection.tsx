/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mSMs7FqGjFMPgGjdzmbmrV
// Component: LVHxqJ-yrV
import * as React from "react";
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_venturemark.css"; // plasmic-import: mSMs7FqGjFMPgGjdzmbmrV/projectcss
import "./PlasmicActionBarSelection.css"; // plasmic-import: LVHxqJ-yrV/css
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: c84MUP179h/icon
import IconAudienceIcon from "./icons/PlasmicIcon__IconAudience"; // plasmic-import: zICM6YbRr4/icon
import IconMetricIcon from "./icons/PlasmicIcon__IconMetric"; // plasmic-import: -jtIQQh_Az/icon
import IconAskIcon from "./icons/PlasmicIcon__IconAsk"; // plasmic-import: 36OPIllke4/icon
import IconCancelIcon from "./icons/PlasmicIcon__IconCancel"; // plasmic-import: VZwn0H7x-/icon

export type PlasmicActionBarSelection__VariantMembers = {
  type: "audience" | "metric" | "ask";
};

export type PlasmicActionBarSelection__VariantsArgs = {
  type?: SingleChoiceArg<"audience" | "metric" | "ask">;
};

type VariantPropType = keyof PlasmicActionBarSelection__VariantsArgs;
export const PlasmicActionBarSelection__VariantProps = new Array<
  VariantPropType
>("type");

export type PlasmicActionBarSelection__ArgsType = {
  name?: React.ReactNode;
};

type ArgPropType = keyof PlasmicActionBarSelection__ArgsType;
export const PlasmicActionBarSelection__ArgProps = new Array<ArgPropType>(
  "name"
);

export type PlasmicActionBarSelection__OverridesType = {
  actionBarSelection?: Flex<"div">;
  svg?: Flex<"svg">;
  _delete?: Flex<"svg">;
};

export interface DefaultActionBarSelectionProps {
  name?: React.ReactNode;
  type?: SingleChoiceArg<"audience" | "metric" | "ask">;
  className?: string;
}

function PlasmicActionBarSelection__RenderFunc(props: {
  variants: PlasmicActionBarSelection__VariantsArgs;
  args: PlasmicActionBarSelection__ArgsType;
  overrides: PlasmicActionBarSelection__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"actionBarSelection"}
      data-plasmic-override={overrides.actionBarSelection}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames({
        "ActionBarSelection__actionBarSelection--ask__0JFWRJsja5": hasVariant(
          variants,
          "type",
          "ask"
        ),

        "ActionBarSelection__actionBarSelection--audience__0JFWRJy9-I": hasVariant(
          variants,
          "type",
          "audience"
        ),

        "ActionBarSelection__actionBarSelection--metric__0JFWRj3qz0": hasVariant(
          variants,
          "type",
          "metric"
        ),

        ActionBarSelection__actionBarSelection__0JFWR: true,
        "plasmic-default__all": true,
        "plasmic-default__div": true,
        root_reset_mSMs7FqGjFMPgGjdzmbmrV: true
      })}
    >
      <PlasmicIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        PlasmicIconType={
          hasVariant(variants, "type", "ask")
            ? IconAskIcon
            : hasVariant(variants, "type", "metric")
            ? IconMetricIcon
            : hasVariant(variants, "type", "audience")
            ? IconAudienceIcon
            : Icon14Icon
        }
        className={classNames({
          "ActionBarSelection__svg--ask__XSj8RJsja5": hasVariant(
            variants,
            "type",
            "ask"
          ),

          "ActionBarSelection__svg--audience__XSj8RJy9-I": hasVariant(
            variants,
            "type",
            "audience"
          ),

          "ActionBarSelection__svg--metric__XSj8Rj3qz0": hasVariant(
            variants,
            "type",
            "metric"
          ),

          ActionBarSelection__svg__XSj8R: true,
          "plasmic-default__all": true,
          "plasmic-default__svg": true
        })}
        role={"img"}
        {...({} as any)}
      ></PlasmicIcon>

      <PlasmicSlot
        defaultContents={"Investors"}
        value={args.name}
        className={classNames({
          "ActionBarSelection__slotName--ask__Yb_fTJsja5": hasVariant(
            variants,
            "type",
            "ask"
          ),

          "ActionBarSelection__slotName--audience__Yb_fTJy9-I": hasVariant(
            variants,
            "type",
            "audience"
          ),

          "ActionBarSelection__slotName--metric__Yb_fTj3qz0": hasVariant(
            variants,
            "type",
            "metric"
          ),

          ActionBarSelection__slotName__Yb_fT: true
        })}
      />

      <IconCancelIcon
        data-plasmic-name={"_delete"}
        data-plasmic-override={overrides._delete}
        className={classNames({
          "ActionBarSelection___delete--audience__378W9Jy9-I": hasVariant(
            variants,
            "type",
            "audience"
          ),

          ActionBarSelection___delete__378W9: true,
          "plasmic-default__all": true,
          "plasmic-default__svg": true
        })}
        role={"img"}
        {...({} as any)}
      ></IconCancelIcon>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  actionBarSelection: ["actionBarSelection", "svg", "_delete"],
  svg: ["svg"],
  _delete: ["_delete"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  actionBarSelection: "div";
  svg: "svg";
  _delete: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActionBarSelection__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActionBarSelection__VariantsArgs;
    args?: PlasmicActionBarSelection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & // Specify variants directly as props
  Omit<PlasmicActionBarSelection__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicActionBarSelection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName>;
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicActionBarSelection__ArgProps,
      internalVariantPropNames: PlasmicActionBarSelection__VariantProps
    });

    return PlasmicActionBarSelection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "actionBarSelection") {
    func.displayName = "PlasmicActionBarSelection";
  } else {
    func.displayName = `PlasmicActionBarSelection.${nodeName}`;
  }
  return func;
}

export const PlasmicActionBarSelection = Object.assign(
  // Top-level PlasmicActionBarSelection renders the root element
  makeNodeComponent("actionBarSelection"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    _delete: makeNodeComponent("_delete"),

    // Helper for creating a Renderer
    createRenderer: () => new PlasmicActionBarSelection__Renderer({}, {}),

    // Metadata about props expected for PlasmicActionBarSelection
    internalVariantProps: PlasmicActionBarSelection__VariantProps,
    internalArgProps: PlasmicActionBarSelection__ArgProps
  }
);

type ForNodeRenderer<NodeName extends NodeNameType> = NodeRenderer<
  PlasmicActionBarSelection__VariantsArgs,
  PlasmicActionBarSelection__ArgsType,
  NodeOverridesType<NodeName>
>;

class PlasmicActionBarSelection__Renderer extends Renderer<
  PlasmicActionBarSelection__VariantsArgs,
  PlasmicActionBarSelection__ArgsType,
  PlasmicActionBarSelection__OverridesType,
  "actionBarSelection"
> {
  constructor(
    variants: PlasmicActionBarSelection__VariantsArgs,
    args: PlasmicActionBarSelection__ArgsType
  ) {
    super(
      variants,
      args,
      PlasmicActionBarSelection__RenderFunc,
      "actionBarSelection"
    );
  }

  protected create(
    variants: PlasmicActionBarSelection__VariantsArgs,
    args: PlasmicActionBarSelection__ArgsType
  ) {
    return new PlasmicActionBarSelection__Renderer(variants, args);
  }

  getInternalVariantProps(): VariantPropType[] {
    return PlasmicActionBarSelection__VariantProps;
  }

  getInternalArgProps(): ArgPropType[] {
    return PlasmicActionBarSelection__ArgProps;
  }

  forNode(name: "_delete"): ForNodeRenderer<"_delete">;
  forNode(name: "svg"): ForNodeRenderer<"svg">;
  forNode(name: "actionBarSelection"): ForNodeRenderer<"actionBarSelection">;
  forNode(name: NodeNameType) {
    return super.forNode(name);
  }
}

export default PlasmicActionBarSelection;
/* prettier-ignore-end */
