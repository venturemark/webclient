/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mSMs7FqGjFMPgGjdzmbmrV
// Component: nqKXpmm91O
import * as React from "react";
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_venturemark.css"; // plasmic-import: mSMs7FqGjFMPgGjdzmbmrV/projectcss
import "./PlasmicLandingInput.css"; // plasmic-import: nqKXpmm91O/css

export type PlasmicLandingInput__VariantMembers = {
  addedToWaitlist: "added";
  size: "large";
  color: "dark";
};

export type PlasmicLandingInput__VariantsArgs = {
  addedToWaitlist?: SingleChoiceArg<"added">;
  size?: SingleChoiceArg<"large">;
  color?: SingleChoiceArg<"dark">;
};

type VariantPropType = keyof PlasmicLandingInput__VariantsArgs;
export const PlasmicLandingInput__VariantProps = new Array<VariantPropType>(
  "addedToWaitlist",
  "size",
  "color"
);

export type PlasmicLandingInput__ArgsType = {};
type ArgPropType = keyof PlasmicLandingInput__ArgsType;
export const PlasmicLandingInput__ArgProps = new Array<ArgPropType>();

export type PlasmicLandingInput__OverridesType = {
  emailAddress?: Flex<"input">;
};

export interface DefaultLandingInputProps {
  addedToWaitlist?: SingleChoiceArg<"added">;
  size?: SingleChoiceArg<"large">;
  color?: SingleChoiceArg<"dark">;
  className?: string;
}

function PlasmicLandingInput__RenderFunc(props: {
  variants: PlasmicLandingInput__VariantsArgs;
  args: PlasmicLandingInput__ArgsType;
  overrides: PlasmicLandingInput__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return ((hasVariant(variants, "addedToWaitlist", "added") ? false : true) ? (
    <input
      data-plasmic-name={"emailAddress"}
      data-plasmic-override={overrides.emailAddress}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames({
        "LandingInput__emailAddress--added__XV3fWk_PPk": hasVariant(
          variants,
          "addedToWaitlist",
          "added"
        ),

        "LandingInput__emailAddress--dark__XV3fWyqYuT": hasVariant(
          variants,
          "color",
          "dark"
        ),

        "LandingInput__emailAddress--desktop__XV3fWU__2W": true,
        "LandingInput__emailAddress--largeDesktop__XV3fWjA0ZN_U__2W": hasVariant(
          variants,
          "size",
          "large"
        ),

        "LandingInput__emailAddress--large__XV3fWjA0ZN": hasVariant(
          variants,
          "size",
          "large"
        ),

        LandingInput__emailAddress__XV3fW: true,
        "plasmic-default__all": true,
        "plasmic-default__input": true,
        root_reset_mSMs7FqGjFMPgGjdzmbmrV: true
      })}
      placeholder={"Your E-mail" as const}
      size={1 as const}
      type={"text" as const}
    ></input>
  ) : null) as React.ReactElement | null;
}

const PlasmicDescendants = {
  emailAddress: ["emailAddress"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  emailAddress: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLandingInput__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLandingInput__VariantsArgs;
    args?: PlasmicLandingInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & // Specify variants directly as props
  Omit<PlasmicLandingInput__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicLandingInput__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName>;
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLandingInput__ArgProps,
      internalVariantPropNames: PlasmicLandingInput__VariantProps
    });

    return PlasmicLandingInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "emailAddress") {
    func.displayName = "PlasmicLandingInput";
  } else {
    func.displayName = `PlasmicLandingInput.${nodeName}`;
  }
  return func;
}

export const PlasmicLandingInput = Object.assign(
  // Top-level PlasmicLandingInput renders the root element
  makeNodeComponent("emailAddress"),
  {
    // Helper components rendering sub-elements

    // Helper for creating a Renderer
    createRenderer: () => new PlasmicLandingInput__Renderer({}, {}),

    // Metadata about props expected for PlasmicLandingInput
    internalVariantProps: PlasmicLandingInput__VariantProps,
    internalArgProps: PlasmicLandingInput__ArgProps
  }
);

type ForNodeRenderer<NodeName extends NodeNameType> = NodeRenderer<
  PlasmicLandingInput__VariantsArgs,
  PlasmicLandingInput__ArgsType,
  NodeOverridesType<NodeName>
>;

class PlasmicLandingInput__Renderer extends Renderer<
  PlasmicLandingInput__VariantsArgs,
  PlasmicLandingInput__ArgsType,
  PlasmicLandingInput__OverridesType,
  "emailAddress"
> {
  constructor(
    variants: PlasmicLandingInput__VariantsArgs,
    args: PlasmicLandingInput__ArgsType
  ) {
    super(variants, args, PlasmicLandingInput__RenderFunc, "emailAddress");
  }

  protected create(
    variants: PlasmicLandingInput__VariantsArgs,
    args: PlasmicLandingInput__ArgsType
  ) {
    return new PlasmicLandingInput__Renderer(variants, args);
  }

  getInternalVariantProps(): VariantPropType[] {
    return PlasmicLandingInput__VariantProps;
  }

  getInternalArgProps(): ArgPropType[] {
    return PlasmicLandingInput__ArgProps;
  }

  forNode(name: "emailAddress"): ForNodeRenderer<"emailAddress">;
  forNode(name: NodeNameType) {
    return super.forNode(name);
  }
}

export default PlasmicLandingInput;
/* prettier-ignore-end */
