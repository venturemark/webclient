/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mSMs7FqGjFMPgGjdzmbmrV
// Component: LvBVLEU_9e
import * as React from "react";
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_venturemark.css"; // plasmic-import: mSMs7FqGjFMPgGjdzmbmrV/projectcss
import "./PlasmicLoginEmail.css"; // plasmic-import: LvBVLEU_9e/css

export type PlasmicLoginEmail__VariantMembers = {};
export type PlasmicLoginEmail__VariantsArgs = {};
type VariantPropType = keyof PlasmicLoginEmail__VariantsArgs;
export const PlasmicLoginEmail__VariantProps = new Array<VariantPropType>();

export type PlasmicLoginEmail__ArgsType = {};
type ArgPropType = keyof PlasmicLoginEmail__ArgsType;
export const PlasmicLoginEmail__ArgProps = new Array<ArgPropType>();

export type PlasmicLoginEmail__OverridesType = {
  loginEmail?: Flex<"input">;
};

export interface DefaultLoginEmailProps {
  className?: string;
}

function PlasmicLoginEmail__RenderFunc(props: {
  variants: PlasmicLoginEmail__VariantsArgs;
  args: PlasmicLoginEmail__ArgsType;
  overrides: PlasmicLoginEmail__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <input
      data-plasmic-name={"loginEmail"}
      data-plasmic-override={overrides.loginEmail}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames({
        "LoginEmail__loginEmail--desktop__7y4dNU__2W": true,
        LoginEmail__loginEmail__7y4dN: true,
        "plasmic-default__all": true,
        "plasmic-default__input": true,
        root_reset_mSMs7FqGjFMPgGjdzmbmrV: true
      })}
      placeholder={"Email Address" as const}
      size={1 as const}
      type={"text" as const}
    ></input>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  loginEmail: ["loginEmail"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  loginEmail: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginEmail__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginEmail__VariantsArgs;
    args?: PlasmicLoginEmail__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & // Specify variants directly as props
  Omit<PlasmicLoginEmail__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicLoginEmail__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName>;
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLoginEmail__ArgProps,
      internalVariantPropNames: PlasmicLoginEmail__VariantProps
    });

    return PlasmicLoginEmail__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "loginEmail") {
    func.displayName = "PlasmicLoginEmail";
  } else {
    func.displayName = `PlasmicLoginEmail.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginEmail = Object.assign(
  // Top-level PlasmicLoginEmail renders the root element
  makeNodeComponent("loginEmail"),
  {
    // Helper components rendering sub-elements

    // Helper for creating a Renderer
    createRenderer: () => new PlasmicLoginEmail__Renderer({}, {}),

    // Metadata about props expected for PlasmicLoginEmail
    internalVariantProps: PlasmicLoginEmail__VariantProps,
    internalArgProps: PlasmicLoginEmail__ArgProps
  }
);

type ForNodeRenderer<NodeName extends NodeNameType> = NodeRenderer<
  PlasmicLoginEmail__VariantsArgs,
  PlasmicLoginEmail__ArgsType,
  NodeOverridesType<NodeName>
>;

class PlasmicLoginEmail__Renderer extends Renderer<
  PlasmicLoginEmail__VariantsArgs,
  PlasmicLoginEmail__ArgsType,
  PlasmicLoginEmail__OverridesType,
  "loginEmail"
> {
  constructor(
    variants: PlasmicLoginEmail__VariantsArgs,
    args: PlasmicLoginEmail__ArgsType
  ) {
    super(variants, args, PlasmicLoginEmail__RenderFunc, "loginEmail");
  }

  protected create(
    variants: PlasmicLoginEmail__VariantsArgs,
    args: PlasmicLoginEmail__ArgsType
  ) {
    return new PlasmicLoginEmail__Renderer(variants, args);
  }

  getInternalVariantProps(): VariantPropType[] {
    return PlasmicLoginEmail__VariantProps;
  }

  getInternalArgProps(): ArgPropType[] {
    return PlasmicLoginEmail__ArgProps;
  }

  forNode(name: "loginEmail"): ForNodeRenderer<"loginEmail">;
  forNode(name: NodeNameType) {
    return super.forNode(name);
  }
}

export default PlasmicLoginEmail;
/* prettier-ignore-end */
