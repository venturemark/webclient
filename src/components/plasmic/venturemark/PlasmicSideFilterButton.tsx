/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mSMs7FqGjFMPgGjdzmbmrV
// Component: pT17Dg-GYT
import * as React from "react";
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts
} from "@plasmicapp/react-web";

import { ScreenContext, ScreenValue } from "../PlasmicGlobalVariant__Screen"; // plasmic-import: 56c3647f-e651-4dbb-a83a-6988a6e19d16/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_venturemark.css"; // plasmic-import: mSMs7FqGjFMPgGjdzmbmrV/projectcss
import "./PlasmicSideFilterButton.css"; // plasmic-import: pT17Dg-GYT/css

export type PlasmicSideFilterButton__VariantMembers = {};
export type PlasmicSideFilterButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicSideFilterButton__VariantsArgs;
export const PlasmicSideFilterButton__VariantProps = new Array<
  VariantPropType
>();

export type PlasmicSideFilterButton__ArgsType = {};
type ArgPropType = keyof PlasmicSideFilterButton__ArgsType;
export const PlasmicSideFilterButton__ArgProps = new Array<ArgPropType>();

export type PlasmicSideFilterButton__OverridesType = {
  root?: Flex<"div">;
};

export interface DefaultSideFilterButtonProps {
  className?: string;
}

function PlasmicSideFilterButton__RenderFunc(props: {
  variants: PlasmicSideFilterButton__VariantsArgs;
  args: PlasmicSideFilterButton__ArgsType;
  overrides: PlasmicSideFilterButton__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = {
    screen: React.useContext(ScreenContext)
  };

  Object.entries(globalVariants).forEach(([key, value]) => {
    if (value === ("PLEASE_RENDER_INSIDE_PROVIDER" as any)) {
      throw new Error(
        `Context value for ${key} was not defined. Did you render the required provider for this component? Learn More: https://www.plasmic.app/learn/other-assets/#global-variants`
      );
    }
  });

  return ((hasVariant(globalVariants, "screen", "desktop") ? true : false) ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames({
        "SideFilterButton__root--desktop__5m5I4U__2W": true,
        SideFilterButton__root__5m5I4: true,
        "plasmic-default__all": true,
        "plasmic-default__div": true,
        root_reset_mSMs7FqGjFMPgGjdzmbmrV: true
      })}
    >
      <div
        className={
          classNames({
            "SideFilterButton__box__-WhtA": true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          }) + " __wab_text"
        }
      >
        {"ALL"}
      </div>

      <div
        className={
          classNames({
            SideFilterButton__box__bW1gK: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          }) + " __wab_text"
        }
      >
        {"(12)"}
      </div>
    </div>
  ) : null) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSideFilterButton__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSideFilterButton__VariantsArgs;
    args?: PlasmicSideFilterButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & // Specify variants directly as props
  Omit<PlasmicSideFilterButton__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicSideFilterButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName>;
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSideFilterButton__ArgProps,
      internalVariantPropNames: PlasmicSideFilterButton__VariantProps
    });

    return PlasmicSideFilterButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSideFilterButton";
  } else {
    func.displayName = `PlasmicSideFilterButton.${nodeName}`;
  }
  return func;
}

export const PlasmicSideFilterButton = Object.assign(
  // Top-level PlasmicSideFilterButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Helper for creating a Renderer
    createRenderer: () => new PlasmicSideFilterButton__Renderer({}, {}),

    // Metadata about props expected for PlasmicSideFilterButton
    internalVariantProps: PlasmicSideFilterButton__VariantProps,
    internalArgProps: PlasmicSideFilterButton__ArgProps
  }
);

type ForNodeRenderer<NodeName extends NodeNameType> = NodeRenderer<
  PlasmicSideFilterButton__VariantsArgs,
  PlasmicSideFilterButton__ArgsType,
  NodeOverridesType<NodeName>
>;

class PlasmicSideFilterButton__Renderer extends Renderer<
  PlasmicSideFilterButton__VariantsArgs,
  PlasmicSideFilterButton__ArgsType,
  PlasmicSideFilterButton__OverridesType,
  "root"
> {
  constructor(
    variants: PlasmicSideFilterButton__VariantsArgs,
    args: PlasmicSideFilterButton__ArgsType
  ) {
    super(variants, args, PlasmicSideFilterButton__RenderFunc, "root");
  }

  protected create(
    variants: PlasmicSideFilterButton__VariantsArgs,
    args: PlasmicSideFilterButton__ArgsType
  ) {
    return new PlasmicSideFilterButton__Renderer(variants, args);
  }

  getInternalVariantProps(): VariantPropType[] {
    return PlasmicSideFilterButton__VariantProps;
  }

  getInternalArgProps(): ArgPropType[] {
    return PlasmicSideFilterButton__ArgProps;
  }

  forNode(name: "root"): ForNodeRenderer<"root">;
  forNode(name: NodeNameType) {
    return super.forNode(name);
  }
}

export default PlasmicSideFilterButton;
/* prettier-ignore-end */
