/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mSMs7FqGjFMPgGjdzmbmrV
// Component: AjWb9YfCceP
import * as React from "react";
import {
  hasVariant,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts
} from "@plasmicapp/react-web";

import { ScreenContext, ScreenValue } from "../PlasmicGlobalVariant__Screen"; // plasmic-import: 56c3647f-e651-4dbb-a83a-6988a6e19d16/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_venturemark.css"; // plasmic-import: mSMs7FqGjFMPgGjdzmbmrV/projectcss
import "./PlasmicUpdate.css"; // plasmic-import: AjWb9YfCceP/css
import IconAttentionIcon from "./icons/PlasmicIcon__IconAttention"; // plasmic-import: JiGnSt4Vsj/icon
import IconMetricIcon from "./icons/PlasmicIcon__IconMetric"; // plasmic-import: -jtIQQh_Az/icon
import IconAskIcon from "./icons/PlasmicIcon__IconAsk"; // plasmic-import: 36OPIllke4/icon
import IconClockIcon from "./icons/PlasmicIcon__IconClock"; // plasmic-import: md99BMH18R/icon

export type PlasmicUpdate__VariantMembers = {
  state: "metric" | "ask";
};

export type PlasmicUpdate__VariantsArgs = {
  state?: SingleChoiceArg<"metric" | "ask">;
};

type VariantPropType = keyof PlasmicUpdate__VariantsArgs;
export const PlasmicUpdate__VariantProps = new Array<VariantPropType>("state");

export type PlasmicUpdate__ArgsType = {
  name?: React.ReactNode;
  date?: React.ReactNode;
};

type ArgPropType = keyof PlasmicUpdate__ArgsType;
export const PlasmicUpdate__ArgProps = new Array<ArgPropType>("name", "date");

export type PlasmicUpdate__OverridesType = {
  root?: Flex<"div">;
  avatar?: Flex<"img">;
  value?: Flex<"div">;
  textContainer?: Flex<"div">;
};

export interface DefaultUpdateProps {
  name?: React.ReactNode;
  date?: React.ReactNode;
  state?: SingleChoiceArg<"metric" | "ask">;
  className?: string;
}

function PlasmicUpdate__RenderFunc(props: {
  variants: PlasmicUpdate__VariantsArgs;
  args: PlasmicUpdate__ArgsType;
  overrides: PlasmicUpdate__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = {
    screen: React.useContext(ScreenContext)
  };

  Object.entries(globalVariants).forEach(([key, value]) => {
    if (value === ("PLEASE_RENDER_INSIDE_PROVIDER" as any)) {
      throw new Error(
        `Context value for ${key} was not defined. Did you render the required provider for this component? Learn More: https://www.plasmic.app/learn/other-assets/#global-variants`
      );
    }
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      data-plasmic-wrap-flex-child={true}
      className={classNames({
        "Update__root--ask__7BmV95wCO1": hasVariant(variants, "state", "ask"),
        "Update__root--desktop__7BmV9U__2W": true,
        "Update__root--metric__7BmV9agOx5": hasVariant(
          variants,
          "state",
          "metric"
        ),

        Update__root__7BmV9: true,
        "plasmic-default__all": true,
        "plasmic-default__div": true,
        root_reset_mSMs7FqGjFMPgGjdzmbmrV: true
      })}
    >
      <div
        data-plasmic-wrap-flex-child={true}
        className={classNames({
          "Update__box--desktop__Eh4j9U__2W": true,
          "Update__box--metric__Eh4j9agOx5": hasVariant(
            variants,
            "state",
            "metric"
          ),

          Update__box__Eh4j9: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        <div
          className={classNames({
            Update__box__1MZIo: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          })}
        >
          <img
            data-plasmic-name={"avatar"}
            data-plasmic-override={overrides.avatar}
            alt={""}
            className={classNames({
              "Update__avatar--ask__KjUn35wCO1": hasVariant(
                variants,
                "state",
                "ask"
              ),

              "Update__avatar--metric__KjUn3agOx5": hasVariant(
                variants,
                "state",
                "metric"
              ),

              Update__avatar__KjUn3: true,
              "plasmic-default__all": true,
              "plasmic-default__img": true
            })}
            role={"img"}
            src={
              "https://pbs.twimg.com/profile_images/1027401107708858368/FNZP7TEE_400x400.jpg" as const
            }
          ></img>
        </div>

        {(hasVariant(variants, "state", "metric") ? true : false) ? (
          <div
            className={classNames({
              "Update__box--metric__zDUiCagOx5": hasVariant(
                variants,
                "state",
                "metric"
              ),

              Update__box__zDUiC: true,
              "plasmic-default__all": true,
              "plasmic-default__div": true
            })}
          >
            <div
              data-plasmic-name={"value"}
              data-plasmic-override={overrides.value}
              className={
                classNames({
                  "Update__value--metric__nwLXoagOx5": hasVariant(
                    variants,
                    "state",
                    "metric"
                  ),

                  Update__value__nwLXo: true,
                  "plasmic-default__all": true,
                  "plasmic-default__div": true
                }) + " __wab_text"
              }
            >
              {hasVariant(variants, "state", "metric") ? "27" : "+ 27"}
            </div>
          </div>
        ) : null}

        <div
          className={classNames({
            Update__box__Opwqh: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          })}
        ></div>
      </div>

      <div
        data-plasmic-wrap-flex-child={true}
        className={classNames({
          "Update__box--ask__tXL0Y5wCO1": hasVariant(variants, "state", "ask"),
          "Update__box--desktop__tXL0YU__2W": true,
          "Update__box--metric__tXL0YagOx5": hasVariant(
            variants,
            "state",
            "metric"
          ),

          Update__box__tXL0Y: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        <div
          className={classNames({
            "Update__box--ask__y5cAn5wCO1": hasVariant(
              variants,
              "state",
              "ask"
            ),

            "Update__box--metric__y5cAnagOx5": hasVariant(
              variants,
              "state",
              "metric"
            ),

            Update__box__y5cAn: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          })}
        >
          <div
            data-plasmic-name={"textContainer"}
            data-plasmic-override={overrides.textContainer}
            className={
              classNames({
                "Update__textContainer--ask__ExK1Z5wCO1": hasVariant(
                  variants,
                  "state",
                  "ask"
                ),

                "Update__textContainer--desktop__ExK1ZU__2W": true,
                "Update__textContainer--metric__ExK1ZagOx5": hasVariant(
                  variants,
                  "state",
                  "metric"
                ),

                Update__textContainer__ExK1Z: true,
                "plasmic-default__all": true,
                "plasmic-default__div": true
              }) + " __wab_text"
            }
          >
            {
              "How does this feel to create updates?\n\nWe have a character limit in this box. Updates can't be too long.\n\nBut at least it can be long enough to capture a full idea.\n\nsdfsdfsfsfsfsdfsd\n\n\n\n\nsdfsdfsdfsdfsd"
            }
          </div>
        </div>

        {(hasVariant(variants, "state", "metric") ? true : true) ? (
          <div
            className={classNames({
              "Update__box--metric__PoHhzagOx5": hasVariant(
                variants,
                "state",
                "metric"
              ),

              Update__box__PoHhz: true,
              "plasmic-default__all": true,
              "plasmic-default__div": true
            })}
          >
            {(hasVariant(variants, "state", "metric") ? true : true) ? (
              <div
                data-plasmic-wrap-flex-child={true}
                className={classNames({
                  "Update__box--metric__pVRd7agOx5": hasVariant(
                    variants,
                    "state",
                    "metric"
                  ),

                  Update__box__pVRd7: true,
                  "plasmic-default__all": true,
                  "plasmic-default__div": true
                })}
              >
                <PlasmicIcon
                  PlasmicIconType={
                    hasVariant(variants, "state", "ask")
                      ? IconAskIcon
                      : hasVariant(variants, "state", "metric")
                      ? IconMetricIcon
                      : IconAttentionIcon
                  }
                  className={classNames({
                    "Update__svg--ask__eB-_z5wCO1": hasVariant(
                      variants,
                      "state",
                      "ask"
                    ),

                    "Update__svg--metric__eB-_zagOx5": hasVariant(
                      variants,
                      "state",
                      "metric"
                    ),

                    "Update__svg__eB-_z": true,
                    "plasmic-default__all": true,
                    "plasmic-default__svg": true
                  })}
                  role={"img"}
                  {...({} as any)}
                ></PlasmicIcon>

                <div
                  className={classNames({
                    "Update__box--ask__9J_Dn5wCO1": hasVariant(
                      variants,
                      "state",
                      "ask"
                    ),

                    "Update__box--metric__9J_DnagOx5": hasVariant(
                      variants,
                      "state",
                      "metric"
                    ),

                    Update__box__9J_Dn: true,
                    "plasmic-default__all": true,
                    "plasmic-default__div": true
                  })}
                >
                  <PlasmicSlot defaultContents={"Ask"} value={args.name} />
                </div>
              </div>
            ) : null}

            <div
              data-plasmic-wrap-flex-child={true}
              className={classNames({
                "Update__box--metric__x4kLBagOx5": hasVariant(
                  variants,
                  "state",
                  "metric"
                ),

                Update__box__x4kLB: true,
                "plasmic-default__all": true,
                "plasmic-default__div": true
              })}
            >
              <PlasmicIcon
                PlasmicIconType={
                  hasVariant(variants, "state", "metric")
                    ? IconClockIcon
                    : IconClockIcon
                }
                className={classNames({
                  "Update__svg--ask__gJqjW5wCO1": hasVariant(
                    variants,
                    "state",
                    "ask"
                  ),

                  "Update__svg--metric__gJqjWagOx5": hasVariant(
                    variants,
                    "state",
                    "metric"
                  ),

                  Update__svg__gJqjW: true,
                  "plasmic-default__all": true,
                  "plasmic-default__svg": true
                })}
                role={"img"}
                {...({} as any)}
              ></PlasmicIcon>

              <div
                className={classNames({
                  "Update__box--metric__lxcgwagOx5": hasVariant(
                    variants,
                    "state",
                    "metric"
                  ),

                  Update__box__lxcgw: true,
                  "plasmic-default__all": true,
                  "plasmic-default__div": true
                })}
              >
                <PlasmicSlot
                  defaultContents={"14 hours ago"}
                  value={args.date}
                />
              </div>
            </div>
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "avatar", "value", "textContainer"],
  avatar: ["avatar"],
  value: ["value"],
  textContainer: ["textContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  avatar: "img";
  value: "div";
  textContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUpdate__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUpdate__VariantsArgs;
    args?: PlasmicUpdate__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & // Specify variants directly as props
  Omit<PlasmicUpdate__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicUpdate__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName>;
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicUpdate__ArgProps,
      internalVariantPropNames: PlasmicUpdate__VariantProps
    });

    return PlasmicUpdate__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUpdate";
  } else {
    func.displayName = `PlasmicUpdate.${nodeName}`;
  }
  return func;
}

export const PlasmicUpdate = Object.assign(
  // Top-level PlasmicUpdate renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    value: makeNodeComponent("value"),
    textContainer: makeNodeComponent("textContainer"),

    // Helper for creating a Renderer
    createRenderer: () => new PlasmicUpdate__Renderer({}, {}),

    // Metadata about props expected for PlasmicUpdate
    internalVariantProps: PlasmicUpdate__VariantProps,
    internalArgProps: PlasmicUpdate__ArgProps
  }
);

type ForNodeRenderer<NodeName extends NodeNameType> = NodeRenderer<
  PlasmicUpdate__VariantsArgs,
  PlasmicUpdate__ArgsType,
  NodeOverridesType<NodeName>
>;

class PlasmicUpdate__Renderer extends Renderer<
  PlasmicUpdate__VariantsArgs,
  PlasmicUpdate__ArgsType,
  PlasmicUpdate__OverridesType,
  "root"
> {
  constructor(
    variants: PlasmicUpdate__VariantsArgs,
    args: PlasmicUpdate__ArgsType
  ) {
    super(variants, args, PlasmicUpdate__RenderFunc, "root");
  }

  protected create(
    variants: PlasmicUpdate__VariantsArgs,
    args: PlasmicUpdate__ArgsType
  ) {
    return new PlasmicUpdate__Renderer(variants, args);
  }

  getInternalVariantProps(): VariantPropType[] {
    return PlasmicUpdate__VariantProps;
  }

  getInternalArgProps(): ArgPropType[] {
    return PlasmicUpdate__ArgProps;
  }

  forNode(name: "textContainer"): ForNodeRenderer<"textContainer">;
  forNode(name: "value"): ForNodeRenderer<"value">;
  forNode(name: "avatar"): ForNodeRenderer<"avatar">;
  forNode(name: "root"): ForNodeRenderer<"root">;
  forNode(name: NodeNameType) {
    return super.forNode(name);
  }
}

export default PlasmicUpdate;
/* prettier-ignore-end */
